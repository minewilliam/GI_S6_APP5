
d:/UDES/S6/APP5/GI_S6_APP5/ArgonDevice/target/2.3.0/argon/ArgonDevice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000012f4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5310  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e538  000d5314  0001e538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000024c  2003e5a4  2003e5a4  0002e5a4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5380  000d5380  00025380  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d53a8  000d53a8  000253a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001288a7  00000000  00000000  000253ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013e6e  00000000  00000000  0014dc53  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00028adb  00000000  00000000  00161ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002520  00000000  00000000  0018a59c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00007200  00000000  00000000  0018cabc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00034f1e  00000000  00000000  00193cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003192c  00000000  00000000  001c8bda  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00108811  00000000  00000000  001fa506  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000064a8  00000000  00000000  00302d18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f000 ffda 	bl	d4fe6 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f000 ffe2 	bl	d5002 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e538 	.word	0x2003e538
   d4048:	000d5314 	.word	0x000d5314
   d404c:	2003e5a4 	.word	0x2003e5a4
   d4050:	2003e5a4 	.word	0x2003e5a4
   d4054:	2003e7ed 	.word	0x2003e7ed

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f000 fc1f 	bl	d48a0 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d52e4 	.word	0x000d52e4
   d407c:	000d5304 	.word	0x000d5304

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b838 	b.w	d40f4 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f871 	bl	d416c <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f000 bbbf 	b.w	d4810 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 ba1f 	b.w	d44d4 <malloc>

000d4096 <_Znaj>:
   d4096:	f000 ba1d 	b.w	d44d4 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 ba23 	b.w	d44e4 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <_Z9switchLED6String>:
  Particle.variable("status", status);
  Particle.function("LED", switchLED);
}

bool switchLED(String extra) {
  status = !status;
   d40b0:	4b02      	ldr	r3, [pc, #8]	; (d40bc <_Z9switchLED6String+0xc>)
   d40b2:	7818      	ldrb	r0, [r3, #0]
   d40b4:	f080 0001 	eor.w	r0, r0, #1
   d40b8:	7018      	strb	r0, [r3, #0]
  return status;
}
   d40ba:	4770      	bx	lr
   d40bc:	2003e5a4 	.word	0x2003e5a4

000d40c0 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40c0:	2a01      	cmp	r2, #1
   d40c2:	d003      	beq.n	d40cc <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xc>
   d40c4:	2a02      	cmp	r2, #2
   d40c6:	d003      	beq.n	d40d0 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x10>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40c8:	2000      	movs	r0, #0
   d40ca:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40cc:	6001      	str	r1, [r0, #0]
	      break;
   d40ce:	e7fb      	b.n	d40c8 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40d0:	680b      	ldr	r3, [r1, #0]
   d40d2:	6003      	str	r3, [r0, #0]
	}
   d40d4:	e7f8      	b.n	d40c8 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x8>

000d40d6 <_ZNSt17_Function_handlerIFi6StringEPFbS0_EE9_M_invokeERKSt9_Any_dataOS0_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d40d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
      {
	return (*_Base::_M_get_pointer(__functor))(
   d40d8:	6804      	ldr	r4, [r0, #0]
   d40da:	4668      	mov	r0, sp
   d40dc:	f000 faf8 	bl	d46d0 <_ZN6StringC1EOS_>
   d40e0:	4668      	mov	r0, sp
   d40e2:	47a0      	blx	r4
   d40e4:	4604      	mov	r4, r0
   d40e6:	4668      	mov	r0, sp
   d40e8:	f000 fa76 	bl	d45d8 <_ZN6StringD1Ev>
	    std::forward<_ArgTypes>(__args)...);
      }
   d40ec:	4620      	mov	r0, r4
   d40ee:	b004      	add	sp, #16
   d40f0:	bd10      	pop	{r4, pc}
	...

000d40f4 <setup>:
{
   d40f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  pinMode(D7, OUTPUT);
   d40f6:	2101      	movs	r1, #1
   d40f8:	2007      	movs	r0, #7
   d40fa:	f000 feff 	bl	d4efc <pinMode>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d40fe:	4914      	ldr	r1, [pc, #80]	; (d4150 <setup+0x5c>)
   d4100:	4814      	ldr	r0, [pc, #80]	; (d4154 <setup+0x60>)
   d4102:	2300      	movs	r3, #0
   d4104:	2201      	movs	r2, #1
   d4106:	f000 f9cd 	bl	d44a4 <spark_variable>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d410a:	4b13      	ldr	r3, [pc, #76]	; (d4158 <setup+0x64>)
   d410c:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d410e:	4b13      	ldr	r3, [pc, #76]	; (d415c <setup+0x68>)
   d4110:	9303      	str	r3, [sp, #12]
    static bool _function(const char *funcKey, user_std_function_int_str_t func, void* reserved=NULL)
    {
        bool success = false;
        if (func) // if the call-wrapper has wrapped a callable object
        {
            auto wrapper = new user_std_function_int_str_t(func);
   d4112:	2010      	movs	r0, #16
	    _M_manager = &_My_handler::_M_manager;
   d4114:	4b12      	ldr	r3, [pc, #72]	; (d4160 <setup+0x6c>)
   d4116:	9302      	str	r3, [sp, #8]
   d4118:	f7ff ffbb 	bl	d4092 <_Znwj>
   d411c:	4604      	mov	r4, r0
   d411e:	b178      	cbz	r0, d4140 <setup+0x4c>
    _Function_base() : _M_manager(nullptr) { }
   d4120:	2300      	movs	r3, #0
   d4122:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4124:	9b02      	ldr	r3, [sp, #8]
      if (static_cast<bool>(__x))
   d4126:	b133      	cbz	r3, d4136 <setup+0x42>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4128:	2202      	movs	r2, #2
   d412a:	4669      	mov	r1, sp
   d412c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d412e:	9b03      	ldr	r3, [sp, #12]
   d4130:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4132:	9b02      	ldr	r3, [sp, #8]
   d4134:	60a3      	str	r3, [r4, #8]
            if (wrapper) {
                success = register_function(call_std_user_function, wrapper, funcKey);
   d4136:	4a0b      	ldr	r2, [pc, #44]	; (d4164 <setup+0x70>)
   d4138:	480b      	ldr	r0, [pc, #44]	; (d4168 <setup+0x74>)
   d413a:	4621      	mov	r1, r4
   d413c:	f000 fbf6 	bl	d492c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
      if (_M_manager)
   d4140:	9b02      	ldr	r3, [sp, #8]
   d4142:	b11b      	cbz	r3, d414c <setup+0x58>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4144:	4669      	mov	r1, sp
   d4146:	2203      	movs	r2, #3
   d4148:	4608      	mov	r0, r1
   d414a:	4798      	blx	r3
}
   d414c:	b004      	add	sp, #16
   d414e:	bd10      	pop	{r4, pc}
   d4150:	2003e5a4 	.word	0x2003e5a4
   d4154:	000d515c 	.word	0x000d515c
   d4158:	000d40b1 	.word	0x000d40b1
   d415c:	000d40d7 	.word	0x000d40d7
   d4160:	000d40c1 	.word	0x000d40c1
   d4164:	000d5163 	.word	0x000d5163
   d4168:	000d4905 	.word	0x000d4905

000d416c <loop>:

void loop()
{
   d416c:	b510      	push	{r4, lr}
  digitalWrite(MY_LED, status);
   d416e:	4c09      	ldr	r4, [pc, #36]	; (d4194 <loop+0x28>)
   d4170:	2007      	movs	r0, #7
   d4172:	7821      	ldrb	r1, [r4, #0]
   d4174:	f000 fed3 	bl	d4f1e <digitalWrite>
  if(status) Serial.print("we gucc");
   d4178:	7823      	ldrb	r3, [r4, #0]
   d417a:	b123      	cbz	r3, d4186 <loop+0x1a>
   d417c:	f000 fcb4 	bl	d4ae8 <_Z16_fetch_usbserialv>
   d4180:	4905      	ldr	r1, [pc, #20]	; (d4198 <loop+0x2c>)
   d4182:	f000 fae1 	bl	d4748 <_ZN5Print5printEPKc>
  delay(2500);
   d4186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(2500);
   d418a:	f640 10c4 	movw	r0, #2500	; 0x9c4
   d418e:	f000 bb13 	b.w	d47b8 <delay>
   d4192:	bf00      	nop
   d4194:	2003e5a4 	.word	0x2003e5a4
   d4198:	000d5167 	.word	0x000d5167

000d419c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d419c:	b508      	push	{r3, lr}
   d419e:	4b02      	ldr	r3, [pc, #8]	; (d41a8 <netdb_freeaddrinfo+0xc>)
   d41a0:	681b      	ldr	r3, [r3, #0]
   d41a2:	689b      	ldr	r3, [r3, #8]
   d41a4:	9301      	str	r3, [sp, #4]
   d41a6:	bd08      	pop	{r3, pc}
   d41a8:	00030268 	.word	0x00030268

000d41ac <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d41ac:	b508      	push	{r3, lr}
   d41ae:	4b02      	ldr	r3, [pc, #8]	; (d41b8 <netdb_getaddrinfo+0xc>)
   d41b0:	681b      	ldr	r3, [r3, #0]
   d41b2:	68db      	ldr	r3, [r3, #12]
   d41b4:	9301      	str	r3, [sp, #4]
   d41b6:	bd08      	pop	{r3, pc}
   d41b8:	00030268 	.word	0x00030268

000d41bc <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d41bc:	b508      	push	{r3, lr}
   d41be:	4b02      	ldr	r3, [pc, #8]	; (d41c8 <HAL_Pin_Mode+0xc>)
   d41c0:	681b      	ldr	r3, [r3, #0]
   d41c2:	689b      	ldr	r3, [r3, #8]
   d41c4:	9301      	str	r3, [sp, #4]
   d41c6:	bd08      	pop	{r3, pc}
   d41c8:	0003022c 	.word	0x0003022c

000d41cc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d41cc:	b508      	push	{r3, lr}
   d41ce:	4b02      	ldr	r3, [pc, #8]	; (d41d8 <HAL_Get_Pin_Mode+0xc>)
   d41d0:	681b      	ldr	r3, [r3, #0]
   d41d2:	68db      	ldr	r3, [r3, #12]
   d41d4:	9301      	str	r3, [sp, #4]
   d41d6:	bd08      	pop	{r3, pc}
   d41d8:	0003022c 	.word	0x0003022c

000d41dc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d41dc:	b508      	push	{r3, lr}
   d41de:	4b02      	ldr	r3, [pc, #8]	; (d41e8 <HAL_GPIO_Write+0xc>)
   d41e0:	681b      	ldr	r3, [r3, #0]
   d41e2:	691b      	ldr	r3, [r3, #16]
   d41e4:	9301      	str	r3, [sp, #4]
   d41e6:	bd08      	pop	{r3, pc}
   d41e8:	0003022c 	.word	0x0003022c

000d41ec <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d41ec:	b508      	push	{r3, lr}
   d41ee:	4b02      	ldr	r3, [pc, #8]	; (d41f8 <HAL_RNG_GetRandomNumber+0xc>)
   d41f0:	681b      	ldr	r3, [r3, #0]
   d41f2:	685b      	ldr	r3, [r3, #4]
   d41f4:	9301      	str	r3, [sp, #4]
   d41f6:	bd08      	pop	{r3, pc}
   d41f8:	00030218 	.word	0x00030218

000d41fc <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d41fc:	b508      	push	{r3, lr}
   d41fe:	4b02      	ldr	r3, [pc, #8]	; (d4208 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4200:	681b      	ldr	r3, [r3, #0]
   d4202:	695b      	ldr	r3, [r3, #20]
   d4204:	9301      	str	r3, [sp, #4]
   d4206:	bd08      	pop	{r3, pc}
   d4208:	00030218 	.word	0x00030218

000d420c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d420c:	b508      	push	{r3, lr}
   d420e:	4b02      	ldr	r3, [pc, #8]	; (d4218 <os_mutex_recursive_create+0xc>)
   d4210:	681b      	ldr	r3, [r3, #0]
   d4212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4214:	9301      	str	r3, [sp, #4]
   d4216:	bd08      	pop	{r3, pc}
   d4218:	00030248 	.word	0x00030248

000d421c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d421c:	b508      	push	{r3, lr}
   d421e:	4b02      	ldr	r3, [pc, #8]	; (d4228 <inet_inet_ntop+0xc>)
   d4220:	681b      	ldr	r3, [r3, #0]
   d4222:	695b      	ldr	r3, [r3, #20]
   d4224:	9301      	str	r3, [sp, #4]
   d4226:	bd08      	pop	{r3, pc}
   d4228:	00030264 	.word	0x00030264

000d422c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d422c:	b508      	push	{r3, lr}
   d422e:	4b02      	ldr	r3, [pc, #8]	; (d4238 <hal_usart_init+0xc>)
   d4230:	681b      	ldr	r3, [r3, #0]
   d4232:	681b      	ldr	r3, [r3, #0]
   d4234:	9301      	str	r3, [sp, #4]
   d4236:	bd08      	pop	{r3, pc}
   d4238:	0003023c 	.word	0x0003023c

000d423c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d423c:	b508      	push	{r3, lr}
   d423e:	4b02      	ldr	r3, [pc, #8]	; (d4248 <hal_usart_write+0xc>)
   d4240:	681b      	ldr	r3, [r3, #0]
   d4242:	68db      	ldr	r3, [r3, #12]
   d4244:	9301      	str	r3, [sp, #4]
   d4246:	bd08      	pop	{r3, pc}
   d4248:	0003023c 	.word	0x0003023c

000d424c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d424c:	b508      	push	{r3, lr}
   d424e:	4b02      	ldr	r3, [pc, #8]	; (d4258 <hal_usart_available+0xc>)
   d4250:	681b      	ldr	r3, [r3, #0]
   d4252:	691b      	ldr	r3, [r3, #16]
   d4254:	9301      	str	r3, [sp, #4]
   d4256:	bd08      	pop	{r3, pc}
   d4258:	0003023c 	.word	0x0003023c

000d425c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d425c:	b508      	push	{r3, lr}
   d425e:	4b02      	ldr	r3, [pc, #8]	; (d4268 <hal_usart_read+0xc>)
   d4260:	681b      	ldr	r3, [r3, #0]
   d4262:	695b      	ldr	r3, [r3, #20]
   d4264:	9301      	str	r3, [sp, #4]
   d4266:	bd08      	pop	{r3, pc}
   d4268:	0003023c 	.word	0x0003023c

000d426c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d426c:	b508      	push	{r3, lr}
   d426e:	4b02      	ldr	r3, [pc, #8]	; (d4278 <hal_usart_peek+0xc>)
   d4270:	681b      	ldr	r3, [r3, #0]
   d4272:	699b      	ldr	r3, [r3, #24]
   d4274:	9301      	str	r3, [sp, #4]
   d4276:	bd08      	pop	{r3, pc}
   d4278:	0003023c 	.word	0x0003023c

000d427c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d427c:	b508      	push	{r3, lr}
   d427e:	4b02      	ldr	r3, [pc, #8]	; (d4288 <hal_usart_flush+0xc>)
   d4280:	681b      	ldr	r3, [r3, #0]
   d4282:	69db      	ldr	r3, [r3, #28]
   d4284:	9301      	str	r3, [sp, #4]
   d4286:	bd08      	pop	{r3, pc}
   d4288:	0003023c 	.word	0x0003023c

000d428c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d428c:	b508      	push	{r3, lr}
   d428e:	4b02      	ldr	r3, [pc, #8]	; (d4298 <hal_usart_is_enabled+0xc>)
   d4290:	681b      	ldr	r3, [r3, #0]
   d4292:	6a1b      	ldr	r3, [r3, #32]
   d4294:	9301      	str	r3, [sp, #4]
   d4296:	bd08      	pop	{r3, pc}
   d4298:	0003023c 	.word	0x0003023c

000d429c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d429c:	b508      	push	{r3, lr}
   d429e:	4b02      	ldr	r3, [pc, #8]	; (d42a8 <hal_usart_available_data_for_write+0xc>)
   d42a0:	681b      	ldr	r3, [r3, #0]
   d42a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d42a4:	9301      	str	r3, [sp, #4]
   d42a6:	bd08      	pop	{r3, pc}
   d42a8:	0003023c 	.word	0x0003023c

000d42ac <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d42ac:	b508      	push	{r3, lr}
   d42ae:	4b02      	ldr	r3, [pc, #8]	; (d42b8 <hal_i2c_write+0xc>)
   d42b0:	681b      	ldr	r3, [r3, #0]
   d42b2:	6a1b      	ldr	r3, [r3, #32]
   d42b4:	9301      	str	r3, [sp, #4]
   d42b6:	bd08      	pop	{r3, pc}
   d42b8:	00030228 	.word	0x00030228

000d42bc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d42bc:	b508      	push	{r3, lr}
   d42be:	4b02      	ldr	r3, [pc, #8]	; (d42c8 <hal_i2c_available+0xc>)
   d42c0:	681b      	ldr	r3, [r3, #0]
   d42c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d42c4:	9301      	str	r3, [sp, #4]
   d42c6:	bd08      	pop	{r3, pc}
   d42c8:	00030228 	.word	0x00030228

000d42cc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d42cc:	b508      	push	{r3, lr}
   d42ce:	4b02      	ldr	r3, [pc, #8]	; (d42d8 <hal_i2c_read+0xc>)
   d42d0:	681b      	ldr	r3, [r3, #0]
   d42d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d42d4:	9301      	str	r3, [sp, #4]
   d42d6:	bd08      	pop	{r3, pc}
   d42d8:	00030228 	.word	0x00030228

000d42dc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d42dc:	b508      	push	{r3, lr}
   d42de:	4b02      	ldr	r3, [pc, #8]	; (d42e8 <hal_i2c_peek+0xc>)
   d42e0:	681b      	ldr	r3, [r3, #0]
   d42e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d42e4:	9301      	str	r3, [sp, #4]
   d42e6:	bd08      	pop	{r3, pc}
   d42e8:	00030228 	.word	0x00030228

000d42ec <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d42ec:	b508      	push	{r3, lr}
   d42ee:	4b02      	ldr	r3, [pc, #8]	; (d42f8 <hal_i2c_flush+0xc>)
   d42f0:	681b      	ldr	r3, [r3, #0]
   d42f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d42f4:	9301      	str	r3, [sp, #4]
   d42f6:	bd08      	pop	{r3, pc}
   d42f8:	00030228 	.word	0x00030228

000d42fc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d42fc:	b508      	push	{r3, lr}
   d42fe:	4b02      	ldr	r3, [pc, #8]	; (d4308 <hal_i2c_is_enabled+0xc>)
   d4300:	681b      	ldr	r3, [r3, #0]
   d4302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4304:	9301      	str	r3, [sp, #4]
   d4306:	bd08      	pop	{r3, pc}
   d4308:	00030228 	.word	0x00030228

000d430c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d430c:	b508      	push	{r3, lr}
   d430e:	4b02      	ldr	r3, [pc, #8]	; (d4318 <hal_i2c_init+0xc>)
   d4310:	681b      	ldr	r3, [r3, #0]
   d4312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4314:	9301      	str	r3, [sp, #4]
   d4316:	bd08      	pop	{r3, pc}
   d4318:	00030228 	.word	0x00030228

000d431c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d431c:	b508      	push	{r3, lr}
   d431e:	4b02      	ldr	r3, [pc, #8]	; (d4328 <hal_spi_init+0xc>)
   d4320:	681b      	ldr	r3, [r3, #0]
   d4322:	69db      	ldr	r3, [r3, #28]
   d4324:	9301      	str	r3, [sp, #4]
   d4326:	bd08      	pop	{r3, pc}
   d4328:	00030230 	.word	0x00030230

000d432c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d432c:	b508      	push	{r3, lr}
   d432e:	4b02      	ldr	r3, [pc, #8]	; (d4338 <hal_spi_is_enabled+0xc>)
   d4330:	681b      	ldr	r3, [r3, #0]
   d4332:	6a1b      	ldr	r3, [r3, #32]
   d4334:	9301      	str	r3, [sp, #4]
   d4336:	bd08      	pop	{r3, pc}
   d4338:	00030230 	.word	0x00030230

000d433c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d433c:	b508      	push	{r3, lr}
   d433e:	4b02      	ldr	r3, [pc, #8]	; (d4348 <HAL_USB_USART_Init+0xc>)
   d4340:	681b      	ldr	r3, [r3, #0]
   d4342:	681b      	ldr	r3, [r3, #0]
   d4344:	9301      	str	r3, [sp, #4]
   d4346:	bd08      	pop	{r3, pc}
   d4348:	0003024c 	.word	0x0003024c

000d434c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d434c:	b508      	push	{r3, lr}
   d434e:	4b02      	ldr	r3, [pc, #8]	; (d4358 <HAL_USB_USART_Available_Data+0xc>)
   d4350:	681b      	ldr	r3, [r3, #0]
   d4352:	691b      	ldr	r3, [r3, #16]
   d4354:	9301      	str	r3, [sp, #4]
   d4356:	bd08      	pop	{r3, pc}
   d4358:	0003024c 	.word	0x0003024c

000d435c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d435c:	b508      	push	{r3, lr}
   d435e:	4b02      	ldr	r3, [pc, #8]	; (d4368 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4360:	681b      	ldr	r3, [r3, #0]
   d4362:	695b      	ldr	r3, [r3, #20]
   d4364:	9301      	str	r3, [sp, #4]
   d4366:	bd08      	pop	{r3, pc}
   d4368:	0003024c 	.word	0x0003024c

000d436c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d436c:	b508      	push	{r3, lr}
   d436e:	4b02      	ldr	r3, [pc, #8]	; (d4378 <HAL_USB_USART_Receive_Data+0xc>)
   d4370:	681b      	ldr	r3, [r3, #0]
   d4372:	699b      	ldr	r3, [r3, #24]
   d4374:	9301      	str	r3, [sp, #4]
   d4376:	bd08      	pop	{r3, pc}
   d4378:	0003024c 	.word	0x0003024c

000d437c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d437c:	b508      	push	{r3, lr}
   d437e:	4b02      	ldr	r3, [pc, #8]	; (d4388 <HAL_USB_USART_Send_Data+0xc>)
   d4380:	681b      	ldr	r3, [r3, #0]
   d4382:	69db      	ldr	r3, [r3, #28]
   d4384:	9301      	str	r3, [sp, #4]
   d4386:	bd08      	pop	{r3, pc}
   d4388:	0003024c 	.word	0x0003024c

000d438c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d438c:	b508      	push	{r3, lr}
   d438e:	4b02      	ldr	r3, [pc, #8]	; (d4398 <HAL_USB_USART_Flush_Data+0xc>)
   d4390:	681b      	ldr	r3, [r3, #0]
   d4392:	6a1b      	ldr	r3, [r3, #32]
   d4394:	9301      	str	r3, [sp, #4]
   d4396:	bd08      	pop	{r3, pc}
   d4398:	0003024c 	.word	0x0003024c

000d439c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d439c:	b508      	push	{r3, lr}
   d439e:	4b02      	ldr	r3, [pc, #8]	; (d43a8 <set_system_mode+0xc>)
   d43a0:	681b      	ldr	r3, [r3, #0]
   d43a2:	685b      	ldr	r3, [r3, #4]
   d43a4:	9301      	str	r3, [sp, #4]
   d43a6:	bd08      	pop	{r3, pc}
   d43a8:	00030220 	.word	0x00030220

000d43ac <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d43ac:	b508      	push	{r3, lr}
   d43ae:	4b02      	ldr	r3, [pc, #8]	; (d43b8 <system_delay_ms+0xc>)
   d43b0:	681b      	ldr	r3, [r3, #0]
   d43b2:	695b      	ldr	r3, [r3, #20]
   d43b4:	9301      	str	r3, [sp, #4]
   d43b6:	bd08      	pop	{r3, pc}
   d43b8:	00030220 	.word	0x00030220

000d43bc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d43bc:	b508      	push	{r3, lr}
   d43be:	4b03      	ldr	r3, [pc, #12]	; (d43cc <system_ctrl_set_app_request_handler+0x10>)
   d43c0:	681b      	ldr	r3, [r3, #0]
   d43c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d43c6:	9301      	str	r3, [sp, #4]
   d43c8:	bd08      	pop	{r3, pc}
   d43ca:	0000      	.short	0x0000
   d43cc:	00030220 	.word	0x00030220

000d43d0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d43d0:	b508      	push	{r3, lr}
   d43d2:	4b03      	ldr	r3, [pc, #12]	; (d43e0 <system_ctrl_set_result+0x10>)
   d43d4:	681b      	ldr	r3, [r3, #0]
   d43d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d43da:	9301      	str	r3, [sp, #4]
   d43dc:	bd08      	pop	{r3, pc}
   d43de:	0000      	.short	0x0000
   d43e0:	00030220 	.word	0x00030220

000d43e4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d43e4:	b508      	push	{r3, lr}
   d43e6:	4b02      	ldr	r3, [pc, #8]	; (d43f0 <network_connect+0xc>)
   d43e8:	681b      	ldr	r3, [r3, #0]
   d43ea:	685b      	ldr	r3, [r3, #4]
   d43ec:	9301      	str	r3, [sp, #4]
   d43ee:	bd08      	pop	{r3, pc}
   d43f0:	00030240 	.word	0x00030240

000d43f4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d43f4:	b508      	push	{r3, lr}
   d43f6:	4b02      	ldr	r3, [pc, #8]	; (d4400 <network_connecting+0xc>)
   d43f8:	681b      	ldr	r3, [r3, #0]
   d43fa:	689b      	ldr	r3, [r3, #8]
   d43fc:	9301      	str	r3, [sp, #4]
   d43fe:	bd08      	pop	{r3, pc}
   d4400:	00030240 	.word	0x00030240

000d4404 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4404:	b508      	push	{r3, lr}
   d4406:	4b02      	ldr	r3, [pc, #8]	; (d4410 <network_disconnect+0xc>)
   d4408:	681b      	ldr	r3, [r3, #0]
   d440a:	68db      	ldr	r3, [r3, #12]
   d440c:	9301      	str	r3, [sp, #4]
   d440e:	bd08      	pop	{r3, pc}
   d4410:	00030240 	.word	0x00030240

000d4414 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4414:	b508      	push	{r3, lr}
   d4416:	4b02      	ldr	r3, [pc, #8]	; (d4420 <network_ready+0xc>)
   d4418:	681b      	ldr	r3, [r3, #0]
   d441a:	691b      	ldr	r3, [r3, #16]
   d441c:	9301      	str	r3, [sp, #4]
   d441e:	bd08      	pop	{r3, pc}
   d4420:	00030240 	.word	0x00030240

000d4424 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4424:	b508      	push	{r3, lr}
   d4426:	4b02      	ldr	r3, [pc, #8]	; (d4430 <network_on+0xc>)
   d4428:	681b      	ldr	r3, [r3, #0]
   d442a:	695b      	ldr	r3, [r3, #20]
   d442c:	9301      	str	r3, [sp, #4]
   d442e:	bd08      	pop	{r3, pc}
   d4430:	00030240 	.word	0x00030240

000d4434 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4434:	b508      	push	{r3, lr}
   d4436:	4b02      	ldr	r3, [pc, #8]	; (d4440 <network_off+0xc>)
   d4438:	681b      	ldr	r3, [r3, #0]
   d443a:	699b      	ldr	r3, [r3, #24]
   d443c:	9301      	str	r3, [sp, #4]
   d443e:	bd08      	pop	{r3, pc}
   d4440:	00030240 	.word	0x00030240

000d4444 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4444:	b508      	push	{r3, lr}
   d4446:	4b02      	ldr	r3, [pc, #8]	; (d4450 <network_listen+0xc>)
   d4448:	681b      	ldr	r3, [r3, #0]
   d444a:	69db      	ldr	r3, [r3, #28]
   d444c:	9301      	str	r3, [sp, #4]
   d444e:	bd08      	pop	{r3, pc}
   d4450:	00030240 	.word	0x00030240

000d4454 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4454:	b508      	push	{r3, lr}
   d4456:	4b02      	ldr	r3, [pc, #8]	; (d4460 <network_listening+0xc>)
   d4458:	681b      	ldr	r3, [r3, #0]
   d445a:	6a1b      	ldr	r3, [r3, #32]
   d445c:	9301      	str	r3, [sp, #4]
   d445e:	bd08      	pop	{r3, pc}
   d4460:	00030240 	.word	0x00030240

000d4464 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4464:	b508      	push	{r3, lr}
   d4466:	4b02      	ldr	r3, [pc, #8]	; (d4470 <network_set_listen_timeout+0xc>)
   d4468:	681b      	ldr	r3, [r3, #0]
   d446a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d446c:	9301      	str	r3, [sp, #4]
   d446e:	bd08      	pop	{r3, pc}
   d4470:	00030240 	.word	0x00030240

000d4474 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4474:	b508      	push	{r3, lr}
   d4476:	4b02      	ldr	r3, [pc, #8]	; (d4480 <network_get_listen_timeout+0xc>)
   d4478:	681b      	ldr	r3, [r3, #0]
   d447a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d447c:	9301      	str	r3, [sp, #4]
   d447e:	bd08      	pop	{r3, pc}
   d4480:	00030240 	.word	0x00030240

000d4484 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4484:	b508      	push	{r3, lr}
   d4486:	4b02      	ldr	r3, [pc, #8]	; (d4490 <network_is_on+0xc>)
   d4488:	681b      	ldr	r3, [r3, #0]
   d448a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d448c:	9301      	str	r3, [sp, #4]
   d448e:	bd08      	pop	{r3, pc}
   d4490:	00030240 	.word	0x00030240

000d4494 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4494:	b508      	push	{r3, lr}
   d4496:	4b02      	ldr	r3, [pc, #8]	; (d44a0 <network_is_off+0xc>)
   d4498:	681b      	ldr	r3, [r3, #0]
   d449a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d449c:	9301      	str	r3, [sp, #4]
   d449e:	bd08      	pop	{r3, pc}
   d44a0:	00030240 	.word	0x00030240

000d44a4 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d44a4:	b508      	push	{r3, lr}
   d44a6:	4b02      	ldr	r3, [pc, #8]	; (d44b0 <spark_variable+0xc>)
   d44a8:	681b      	ldr	r3, [r3, #0]
   d44aa:	681b      	ldr	r3, [r3, #0]
   d44ac:	9301      	str	r3, [sp, #4]
   d44ae:	bd08      	pop	{r3, pc}
   d44b0:	00030244 	.word	0x00030244

000d44b4 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <spark_function+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	685b      	ldr	r3, [r3, #4]
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	00030244 	.word	0x00030244

000d44c4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	00030244 	.word	0x00030244

000d44d4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <malloc+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	681b      	ldr	r3, [r3, #0]
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	0003021c 	.word	0x0003021c

000d44e4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <free+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	685b      	ldr	r3, [r3, #4]
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	0003021c 	.word	0x0003021c

000d44f4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <realloc+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	689b      	ldr	r3, [r3, #8]
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	0003021c 	.word	0x0003021c

000d4504 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <abort+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	0003021c 	.word	0x0003021c

000d4514 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4514:	b508      	push	{r3, lr}
   d4516:	4b02      	ldr	r3, [pc, #8]	; (d4520 <newlib_impure_ptr_callback+0xc>)
   d4518:	681b      	ldr	r3, [r3, #0]
   d451a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d451c:	9301      	str	r3, [sp, #4]
   d451e:	bd08      	pop	{r3, pc}
   d4520:	0003021c 	.word	0x0003021c

000d4524 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4524:	2200      	movs	r2, #0
   d4526:	6840      	ldr	r0, [r0, #4]
   d4528:	4611      	mov	r1, r2
   d452a:	f7ff bf93 	b.w	d4454 <network_listening>

000d452e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d452e:	2200      	movs	r2, #0
   d4530:	6840      	ldr	r0, [r0, #4]
   d4532:	4611      	mov	r1, r2
   d4534:	f7ff bf9e 	b.w	d4474 <network_get_listen_timeout>

000d4538 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4538:	6840      	ldr	r0, [r0, #4]
   d453a:	2200      	movs	r2, #0
   d453c:	f7ff bf92 	b.w	d4464 <network_set_listen_timeout>

000d4540 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4540:	6840      	ldr	r0, [r0, #4]
   d4542:	2200      	movs	r2, #0
   d4544:	f081 0101 	eor.w	r1, r1, #1
   d4548:	f7ff bf7c 	b.w	d4444 <network_listen>

000d454c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d454c:	2300      	movs	r3, #0
   d454e:	6840      	ldr	r0, [r0, #4]
   d4550:	461a      	mov	r2, r3
   d4552:	4619      	mov	r1, r3
   d4554:	f7ff bf6e 	b.w	d4434 <network_off>

000d4558 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4558:	2300      	movs	r3, #0
   d455a:	6840      	ldr	r0, [r0, #4]
   d455c:	461a      	mov	r2, r3
   d455e:	4619      	mov	r1, r3
   d4560:	f7ff bf60 	b.w	d4424 <network_on>

000d4564 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4564:	2200      	movs	r2, #0
   d4566:	6840      	ldr	r0, [r0, #4]
   d4568:	4611      	mov	r1, r2
   d456a:	f7ff bf53 	b.w	d4414 <network_ready>

000d456e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d456e:	2200      	movs	r2, #0
   d4570:	6840      	ldr	r0, [r0, #4]
   d4572:	4611      	mov	r1, r2
   d4574:	f7ff bf3e 	b.w	d43f4 <network_connecting>

000d4578 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4578:	6840      	ldr	r0, [r0, #4]
   d457a:	2200      	movs	r2, #0
   d457c:	2102      	movs	r1, #2
   d457e:	f7ff bf41 	b.w	d4404 <network_disconnect>

000d4582 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4582:	2300      	movs	r3, #0
   d4584:	6840      	ldr	r0, [r0, #4]
   d4586:	461a      	mov	r2, r3
   d4588:	f7ff bf2c 	b.w	d43e4 <network_connect>

000d458c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d458c:	4b02      	ldr	r3, [pc, #8]	; (d4598 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d458e:	2203      	movs	r2, #3
   d4590:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4592:	4a02      	ldr	r2, [pc, #8]	; (d459c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4594:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4596:	4770      	bx	lr
   d4598:	2003e5a8 	.word	0x2003e5a8
   d459c:	000d5178 	.word	0x000d5178

000d45a0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d45a0:	b510      	push	{r4, lr}
   d45a2:	4604      	mov	r4, r0
   d45a4:	4608      	mov	r0, r1
{
    _spi = spi;
   d45a6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d45a8:	f7ff feb8 	bl	d431c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d45ac:	2300      	movs	r3, #0
   d45ae:	6063      	str	r3, [r4, #4]
}
   d45b0:	4620      	mov	r0, r4
   d45b2:	bd10      	pop	{r4, pc}

000d45b4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d45b4:	4b05      	ldr	r3, [pc, #20]	; (d45cc <_GLOBAL__sub_I_System+0x18>)
   d45b6:	2202      	movs	r2, #2
   d45b8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d45ba:	4b05      	ldr	r3, [pc, #20]	; (d45d0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d45bc:	4a05      	ldr	r2, [pc, #20]	; (d45d4 <_GLOBAL__sub_I_System+0x20>)
   d45be:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d45c0:	2000      	movs	r0, #0
   d45c2:	6018      	str	r0, [r3, #0]
   d45c4:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d45c6:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d45c8:	f7ff bee8 	b.w	d439c <set_system_mode>
   d45cc:	2003e5bc 	.word	0x2003e5bc
   d45d0:	2003e5b0 	.word	0x2003e5b0
   d45d4:	ffff0000 	.word	0xffff0000

000d45d8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d45d8:	b510      	push	{r4, lr}
   d45da:	4604      	mov	r4, r0
{
	free(buffer);
   d45dc:	6800      	ldr	r0, [r0, #0]
   d45de:	f7ff ff81 	bl	d44e4 <free>
}
   d45e2:	4620      	mov	r0, r4
   d45e4:	bd10      	pop	{r4, pc}

000d45e6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d45e6:	b510      	push	{r4, lr}
   d45e8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d45ea:	6800      	ldr	r0, [r0, #0]
   d45ec:	b108      	cbz	r0, d45f2 <_ZN6String10invalidateEv+0xc>
   d45ee:	f7ff ff79 	bl	d44e4 <free>
	buffer = NULL;
   d45f2:	2300      	movs	r3, #0
	capacity = len = 0;
   d45f4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d45f8:	6023      	str	r3, [r4, #0]
}
   d45fa:	bd10      	pop	{r4, pc}

000d45fc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d45fc:	b538      	push	{r3, r4, r5, lr}
   d45fe:	4604      	mov	r4, r0
   d4600:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4602:	6800      	ldr	r0, [r0, #0]
   d4604:	3101      	adds	r1, #1
   d4606:	f7ff ff75 	bl	d44f4 <realloc>
	if (newbuffer) {
   d460a:	b110      	cbz	r0, d4612 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d460c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d4610:	2001      	movs	r0, #1
	}
	return 0;
}
   d4612:	bd38      	pop	{r3, r4, r5, pc}

000d4614 <_ZN6String7reserveEj>:
{
   d4614:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4616:	6803      	ldr	r3, [r0, #0]
{
   d4618:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d461a:	b123      	cbz	r3, d4626 <_ZN6String7reserveEj+0x12>
   d461c:	6843      	ldr	r3, [r0, #4]
   d461e:	428b      	cmp	r3, r1
   d4620:	d301      	bcc.n	d4626 <_ZN6String7reserveEj+0x12>
   d4622:	2001      	movs	r0, #1
}
   d4624:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d4626:	4620      	mov	r0, r4
   d4628:	f7ff ffe8 	bl	d45fc <_ZN6String12changeBufferEj>
   d462c:	2800      	cmp	r0, #0
   d462e:	d0f9      	beq.n	d4624 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d4630:	68a3      	ldr	r3, [r4, #8]
   d4632:	2b00      	cmp	r3, #0
   d4634:	d1f5      	bne.n	d4622 <_ZN6String7reserveEj+0xe>
   d4636:	6822      	ldr	r2, [r4, #0]
   d4638:	7013      	strb	r3, [r2, #0]
   d463a:	e7f2      	b.n	d4622 <_ZN6String7reserveEj+0xe>

000d463c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d463c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d463e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d4640:	4611      	mov	r1, r2
   d4642:	9201      	str	r2, [sp, #4]
{
   d4644:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d4646:	f7ff ffe5 	bl	d4614 <_ZN6String7reserveEj>
   d464a:	9a01      	ldr	r2, [sp, #4]
   d464c:	b928      	cbnz	r0, d465a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d464e:	4620      	mov	r0, r4
   d4650:	f7ff ffc9 	bl	d45e6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d4654:	4620      	mov	r0, r4
   d4656:	b003      	add	sp, #12
   d4658:	bd30      	pop	{r4, r5, pc}
	len = length;
   d465a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d465c:	4629      	mov	r1, r5
   d465e:	6820      	ldr	r0, [r4, #0]
   d4660:	f000 fcc1 	bl	d4fe6 <memcpy>
	buffer[len] = 0;
   d4664:	6822      	ldr	r2, [r4, #0]
   d4666:	68a3      	ldr	r3, [r4, #8]
   d4668:	2100      	movs	r1, #0
   d466a:	54d1      	strb	r1, [r2, r3]
	return *this;
   d466c:	e7f2      	b.n	d4654 <_ZN6String4copyEPKcj+0x18>

000d466e <_ZN6StringC1EPKc>:
	buffer = NULL;
   d466e:	2300      	movs	r3, #0
String::String(const char *cstr)
   d4670:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d4672:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d4676:	4604      	mov	r4, r0
	len = 0;
   d4678:	6083      	str	r3, [r0, #8]
	flags = 0;
   d467a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d467c:	b141      	cbz	r1, d4690 <_ZN6StringC1EPKc+0x22>
   d467e:	4608      	mov	r0, r1
   d4680:	9101      	str	r1, [sp, #4]
   d4682:	f000 fcf3 	bl	d506c <strlen>
   d4686:	9901      	ldr	r1, [sp, #4]
   d4688:	4602      	mov	r2, r0
   d468a:	4620      	mov	r0, r4
   d468c:	f7ff ffd6 	bl	d463c <_ZN6String4copyEPKcj>
}
   d4690:	4620      	mov	r0, r4
   d4692:	b002      	add	sp, #8
   d4694:	bd10      	pop	{r4, pc}

000d4696 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d4696:	b538      	push	{r3, r4, r5, lr}
   d4698:	4605      	mov	r5, r0
	if (buffer) {
   d469a:	6800      	ldr	r0, [r0, #0]
{
   d469c:	460c      	mov	r4, r1
	if (buffer) {
   d469e:	b168      	cbz	r0, d46bc <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d46a0:	686a      	ldr	r2, [r5, #4]
   d46a2:	688b      	ldr	r3, [r1, #8]
   d46a4:	429a      	cmp	r2, r3
   d46a6:	d307      	bcc.n	d46b8 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d46a8:	6809      	ldr	r1, [r1, #0]
   d46aa:	f000 fcd7 	bl	d505c <strcpy>
			len = rhs.len;
   d46ae:	68a3      	ldr	r3, [r4, #8]
   d46b0:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d46b2:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d46b4:	60a3      	str	r3, [r4, #8]
}
   d46b6:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d46b8:	f7ff ff14 	bl	d44e4 <free>
	buffer = rhs.buffer;
   d46bc:	6823      	ldr	r3, [r4, #0]
   d46be:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d46c0:	6863      	ldr	r3, [r4, #4]
   d46c2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d46c4:	68a3      	ldr	r3, [r4, #8]
   d46c6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d46c8:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d46ca:	e9c4 3300 	strd	r3, r3, [r4]
   d46ce:	e7f1      	b.n	d46b4 <_ZN6String4moveERS_+0x1e>

000d46d0 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   d46d0:	b510      	push	{r4, lr}
	buffer = NULL;
   d46d2:	2300      	movs	r3, #0
	capacity = 0;
   d46d4:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   d46d8:	4604      	mov	r4, r0
	len = 0;
   d46da:	6083      	str	r3, [r0, #8]
	flags = 0;
   d46dc:	7303      	strb	r3, [r0, #12]
	move(rval);
   d46de:	f7ff ffda 	bl	d4696 <_ZN6String4moveERS_>
}
   d46e2:	4620      	mov	r0, r4
   d46e4:	bd10      	pop	{r4, pc}
	...

000d46e8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d46e8:	4802      	ldr	r0, [pc, #8]	; (d46f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d46ea:	2300      	movs	r3, #0
   d46ec:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d46ee:	f7ff bd8d 	b.w	d420c <os_mutex_recursive_create>
   d46f2:	bf00      	nop
   d46f4:	2003e5c0 	.word	0x2003e5c0

000d46f8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d46f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d46fa:	4606      	mov	r6, r0
   d46fc:	460d      	mov	r5, r1
  size_t n = 0;
   d46fe:	188f      	adds	r7, r1, r2
   d4700:	2400      	movs	r4, #0
  while (size--) {
   d4702:	42bd      	cmp	r5, r7
   d4704:	d00c      	beq.n	d4720 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4706:	6833      	ldr	r3, [r6, #0]
   d4708:	f815 1b01 	ldrb.w	r1, [r5], #1
   d470c:	689b      	ldr	r3, [r3, #8]
   d470e:	4630      	mov	r0, r6
   d4710:	4798      	blx	r3
     if (chunk>=0)
   d4712:	1e03      	subs	r3, r0, #0
   d4714:	db01      	blt.n	d471a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4716:	441c      	add	r4, r3
  while (size--) {
   d4718:	e7f3      	b.n	d4702 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d471a:	2c00      	cmp	r4, #0
   d471c:	bf08      	it	eq
   d471e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4720:	4620      	mov	r0, r4
   d4722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4724 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4724:	b513      	push	{r0, r1, r4, lr}
   d4726:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4728:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d472a:	b159      	cbz	r1, d4744 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d472c:	9101      	str	r1, [sp, #4]
   d472e:	f000 fc9d 	bl	d506c <strlen>
   d4732:	6823      	ldr	r3, [r4, #0]
   d4734:	9901      	ldr	r1, [sp, #4]
   d4736:	68db      	ldr	r3, [r3, #12]
   d4738:	4602      	mov	r2, r0
   d473a:	4620      	mov	r0, r4
    }
   d473c:	b002      	add	sp, #8
   d473e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4742:	4718      	bx	r3
    }
   d4744:	b002      	add	sp, #8
   d4746:	bd10      	pop	{r4, pc}

000d4748 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d4748:	b508      	push	{r3, lr}
  return write(str);
   d474a:	f7ff ffeb 	bl	d4724 <_ZN5Print5writeEPKc>
}
   d474e:	bd08      	pop	{r3, pc}

000d4750 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d4750:	6803      	ldr	r3, [r0, #0]
   d4752:	689b      	ldr	r3, [r3, #8]
   d4754:	4718      	bx	r3

000d4756 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4756:	b530      	push	{r4, r5, lr}
   d4758:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d475a:	2300      	movs	r3, #0
   d475c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4760:	2a01      	cmp	r2, #1
   d4762:	bf98      	it	ls
   d4764:	220a      	movls	r2, #10
   d4766:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4768:	460d      	mov	r5, r1
   d476a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d476e:	fb01 5312 	mls	r3, r1, r2, r5
   d4772:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4776:	2b09      	cmp	r3, #9
   d4778:	bf94      	ite	ls
   d477a:	3330      	addls	r3, #48	; 0x30
   d477c:	3337      	addhi	r3, #55	; 0x37
   d477e:	b2db      	uxtb	r3, r3
  } while(n);
   d4780:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4782:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4786:	d9ef      	bls.n	d4768 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4788:	4621      	mov	r1, r4
   d478a:	f7ff ffcb 	bl	d4724 <_ZN5Print5writeEPKc>
}
   d478e:	b00b      	add	sp, #44	; 0x2c
   d4790:	bd30      	pop	{r4, r5, pc}
	...

000d4794 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4794:	4b01      	ldr	r3, [pc, #4]	; (d479c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4796:	4a02      	ldr	r2, [pc, #8]	; (d47a0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4798:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d479a:	4770      	bx	lr
   d479c:	2003e5c4 	.word	0x2003e5c4
   d47a0:	000d51ac 	.word	0x000d51ac

000d47a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d47a4:	4b02      	ldr	r3, [pc, #8]	; (d47b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d47a6:	681a      	ldr	r2, [r3, #0]
   d47a8:	4b02      	ldr	r3, [pc, #8]	; (d47b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d47aa:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d47ac:	4770      	bx	lr
   d47ae:	bf00      	nop
   d47b0:	2003e538 	.word	0x2003e538
   d47b4:	2003e5c8 	.word	0x2003e5c8

000d47b8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d47b8:	2100      	movs	r1, #0
   d47ba:	f7ff bdf7 	b.w	d43ac <system_delay_ms>
	...

000d47c0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d47c0:	4b01      	ldr	r3, [pc, #4]	; (d47c8 <_GLOBAL__sub_I_RGB+0x8>)
   d47c2:	2200      	movs	r2, #0
   d47c4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d47c6:	4770      	bx	lr
   d47c8:	2003e5cc 	.word	0x2003e5cc

000d47cc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d47cc:	4b01      	ldr	r3, [pc, #4]	; (d47d4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d47ce:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d47d0:	4770      	bx	lr
   d47d2:	bf00      	nop
   d47d4:	2003e53c 	.word	0x2003e53c

000d47d8 <serialEventRun>:
{
   d47d8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d47da:	4b0b      	ldr	r3, [pc, #44]	; (d4808 <serialEventRun+0x30>)
   d47dc:	b143      	cbz	r3, d47f0 <serialEventRun+0x18>
   d47de:	f000 f983 	bl	d4ae8 <_Z16_fetch_usbserialv>
   d47e2:	6803      	ldr	r3, [r0, #0]
   d47e4:	691b      	ldr	r3, [r3, #16]
   d47e6:	4798      	blx	r3
   d47e8:	2800      	cmp	r0, #0
   d47ea:	dd01      	ble.n	d47f0 <serialEventRun+0x18>
        serialEvent();
   d47ec:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d47f0:	4b06      	ldr	r3, [pc, #24]	; (d480c <serialEventRun+0x34>)
   d47f2:	b143      	cbz	r3, d4806 <serialEventRun+0x2e>
   d47f4:	f000 f9f2 	bl	d4bdc <_Z22__fetch_global_Serial1v>
   d47f8:	6803      	ldr	r3, [r0, #0]
   d47fa:	691b      	ldr	r3, [r3, #16]
   d47fc:	4798      	blx	r3
   d47fe:	2800      	cmp	r0, #0
   d4800:	dd01      	ble.n	d4806 <serialEventRun+0x2e>
        serialEvent1();
   d4802:	f3af 8000 	nop.w
}
   d4806:	bd08      	pop	{r3, pc}
	...

000d4810 <_post_loop>:
{
   d4810:	b508      	push	{r3, lr}
	serialEventRun();
   d4812:	f7ff ffe1 	bl	d47d8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4816:	f7ff fcf1 	bl	d41fc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d481a:	4b01      	ldr	r3, [pc, #4]	; (d4820 <_post_loop+0x10>)
   d481c:	6018      	str	r0, [r3, #0]
}
   d481e:	bd08      	pop	{r3, pc}
   d4820:	2003e738 	.word	0x2003e738

000d4824 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4824:	4805      	ldr	r0, [pc, #20]	; (d483c <_Z33system_initialize_user_backup_ramv+0x18>)
   d4826:	4a06      	ldr	r2, [pc, #24]	; (d4840 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d4828:	4906      	ldr	r1, [pc, #24]	; (d4844 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d482a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d482c:	1a12      	subs	r2, r2, r0
   d482e:	f000 fbda 	bl	d4fe6 <memcpy>
    __backup_sram_signature = signature;
   d4832:	4b05      	ldr	r3, [pc, #20]	; (d4848 <_Z33system_initialize_user_backup_ramv+0x24>)
   d4834:	4a05      	ldr	r2, [pc, #20]	; (d484c <_Z33system_initialize_user_backup_ramv+0x28>)
   d4836:	601a      	str	r2, [r3, #0]
}
   d4838:	bd08      	pop	{r3, pc}
   d483a:	bf00      	nop
   d483c:	2003f400 	.word	0x2003f400
   d4840:	2003f404 	.word	0x2003f404
   d4844:	000d5310 	.word	0x000d5310
   d4848:	2003f400 	.word	0x2003f400
   d484c:	9a271c1e 	.word	0x9a271c1e

000d4850 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4850:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4852:	2300      	movs	r3, #0
   d4854:	9300      	str	r3, [sp, #0]
   d4856:	461a      	mov	r2, r3
   d4858:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d485c:	f7ff fdb8 	bl	d43d0 <system_ctrl_set_result>
}
   d4860:	b003      	add	sp, #12
   d4862:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4868 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d4868:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d486a:	8843      	ldrh	r3, [r0, #2]
   d486c:	2b0a      	cmp	r3, #10
   d486e:	d008      	beq.n	d4882 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4870:	2b50      	cmp	r3, #80	; 0x50
   d4872:	d10b      	bne.n	d488c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d4874:	4b09      	ldr	r3, [pc, #36]	; (d489c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4876:	681b      	ldr	r3, [r3, #0]
   d4878:	b14b      	cbz	r3, d488e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d487a:	b003      	add	sp, #12
   d487c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d4880:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d4882:	f7ff ffe5 	bl	d4850 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d4886:	b003      	add	sp, #12
   d4888:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d488c:	2300      	movs	r3, #0
   d488e:	9300      	str	r3, [sp, #0]
   d4890:	461a      	mov	r2, r3
   d4892:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4896:	f7ff fd9b 	bl	d43d0 <system_ctrl_set_result>
}
   d489a:	e7f4      	b.n	d4886 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d489c:	2003e5e0 	.word	0x2003e5e0

000d48a0 <module_user_init_hook>:
{
   d48a0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d48a2:	4812      	ldr	r0, [pc, #72]	; (d48ec <module_user_init_hook+0x4c>)
   d48a4:	2100      	movs	r1, #0
   d48a6:	f7ff fe35 	bl	d4514 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d48aa:	4b11      	ldr	r3, [pc, #68]	; (d48f0 <module_user_init_hook+0x50>)
   d48ac:	681a      	ldr	r2, [r3, #0]
   d48ae:	4b11      	ldr	r3, [pc, #68]	; (d48f4 <module_user_init_hook+0x54>)
   d48b0:	429a      	cmp	r2, r3
   d48b2:	4b11      	ldr	r3, [pc, #68]	; (d48f8 <module_user_init_hook+0x58>)
   d48b4:	bf0c      	ite	eq
   d48b6:	2201      	moveq	r2, #1
   d48b8:	2200      	movne	r2, #0
   d48ba:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d48bc:	d001      	beq.n	d48c2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d48be:	f7ff ffb1 	bl	d4824 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d48c2:	f7ff fc93 	bl	d41ec <HAL_RNG_GetRandomNumber>
   d48c6:	4604      	mov	r4, r0
    srand(seed);
   d48c8:	f000 fba4 	bl	d5014 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d48cc:	4b0b      	ldr	r3, [pc, #44]	; (d48fc <module_user_init_hook+0x5c>)
   d48ce:	b113      	cbz	r3, d48d6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d48d0:	4620      	mov	r0, r4
   d48d2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d48d6:	2100      	movs	r1, #0
   d48d8:	4808      	ldr	r0, [pc, #32]	; (d48fc <module_user_init_hook+0x5c>)
   d48da:	f7ff fdf3 	bl	d44c4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d48de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d48e2:	4807      	ldr	r0, [pc, #28]	; (d4900 <module_user_init_hook+0x60>)
   d48e4:	2100      	movs	r1, #0
   d48e6:	f7ff bd69 	b.w	d43bc <system_ctrl_set_app_request_handler>
   d48ea:	bf00      	nop
   d48ec:	000d47cd 	.word	0x000d47cd
   d48f0:	2003f400 	.word	0x2003f400
   d48f4:	9a271c1e 	.word	0x9a271c1e
   d48f8:	2003e5dc 	.word	0x2003e5dc
   d48fc:	00000000 	.word	0x00000000
   d4900:	000d4869 	.word	0x000d4869

000d4904 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_>:
    String p(param);
    return (*fn)(p);
}

int CloudClass::call_std_user_function(void* data, const char* param, void* reserved)
{
   d4904:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4906:	4604      	mov	r4, r0
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
   d4908:	4668      	mov	r0, sp
   d490a:	f7ff feb0 	bl	d466e <_ZN6StringC1EPKc>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d490e:	68a3      	ldr	r3, [r4, #8]
   d4910:	b90b      	cbnz	r3, d4916 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_+0x12>
	__throw_bad_function_call();
   d4912:	f000 fb5f 	bl	d4fd4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4916:	68e3      	ldr	r3, [r4, #12]
   d4918:	4669      	mov	r1, sp
   d491a:	4620      	mov	r0, r4
   d491c:	4798      	blx	r3
   d491e:	4604      	mov	r4, r0
   d4920:	4668      	mov	r0, sp
   d4922:	f7ff fe59 	bl	d45d8 <_ZN6StringD1Ev>
}
   d4926:	4620      	mov	r0, r4
   d4928:	b004      	add	sp, #16
   d492a:	bd10      	pop	{r4, pc}

000d492c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d492c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d492e:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d4930:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d4934:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d4936:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4938:	461a      	mov	r2, r3
   d493a:	4669      	mov	r1, sp
   d493c:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d493e:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d4942:	f8ad 4000 	strh.w	r4, [sp]
   d4946:	f7ff fdb5 	bl	d44b4 <spark_function>
}
   d494a:	b004      	add	sp, #16
   d494c:	bd10      	pop	{r4, pc}

000d494e <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d494e:	4770      	bx	lr

000d4950 <_ZN9IPAddressD0Ev>:
   d4950:	b510      	push	{r4, lr}
   d4952:	2118      	movs	r1, #24
   d4954:	4604      	mov	r4, r0
   d4956:	f000 fb39 	bl	d4fcc <_ZdlPvj>
   d495a:	4620      	mov	r0, r4
   d495c:	bd10      	pop	{r4, pc}

000d495e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d495e:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4960:	7d03      	ldrb	r3, [r0, #20]
   d4962:	2b06      	cmp	r3, #6
{
   d4964:	b08d      	sub	sp, #52	; 0x34
   d4966:	460e      	mov	r6, r1
   d4968:	f100 0704 	add.w	r7, r0, #4
   d496c:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d4970:	d012      	beq.n	d4998 <_ZNK9IPAddress7printToER5Print+0x3a>
   d4972:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4976:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d497a:	220a      	movs	r2, #10
   d497c:	4630      	mov	r0, r6
   d497e:	f7ff feea 	bl	d4756 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4982:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4984:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d4986:	d019      	beq.n	d49bc <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d4988:	2c00      	cmp	r4, #0
   d498a:	d0f4      	beq.n	d4976 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d498c:	212e      	movs	r1, #46	; 0x2e
   d498e:	4630      	mov	r0, r6
   d4990:	f7ff fede 	bl	d4750 <_ZN5Print5printEc>
   d4994:	4404      	add	r4, r0
   d4996:	e7ee      	b.n	d4976 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4998:	232f      	movs	r3, #47	; 0x2f
   d499a:	466a      	mov	r2, sp
   d499c:	4639      	mov	r1, r7
   d499e:	200a      	movs	r0, #10
		buf[0] = 0;
   d49a0:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d49a4:	f7ff fc3a 	bl	d421c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d49a8:	4668      	mov	r0, sp
   d49aa:	f000 fb5f 	bl	d506c <strlen>
   d49ae:	6833      	ldr	r3, [r6, #0]
   d49b0:	4602      	mov	r2, r0
   d49b2:	68db      	ldr	r3, [r3, #12]
   d49b4:	4669      	mov	r1, sp
   d49b6:	4630      	mov	r0, r6
   d49b8:	4798      	blx	r3
   d49ba:	4604      	mov	r4, r0
    }
    return n;
}
   d49bc:	4620      	mov	r0, r4
   d49be:	b00d      	add	sp, #52	; 0x34
   d49c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d49c4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d49c4:	b510      	push	{r4, lr}
   d49c6:	4b05      	ldr	r3, [pc, #20]	; (d49dc <_ZN9IPAddressC1Ev+0x18>)
   d49c8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d49ca:	2211      	movs	r2, #17
   d49cc:	f840 3b04 	str.w	r3, [r0], #4
   d49d0:	2100      	movs	r1, #0
   d49d2:	f000 fb16 	bl	d5002 <memset>
}
   d49d6:	4620      	mov	r0, r4
   d49d8:	bd10      	pop	{r4, pc}
   d49da:	bf00      	nop
   d49dc:	000d51d4 	.word	0x000d51d4

000d49e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d49e0:	4603      	mov	r3, r0
   d49e2:	4a07      	ldr	r2, [pc, #28]	; (d4a00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d49e4:	b510      	push	{r4, lr}
   d49e6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d49ea:	f101 0210 	add.w	r2, r1, #16
   d49ee:	f851 4b04 	ldr.w	r4, [r1], #4
   d49f2:	f843 4b04 	str.w	r4, [r3], #4
   d49f6:	4291      	cmp	r1, r2
   d49f8:	d1f9      	bne.n	d49ee <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d49fa:	780a      	ldrb	r2, [r1, #0]
   d49fc:	701a      	strb	r2, [r3, #0]
}
   d49fe:	bd10      	pop	{r4, pc}
   d4a00:	000d51d4 	.word	0x000d51d4

000d4a04 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d4a04:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4a06:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4a0a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4a0e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4a12:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d4a16:	2304      	movs	r3, #4
   d4a18:	6041      	str	r1, [r0, #4]
   d4a1a:	7503      	strb	r3, [r0, #20]
}
   d4a1c:	bd10      	pop	{r4, pc}

000d4a1e <_ZN9IPAddressaSEPKh>:
{
   d4a1e:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4a20:	78cb      	ldrb	r3, [r1, #3]
   d4a22:	9300      	str	r3, [sp, #0]
   d4a24:	788b      	ldrb	r3, [r1, #2]
   d4a26:	784a      	ldrb	r2, [r1, #1]
   d4a28:	7809      	ldrb	r1, [r1, #0]
   d4a2a:	f7ff ffeb 	bl	d4a04 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d4a2e:	b002      	add	sp, #8
   d4a30:	bd10      	pop	{r4, pc}

000d4a32 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4a32:	7441      	strb	r1, [r0, #17]
}
   d4a34:	4770      	bx	lr

000d4a36 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4a36:	4770      	bx	lr

000d4a38 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4a38:	4770      	bx	lr

000d4a3a <_ZN9USBSerial4readEv>:
{
   d4a3a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4a3c:	2100      	movs	r1, #0
   d4a3e:	7c00      	ldrb	r0, [r0, #16]
   d4a40:	f7ff fc94 	bl	d436c <HAL_USB_USART_Receive_Data>
}
   d4a44:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4a48:	bd08      	pop	{r3, pc}

000d4a4a <_ZN9USBSerial4peekEv>:
{
   d4a4a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4a4c:	2101      	movs	r1, #1
   d4a4e:	7c00      	ldrb	r0, [r0, #16]
   d4a50:	f7ff fc8c 	bl	d436c <HAL_USB_USART_Receive_Data>
}
   d4a54:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4a58:	bd08      	pop	{r3, pc}

000d4a5a <_ZN9USBSerial17availableForWriteEv>:
{
   d4a5a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4a5c:	7c00      	ldrb	r0, [r0, #16]
   d4a5e:	f7ff fc7d 	bl	d435c <HAL_USB_USART_Available_Data_For_Write>
}
   d4a62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4a66:	bd08      	pop	{r3, pc}

000d4a68 <_ZN9USBSerial9availableEv>:
{
   d4a68:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4a6a:	7c00      	ldrb	r0, [r0, #16]
   d4a6c:	f7ff fc6e 	bl	d434c <HAL_USB_USART_Available_Data>
}
   d4a70:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4a74:	bd08      	pop	{r3, pc}

000d4a76 <_ZN9USBSerial5writeEh>:
{
   d4a76:	b513      	push	{r0, r1, r4, lr}
   d4a78:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4a7a:	7c00      	ldrb	r0, [r0, #16]
{
   d4a7c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4a7e:	f7ff fc6d 	bl	d435c <HAL_USB_USART_Available_Data_For_Write>
   d4a82:	2800      	cmp	r0, #0
   d4a84:	9901      	ldr	r1, [sp, #4]
   d4a86:	dc01      	bgt.n	d4a8c <_ZN9USBSerial5writeEh+0x16>
   d4a88:	7c60      	ldrb	r0, [r4, #17]
   d4a8a:	b120      	cbz	r0, d4a96 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4a8c:	7c20      	ldrb	r0, [r4, #16]
   d4a8e:	f7ff fc75 	bl	d437c <HAL_USB_USART_Send_Data>
   d4a92:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d4a96:	b002      	add	sp, #8
   d4a98:	bd10      	pop	{r4, pc}

000d4a9a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d4a9a:	7c00      	ldrb	r0, [r0, #16]
   d4a9c:	f7ff bc76 	b.w	d438c <HAL_USB_USART_Flush_Data>

000d4aa0 <_ZN9USBSerialD0Ev>:
   d4aa0:	b510      	push	{r4, lr}
   d4aa2:	2114      	movs	r1, #20
   d4aa4:	4604      	mov	r4, r0
   d4aa6:	f000 fa91 	bl	d4fcc <_ZdlPvj>
   d4aaa:	4620      	mov	r0, r4
   d4aac:	bd10      	pop	{r4, pc}
	...

000d4ab0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4ab0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4ab6:	4604      	mov	r4, r0
   d4ab8:	4608      	mov	r0, r1
   d4aba:	2100      	movs	r1, #0
   d4abc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d4ac0:	4b04      	ldr	r3, [pc, #16]	; (d4ad4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4ac2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d4ac4:	2301      	movs	r3, #1
  _serial = serial;
   d4ac6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d4ac8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d4aca:	4611      	mov	r1, r2
   d4acc:	f7ff fc36 	bl	d433c <HAL_USB_USART_Init>
}
   d4ad0:	4620      	mov	r0, r4
   d4ad2:	bd10      	pop	{r4, pc}
   d4ad4:	000d51e8 	.word	0x000d51e8

000d4ad8 <_Z19acquireSerialBufferv>:
{
   d4ad8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4ada:	2214      	movs	r2, #20
{
   d4adc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4ade:	2100      	movs	r1, #0
   d4ae0:	f000 fa8f 	bl	d5002 <memset>
}
   d4ae4:	4620      	mov	r0, r4
   d4ae6:	bd10      	pop	{r4, pc}

000d4ae8 <_Z16_fetch_usbserialv>:
{
   d4ae8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4aea:	4c0f      	ldr	r4, [pc, #60]	; (d4b28 <_Z16_fetch_usbserialv+0x40>)
{
   d4aec:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4aee:	a803      	add	r0, sp, #12
   d4af0:	f7ff fff2 	bl	d4ad8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4af4:	7821      	ldrb	r1, [r4, #0]
   d4af6:	f3bf 8f5b 	dmb	ish
   d4afa:	f011 0101 	ands.w	r1, r1, #1
   d4afe:	d10f      	bne.n	d4b20 <_Z16_fetch_usbserialv+0x38>
   d4b00:	4620      	mov	r0, r4
   d4b02:	9101      	str	r1, [sp, #4]
   d4b04:	f7ff facb 	bl	d409e <__cxa_guard_acquire>
   d4b08:	9901      	ldr	r1, [sp, #4]
   d4b0a:	b148      	cbz	r0, d4b20 <_Z16_fetch_usbserialv+0x38>
   d4b0c:	aa03      	add	r2, sp, #12
   d4b0e:	4807      	ldr	r0, [pc, #28]	; (d4b2c <_Z16_fetch_usbserialv+0x44>)
   d4b10:	f7ff ffce 	bl	d4ab0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4b14:	4620      	mov	r0, r4
   d4b16:	f7ff fac7 	bl	d40a8 <__cxa_guard_release>
   d4b1a:	4805      	ldr	r0, [pc, #20]	; (d4b30 <_Z16_fetch_usbserialv+0x48>)
   d4b1c:	f000 fa5d 	bl	d4fda <atexit>
	return _usbserial;
}
   d4b20:	4802      	ldr	r0, [pc, #8]	; (d4b2c <_Z16_fetch_usbserialv+0x44>)
   d4b22:	b008      	add	sp, #32
   d4b24:	bd10      	pop	{r4, pc}
   d4b26:	bf00      	nop
   d4b28:	2003e5e4 	.word	0x2003e5e4
   d4b2c:	2003e5e8 	.word	0x2003e5e8
   d4b30:	000d4a37 	.word	0x000d4a37

000d4b34 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d4b34:	4770      	bx	lr

000d4b36 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4b36:	7441      	strb	r1, [r0, #17]
}
   d4b38:	4770      	bx	lr

000d4b3a <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4b3a:	4770      	bx	lr

000d4b3c <_ZN11USARTSerial17availableForWriteEv>:
{
   d4b3c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d4b3e:	7c00      	ldrb	r0, [r0, #16]
   d4b40:	f7ff fbac 	bl	d429c <hal_usart_available_data_for_write>
}
   d4b44:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4b48:	bd08      	pop	{r3, pc}

000d4b4a <_ZN11USARTSerial9availableEv>:
{
   d4b4a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d4b4c:	7c00      	ldrb	r0, [r0, #16]
   d4b4e:	f7ff fb7d 	bl	d424c <hal_usart_available>
}
   d4b52:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4b56:	bd08      	pop	{r3, pc}

000d4b58 <_ZN11USARTSerial4peekEv>:
{
   d4b58:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d4b5a:	7c00      	ldrb	r0, [r0, #16]
   d4b5c:	f7ff fb86 	bl	d426c <hal_usart_peek>
}
   d4b60:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4b64:	bd08      	pop	{r3, pc}

000d4b66 <_ZN11USARTSerial4readEv>:
{
   d4b66:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d4b68:	7c00      	ldrb	r0, [r0, #16]
   d4b6a:	f7ff fb77 	bl	d425c <hal_usart_read>
}
   d4b6e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4b72:	bd08      	pop	{r3, pc}

000d4b74 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d4b74:	7c00      	ldrb	r0, [r0, #16]
   d4b76:	f7ff bb81 	b.w	d427c <hal_usart_flush>

000d4b7a <_ZN11USARTSerial5writeEh>:
{
   d4b7a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4b7c:	7c45      	ldrb	r5, [r0, #17]
{
   d4b7e:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4b80:	b12d      	cbz	r5, d4b8e <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d4b82:	7c20      	ldrb	r0, [r4, #16]
}
   d4b84:	b003      	add	sp, #12
   d4b86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d4b8a:	f7ff bb57 	b.w	d423c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4b8e:	7c00      	ldrb	r0, [r0, #16]
   d4b90:	9101      	str	r1, [sp, #4]
   d4b92:	f7ff fb83 	bl	d429c <hal_usart_available_data_for_write>
   d4b96:	2800      	cmp	r0, #0
   d4b98:	9901      	ldr	r1, [sp, #4]
   d4b9a:	dcf2      	bgt.n	d4b82 <_ZN11USARTSerial5writeEh+0x8>
}
   d4b9c:	4628      	mov	r0, r5
   d4b9e:	b003      	add	sp, #12
   d4ba0:	bd30      	pop	{r4, r5, pc}

000d4ba2 <_ZN11USARTSerialD0Ev>:
   d4ba2:	b510      	push	{r4, lr}
   d4ba4:	2114      	movs	r1, #20
   d4ba6:	4604      	mov	r4, r0
   d4ba8:	f000 fa10 	bl	d4fcc <_ZdlPvj>
   d4bac:	4620      	mov	r0, r4
   d4bae:	bd10      	pop	{r4, pc}

000d4bb0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d4bb0:	b510      	push	{r4, lr}
   d4bb2:	f04f 0c00 	mov.w	ip, #0
   d4bb6:	4604      	mov	r4, r0
   d4bb8:	4608      	mov	r0, r1
   d4bba:	4611      	mov	r1, r2
   d4bbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4bc0:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d4bc4:	4a04      	ldr	r2, [pc, #16]	; (d4bd8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d4bc6:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d4bc8:	2201      	movs	r2, #1
  _serial = serial;
   d4bca:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d4bcc:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d4bce:	461a      	mov	r2, r3
   d4bd0:	f7ff fb2c 	bl	d422c <hal_usart_init>
}
   d4bd4:	4620      	mov	r0, r4
   d4bd6:	bd10      	pop	{r4, pc}
   d4bd8:	000d5218 	.word	0x000d5218

000d4bdc <_Z22__fetch_global_Serial1v>:
{
   d4bdc:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4bde:	4c0d      	ldr	r4, [pc, #52]	; (d4c14 <_Z22__fetch_global_Serial1v+0x38>)
   d4be0:	7821      	ldrb	r1, [r4, #0]
   d4be2:	f3bf 8f5b 	dmb	ish
   d4be6:	f011 0101 	ands.w	r1, r1, #1
   d4bea:	d110      	bne.n	d4c0e <_Z22__fetch_global_Serial1v+0x32>
   d4bec:	4620      	mov	r0, r4
   d4bee:	9101      	str	r1, [sp, #4]
   d4bf0:	f7ff fa55 	bl	d409e <__cxa_guard_acquire>
   d4bf4:	9901      	ldr	r1, [sp, #4]
   d4bf6:	b150      	cbz	r0, d4c0e <_Z22__fetch_global_Serial1v+0x32>
   d4bf8:	4b07      	ldr	r3, [pc, #28]	; (d4c18 <_Z22__fetch_global_Serial1v+0x3c>)
   d4bfa:	4a08      	ldr	r2, [pc, #32]	; (d4c1c <_Z22__fetch_global_Serial1v+0x40>)
   d4bfc:	4808      	ldr	r0, [pc, #32]	; (d4c20 <_Z22__fetch_global_Serial1v+0x44>)
   d4bfe:	f7ff ffd7 	bl	d4bb0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d4c02:	4620      	mov	r0, r4
   d4c04:	f7ff fa50 	bl	d40a8 <__cxa_guard_release>
   d4c08:	4806      	ldr	r0, [pc, #24]	; (d4c24 <_Z22__fetch_global_Serial1v+0x48>)
   d4c0a:	f000 f9e6 	bl	d4fda <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4c0e:	4804      	ldr	r0, [pc, #16]	; (d4c20 <_Z22__fetch_global_Serial1v+0x44>)
   d4c10:	b002      	add	sp, #8
   d4c12:	bd10      	pop	{r4, pc}
   d4c14:	2003e5fc 	.word	0x2003e5fc
   d4c18:	2003e684 	.word	0x2003e684
   d4c1c:	2003e600 	.word	0x2003e600
   d4c20:	2003e708 	.word	0x2003e708
   d4c24:	000d4b3b 	.word	0x000d4b3b

000d4c28 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d4c28:	4770      	bx	lr

000d4c2a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4c2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4c2c:	4606      	mov	r6, r0
   d4c2e:	4615      	mov	r5, r2
   d4c30:	460c      	mov	r4, r1
   d4c32:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4c34:	42bc      	cmp	r4, r7
   d4c36:	d006      	beq.n	d4c46 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4c38:	6833      	ldr	r3, [r6, #0]
   d4c3a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4c3e:	689b      	ldr	r3, [r3, #8]
   d4c40:	4630      	mov	r0, r6
   d4c42:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d4c44:	e7f6      	b.n	d4c34 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d4c46:	4628      	mov	r0, r5
   d4c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4c4a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d4c4a:	7c00      	ldrb	r0, [r0, #16]
   d4c4c:	2200      	movs	r2, #0
   d4c4e:	f7ff bb2d 	b.w	d42ac <hal_i2c_write>

000d4c52 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d4c52:	7c00      	ldrb	r0, [r0, #16]
   d4c54:	2100      	movs	r1, #0
   d4c56:	f7ff bb31 	b.w	d42bc <hal_i2c_available>

000d4c5a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d4c5a:	7c00      	ldrb	r0, [r0, #16]
   d4c5c:	2100      	movs	r1, #0
   d4c5e:	f7ff bb35 	b.w	d42cc <hal_i2c_read>

000d4c62 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d4c62:	7c00      	ldrb	r0, [r0, #16]
   d4c64:	2100      	movs	r1, #0
   d4c66:	f7ff bb39 	b.w	d42dc <hal_i2c_peek>

000d4c6a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d4c6a:	7c00      	ldrb	r0, [r0, #16]
   d4c6c:	2100      	movs	r1, #0
   d4c6e:	f7ff bb3d 	b.w	d42ec <hal_i2c_flush>

000d4c72 <_ZN7TwoWireD0Ev>:
   d4c72:	b510      	push	{r4, lr}
   d4c74:	2114      	movs	r1, #20
   d4c76:	4604      	mov	r4, r0
   d4c78:	f000 f9a8 	bl	d4fcc <_ZdlPvj>
   d4c7c:	4620      	mov	r0, r4
   d4c7e:	bd10      	pop	{r4, pc}

000d4c80 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d4c80:	b510      	push	{r4, lr}
   d4c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4c86:	4604      	mov	r4, r0
   d4c88:	4608      	mov	r0, r1
   d4c8a:	2100      	movs	r1, #0
   d4c8c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d4c90:	4b03      	ldr	r3, [pc, #12]	; (d4ca0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d4c92:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d4c94:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d4c96:	4611      	mov	r1, r2
   d4c98:	f7ff fb38 	bl	d430c <hal_i2c_init>
}
   d4c9c:	4620      	mov	r0, r4
   d4c9e:	bd10      	pop	{r4, pc}
   d4ca0:	000d5248 	.word	0x000d5248

000d4ca4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4ca4:	2200      	movs	r2, #0
   d4ca6:	6840      	ldr	r0, [r0, #4]
   d4ca8:	4611      	mov	r1, r2
   d4caa:	f7ff bbb3 	b.w	d4414 <network_ready>

000d4cae <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4cae:	2200      	movs	r2, #0
   d4cb0:	6840      	ldr	r0, [r0, #4]
   d4cb2:	4611      	mov	r1, r2
   d4cb4:	f7ff bbce 	b.w	d4454 <network_listening>

000d4cb8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4cb8:	2200      	movs	r2, #0
   d4cba:	6840      	ldr	r0, [r0, #4]
   d4cbc:	4611      	mov	r1, r2
   d4cbe:	f7ff bbd9 	b.w	d4474 <network_get_listen_timeout>

000d4cc2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4cc2:	6840      	ldr	r0, [r0, #4]
   d4cc4:	2200      	movs	r2, #0
   d4cc6:	f7ff bbcd 	b.w	d4464 <network_set_listen_timeout>

000d4cca <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4cca:	6840      	ldr	r0, [r0, #4]
   d4ccc:	2200      	movs	r2, #0
   d4cce:	f081 0101 	eor.w	r1, r1, #1
   d4cd2:	f7ff bbb7 	b.w	d4444 <network_listen>

000d4cd6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4cd6:	2300      	movs	r3, #0
   d4cd8:	6840      	ldr	r0, [r0, #4]
   d4cda:	461a      	mov	r2, r3
   d4cdc:	4619      	mov	r1, r3
   d4cde:	f7ff bba9 	b.w	d4434 <network_off>

000d4ce2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4ce2:	2300      	movs	r3, #0
   d4ce4:	6840      	ldr	r0, [r0, #4]
   d4ce6:	461a      	mov	r2, r3
   d4ce8:	4619      	mov	r1, r3
   d4cea:	f7ff bb9b 	b.w	d4424 <network_on>

000d4cee <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4cee:	2200      	movs	r2, #0
   d4cf0:	6840      	ldr	r0, [r0, #4]
   d4cf2:	4611      	mov	r1, r2
   d4cf4:	f7ff bb7e 	b.w	d43f4 <network_connecting>

000d4cf8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4cf8:	6840      	ldr	r0, [r0, #4]
   d4cfa:	2200      	movs	r2, #0
   d4cfc:	2102      	movs	r1, #2
   d4cfe:	f7ff bb81 	b.w	d4404 <network_disconnect>

000d4d02 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4d02:	2300      	movs	r3, #0
   d4d04:	6840      	ldr	r0, [r0, #4]
   d4d06:	461a      	mov	r2, r3
   d4d08:	f7ff bb6c 	b.w	d43e4 <network_connect>

000d4d0c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d4d0c:	4b02      	ldr	r3, [pc, #8]	; (d4d18 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d4d0e:	2204      	movs	r2, #4
   d4d10:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d4d12:	4a02      	ldr	r2, [pc, #8]	; (d4d1c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d4d14:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d4d16:	4770      	bx	lr
   d4d18:	2003e71c 	.word	0x2003e71c
   d4d1c:	000d5270 	.word	0x000d5270

000d4d20 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4d20:	2300      	movs	r3, #0
   d4d22:	6840      	ldr	r0, [r0, #4]
   d4d24:	461a      	mov	r2, r3
   d4d26:	f7ff bb5d 	b.w	d43e4 <network_connect>

000d4d2a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4d2a:	6840      	ldr	r0, [r0, #4]
   d4d2c:	2200      	movs	r2, #0
   d4d2e:	2102      	movs	r1, #2
   d4d30:	f7ff bb68 	b.w	d4404 <network_disconnect>

000d4d34 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4d34:	2200      	movs	r2, #0
   d4d36:	6840      	ldr	r0, [r0, #4]
   d4d38:	4611      	mov	r1, r2
   d4d3a:	f7ff bb5b 	b.w	d43f4 <network_connecting>

000d4d3e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4d3e:	2200      	movs	r2, #0
   d4d40:	6840      	ldr	r0, [r0, #4]
   d4d42:	4611      	mov	r1, r2
   d4d44:	f7ff bb66 	b.w	d4414 <network_ready>

000d4d48 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4d48:	2300      	movs	r3, #0
   d4d4a:	6840      	ldr	r0, [r0, #4]
   d4d4c:	461a      	mov	r2, r3
   d4d4e:	4619      	mov	r1, r3
   d4d50:	f7ff bb68 	b.w	d4424 <network_on>

000d4d54 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4d54:	2300      	movs	r3, #0
   d4d56:	6840      	ldr	r0, [r0, #4]
   d4d58:	461a      	mov	r2, r3
   d4d5a:	4619      	mov	r1, r3
   d4d5c:	f7ff bb6a 	b.w	d4434 <network_off>

000d4d60 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d4d60:	6840      	ldr	r0, [r0, #4]
   d4d62:	2100      	movs	r1, #0
   d4d64:	f7ff bb8e 	b.w	d4484 <network_is_on>

000d4d68 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d4d68:	6840      	ldr	r0, [r0, #4]
   d4d6a:	2100      	movs	r1, #0
   d4d6c:	f7ff bb92 	b.w	d4494 <network_is_off>

000d4d70 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4d70:	6840      	ldr	r0, [r0, #4]
   d4d72:	2200      	movs	r2, #0
   d4d74:	f081 0101 	eor.w	r1, r1, #1
   d4d78:	f7ff bb64 	b.w	d4444 <network_listen>

000d4d7c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4d7c:	6840      	ldr	r0, [r0, #4]
   d4d7e:	2200      	movs	r2, #0
   d4d80:	f7ff bb70 	b.w	d4464 <network_set_listen_timeout>

000d4d84 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4d84:	2200      	movs	r2, #0
   d4d86:	6840      	ldr	r0, [r0, #4]
   d4d88:	4611      	mov	r1, r2
   d4d8a:	f7ff bb73 	b.w	d4474 <network_get_listen_timeout>

000d4d8e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4d8e:	2200      	movs	r2, #0
   d4d90:	6840      	ldr	r0, [r0, #4]
   d4d92:	4611      	mov	r1, r2
   d4d94:	f7ff bb5e 	b.w	d4454 <network_listening>

000d4d98 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4d98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4d9c:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d4d9e:	b095      	sub	sp, #84	; 0x54
   d4da0:	4616      	mov	r6, r2
   d4da2:	460d      	mov	r5, r1
   d4da4:	4607      	mov	r7, r0
    IPAddress addr;
   d4da6:	f7ff fe0d 	bl	d49c4 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d4daa:	4621      	mov	r1, r4
   d4dac:	2218      	movs	r2, #24
   d4dae:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d4db0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4db2:	f000 f926 	bl	d5002 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4db6:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d4db8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4dbc:	4621      	mov	r1, r4
   d4dbe:	466b      	mov	r3, sp
   d4dc0:	aa0c      	add	r2, sp, #48	; 0x30
   d4dc2:	4630      	mov	r0, r6
   d4dc4:	f7ff f9f2 	bl	d41ac <netdb_getaddrinfo>
    if (!r) {
   d4dc8:	4604      	mov	r4, r0
   d4dca:	2800      	cmp	r0, #0
   d4dcc:	d146      	bne.n	d4e5c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4dce:	4602      	mov	r2, r0
   d4dd0:	2101      	movs	r1, #1
   d4dd2:	6868      	ldr	r0, [r5, #4]
   d4dd4:	f7ff fb1e 	bl	d4414 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4dd8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4dda:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4ddc:	4622      	mov	r2, r4
   d4dde:	6868      	ldr	r0, [r5, #4]
   d4de0:	f7ff fb18 	bl	d4414 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4de4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4de6:	4681      	mov	r9, r0
        bool ok = false;
   d4de8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4dea:	2e00      	cmp	r6, #0
   d4dec:	d036      	beq.n	d4e5c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d4dee:	2900      	cmp	r1, #0
   d4df0:	d134      	bne.n	d4e5c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4df2:	6873      	ldr	r3, [r6, #4]
   d4df4:	2b02      	cmp	r3, #2
   d4df6:	d003      	beq.n	d4e00 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d4df8:	2b0a      	cmp	r3, #10
   d4dfa:	d00b      	beq.n	d4e14 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4dfc:	69f6      	ldr	r6, [r6, #28]
   d4dfe:	e7f4      	b.n	d4dea <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d4e00:	f1b8 0f00 	cmp.w	r8, #0
   d4e04:	d004      	beq.n	d4e10 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4e06:	6971      	ldr	r1, [r6, #20]
   d4e08:	4638      	mov	r0, r7
   d4e0a:	3104      	adds	r1, #4
   d4e0c:	f7ff fe07 	bl	d4a1e <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d4e10:	4641      	mov	r1, r8
   d4e12:	e7f3      	b.n	d4dfc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4e14:	f1b9 0f00 	cmp.w	r9, #0
   d4e18:	d101      	bne.n	d4e1e <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d4e1a:	4649      	mov	r1, r9
   d4e1c:	e7ee      	b.n	d4dfc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4e1e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4e20:	2210      	movs	r2, #16
   d4e22:	a801      	add	r0, sp, #4
   d4e24:	f000 f8ed 	bl	d5002 <memset>
                    a.v = 6;
   d4e28:	2306      	movs	r3, #6
   d4e2a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4e2e:	ad01      	add	r5, sp, #4
   d4e30:	f104 0308 	add.w	r3, r4, #8
   d4e34:	3418      	adds	r4, #24
   d4e36:	6818      	ldr	r0, [r3, #0]
   d4e38:	6859      	ldr	r1, [r3, #4]
   d4e3a:	462a      	mov	r2, r5
   d4e3c:	c203      	stmia	r2!, {r0, r1}
   d4e3e:	3308      	adds	r3, #8
   d4e40:	42a3      	cmp	r3, r4
   d4e42:	4615      	mov	r5, r2
   d4e44:	d1f7      	bne.n	d4e36 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d4e46:	a901      	add	r1, sp, #4
   d4e48:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d4e4a:	ad07      	add	r5, sp, #28
   d4e4c:	f7ff fdc8 	bl	d49e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4e50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4e52:	1d3c      	adds	r4, r7, #4
   d4e54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4e56:	682b      	ldr	r3, [r5, #0]
   d4e58:	7023      	strb	r3, [r4, #0]
   d4e5a:	e7de      	b.n	d4e1a <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4e5c:	9800      	ldr	r0, [sp, #0]
   d4e5e:	f7ff f99d 	bl	d419c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4e62:	4638      	mov	r0, r7
   d4e64:	b015      	add	sp, #84	; 0x54
   d4e66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d4e6c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4e6c:	4b02      	ldr	r3, [pc, #8]	; (d4e78 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4e6e:	4a03      	ldr	r2, [pc, #12]	; (d4e7c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4e70:	601a      	str	r2, [r3, #0]
   d4e72:	2200      	movs	r2, #0
   d4e74:	605a      	str	r2, [r3, #4]

} // spark
   d4e76:	4770      	bx	lr
   d4e78:	2003e724 	.word	0x2003e724
   d4e7c:	000d52ac 	.word	0x000d52ac

000d4e80 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d4e80:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d4e82:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d4e84:	d902      	bls.n	d4e8c <pinAvailable+0xc>
    return false;
   d4e86:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d4e88:	b002      	add	sp, #8
   d4e8a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d4e8c:	f1a0 030b 	sub.w	r3, r0, #11
   d4e90:	2b02      	cmp	r3, #2
   d4e92:	d81a      	bhi.n	d4eca <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d4e94:	4c17      	ldr	r4, [pc, #92]	; (d4ef4 <pinAvailable+0x74>)
   d4e96:	7821      	ldrb	r1, [r4, #0]
   d4e98:	f3bf 8f5b 	dmb	ish
   d4e9c:	f011 0101 	ands.w	r1, r1, #1
   d4ea0:	d10b      	bne.n	d4eba <pinAvailable+0x3a>
   d4ea2:	4620      	mov	r0, r4
   d4ea4:	9101      	str	r1, [sp, #4]
   d4ea6:	f7ff f8fa 	bl	d409e <__cxa_guard_acquire>
   d4eaa:	9901      	ldr	r1, [sp, #4]
   d4eac:	b128      	cbz	r0, d4eba <pinAvailable+0x3a>
   d4eae:	4812      	ldr	r0, [pc, #72]	; (d4ef8 <pinAvailable+0x78>)
   d4eb0:	f7ff fb76 	bl	d45a0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4eb4:	4620      	mov	r0, r4
   d4eb6:	f7ff f8f7 	bl	d40a8 <__cxa_guard_release>
   d4eba:	4b0f      	ldr	r3, [pc, #60]	; (d4ef8 <pinAvailable+0x78>)
   d4ebc:	7818      	ldrb	r0, [r3, #0]
   d4ebe:	f7ff fa35 	bl	d432c <hal_spi_is_enabled>
   d4ec2:	2800      	cmp	r0, #0
   d4ec4:	d1df      	bne.n	d4e86 <pinAvailable+0x6>
  return true; // 'pin' is available
   d4ec6:	2001      	movs	r0, #1
   d4ec8:	e7de      	b.n	d4e88 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d4eca:	2801      	cmp	r0, #1
   d4ecc:	d809      	bhi.n	d4ee2 <pinAvailable+0x62>
   d4ece:	f000 f859 	bl	d4f84 <_Z19__fetch_global_Wirev>
   d4ed2:	2100      	movs	r1, #0
   d4ed4:	7c00      	ldrb	r0, [r0, #16]
   d4ed6:	f7ff fa11 	bl	d42fc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d4eda:	f080 0001 	eor.w	r0, r0, #1
   d4ede:	b2c0      	uxtb	r0, r0
   d4ee0:	e7d2      	b.n	d4e88 <pinAvailable+0x8>
   d4ee2:	3809      	subs	r0, #9
   d4ee4:	2801      	cmp	r0, #1
   d4ee6:	d8ee      	bhi.n	d4ec6 <pinAvailable+0x46>
   d4ee8:	f7ff fe78 	bl	d4bdc <_Z22__fetch_global_Serial1v>
   d4eec:	7c00      	ldrb	r0, [r0, #16]
   d4eee:	f7ff f9cd 	bl	d428c <hal_usart_is_enabled>
   d4ef2:	e7f2      	b.n	d4eda <pinAvailable+0x5a>
   d4ef4:	2003e72c 	.word	0x2003e72c
   d4ef8:	2003e730 	.word	0x2003e730

000d4efc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d4efc:	2823      	cmp	r0, #35	; 0x23
{
   d4efe:	b538      	push	{r3, r4, r5, lr}
   d4f00:	4604      	mov	r4, r0
   d4f02:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d4f04:	d80a      	bhi.n	d4f1c <pinMode+0x20>
   d4f06:	29ff      	cmp	r1, #255	; 0xff
   d4f08:	d008      	beq.n	d4f1c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d4f0a:	f7ff ffb9 	bl	d4e80 <pinAvailable>
   d4f0e:	b128      	cbz	r0, d4f1c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d4f10:	4629      	mov	r1, r5
   d4f12:	4620      	mov	r0, r4
}
   d4f14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d4f18:	f7ff b950 	b.w	d41bc <HAL_Pin_Mode>
}
   d4f1c:	bd38      	pop	{r3, r4, r5, pc}

000d4f1e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d4f1e:	b538      	push	{r3, r4, r5, lr}
   d4f20:	4604      	mov	r4, r0
   d4f22:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d4f24:	f7ff f952 	bl	d41cc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d4f28:	28ff      	cmp	r0, #255	; 0xff
   d4f2a:	d010      	beq.n	d4f4e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d4f2c:	2806      	cmp	r0, #6
   d4f2e:	d804      	bhi.n	d4f3a <digitalWrite+0x1c>
   d4f30:	234d      	movs	r3, #77	; 0x4d
   d4f32:	fa23 f000 	lsr.w	r0, r3, r0
   d4f36:	07c3      	lsls	r3, r0, #31
   d4f38:	d409      	bmi.n	d4f4e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d4f3a:	4620      	mov	r0, r4
   d4f3c:	f7ff ffa0 	bl	d4e80 <pinAvailable>
   d4f40:	b128      	cbz	r0, d4f4e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d4f42:	4629      	mov	r1, r5
   d4f44:	4620      	mov	r0, r4
}
   d4f46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d4f4a:	f7ff b947 	b.w	d41dc <HAL_GPIO_Write>
}
   d4f4e:	bd38      	pop	{r3, r4, r5, pc}

000d4f50 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d4f50:	4770      	bx	lr
	...

000d4f54 <_Z17acquireWireBufferv>:
{
   d4f54:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d4f56:	2300      	movs	r3, #0
   d4f58:	2520      	movs	r5, #32
   d4f5a:	8043      	strh	r3, [r0, #2]
   d4f5c:	2314      	movs	r3, #20
{
   d4f5e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d4f60:	8003      	strh	r3, [r0, #0]
   d4f62:	6085      	str	r5, [r0, #8]
   d4f64:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d4f66:	4906      	ldr	r1, [pc, #24]	; (d4f80 <_Z17acquireWireBufferv+0x2c>)
   d4f68:	4628      	mov	r0, r5
   d4f6a:	f000 f831 	bl	d4fd0 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d4f6e:	4904      	ldr	r1, [pc, #16]	; (d4f80 <_Z17acquireWireBufferv+0x2c>)
	};
   d4f70:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d4f72:	4628      	mov	r0, r5
   d4f74:	f000 f82c 	bl	d4fd0 <_ZnajRKSt9nothrow_t>
	};
   d4f78:	60e0      	str	r0, [r4, #12]
}
   d4f7a:	4620      	mov	r0, r4
   d4f7c:	bd38      	pop	{r3, r4, r5, pc}
   d4f7e:	bf00      	nop
   d4f80:	000d52e0 	.word	0x000d52e0

000d4f84 <_Z19__fetch_global_Wirev>:
{
   d4f84:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d4f86:	4d0e      	ldr	r5, [pc, #56]	; (d4fc0 <_Z19__fetch_global_Wirev+0x3c>)
   d4f88:	7829      	ldrb	r1, [r5, #0]
   d4f8a:	f3bf 8f5b 	dmb	ish
   d4f8e:	f011 0401 	ands.w	r4, r1, #1
{
   d4f92:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d4f94:	d111      	bne.n	d4fba <_Z19__fetch_global_Wirev+0x36>
   d4f96:	4628      	mov	r0, r5
   d4f98:	f7ff f881 	bl	d409e <__cxa_guard_acquire>
   d4f9c:	b168      	cbz	r0, d4fba <_Z19__fetch_global_Wirev+0x36>
   d4f9e:	a801      	add	r0, sp, #4
   d4fa0:	f7ff ffd8 	bl	d4f54 <_Z17acquireWireBufferv>
   d4fa4:	aa01      	add	r2, sp, #4
   d4fa6:	4621      	mov	r1, r4
   d4fa8:	4806      	ldr	r0, [pc, #24]	; (d4fc4 <_Z19__fetch_global_Wirev+0x40>)
   d4faa:	f7ff fe69 	bl	d4c80 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d4fae:	4628      	mov	r0, r5
   d4fb0:	f7ff f87a 	bl	d40a8 <__cxa_guard_release>
   d4fb4:	4804      	ldr	r0, [pc, #16]	; (d4fc8 <_Z19__fetch_global_Wirev+0x44>)
   d4fb6:	f000 f810 	bl	d4fda <atexit>
	return wire;
}
   d4fba:	4802      	ldr	r0, [pc, #8]	; (d4fc4 <_Z19__fetch_global_Wirev+0x40>)
   d4fbc:	b007      	add	sp, #28
   d4fbe:	bd30      	pop	{r4, r5, pc}
   d4fc0:	2003e73c 	.word	0x2003e73c
   d4fc4:	2003e740 	.word	0x2003e740
   d4fc8:	000d4f51 	.word	0x000d4f51

000d4fcc <_ZdlPvj>:
   d4fcc:	f7ff b865 	b.w	d409a <_ZdlPv>

000d4fd0 <_ZnajRKSt9nothrow_t>:
   d4fd0:	f7ff b861 	b.w	d4096 <_Znaj>

000d4fd4 <_ZSt25__throw_bad_function_callv>:
   d4fd4:	b508      	push	{r3, lr}
   d4fd6:	f7ff fa95 	bl	d4504 <abort>

000d4fda <atexit>:
   d4fda:	2300      	movs	r3, #0
   d4fdc:	4601      	mov	r1, r0
   d4fde:	461a      	mov	r2, r3
   d4fe0:	4618      	mov	r0, r3
   d4fe2:	f000 b84b 	b.w	d507c <__register_exitproc>

000d4fe6 <memcpy>:
   d4fe6:	440a      	add	r2, r1
   d4fe8:	4291      	cmp	r1, r2
   d4fea:	f100 33ff 	add.w	r3, r0, #4294967295
   d4fee:	d100      	bne.n	d4ff2 <memcpy+0xc>
   d4ff0:	4770      	bx	lr
   d4ff2:	b510      	push	{r4, lr}
   d4ff4:	f811 4b01 	ldrb.w	r4, [r1], #1
   d4ff8:	f803 4f01 	strb.w	r4, [r3, #1]!
   d4ffc:	4291      	cmp	r1, r2
   d4ffe:	d1f9      	bne.n	d4ff4 <memcpy+0xe>
   d5000:	bd10      	pop	{r4, pc}

000d5002 <memset>:
   d5002:	4402      	add	r2, r0
   d5004:	4603      	mov	r3, r0
   d5006:	4293      	cmp	r3, r2
   d5008:	d100      	bne.n	d500c <memset+0xa>
   d500a:	4770      	bx	lr
   d500c:	f803 1b01 	strb.w	r1, [r3], #1
   d5010:	e7f9      	b.n	d5006 <memset+0x4>
	...

000d5014 <srand>:
   d5014:	b538      	push	{r3, r4, r5, lr}
   d5016:	4b0d      	ldr	r3, [pc, #52]	; (d504c <srand+0x38>)
   d5018:	681d      	ldr	r5, [r3, #0]
   d501a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d501c:	4604      	mov	r4, r0
   d501e:	b97b      	cbnz	r3, d5040 <srand+0x2c>
   d5020:	2018      	movs	r0, #24
   d5022:	f7ff fa57 	bl	d44d4 <malloc>
   d5026:	4a0a      	ldr	r2, [pc, #40]	; (d5050 <srand+0x3c>)
   d5028:	4b0a      	ldr	r3, [pc, #40]	; (d5054 <srand+0x40>)
   d502a:	63a8      	str	r0, [r5, #56]	; 0x38
   d502c:	e9c0 2300 	strd	r2, r3, [r0]
   d5030:	4b09      	ldr	r3, [pc, #36]	; (d5058 <srand+0x44>)
   d5032:	6083      	str	r3, [r0, #8]
   d5034:	230b      	movs	r3, #11
   d5036:	8183      	strh	r3, [r0, #12]
   d5038:	2201      	movs	r2, #1
   d503a:	2300      	movs	r3, #0
   d503c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5040:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5042:	2200      	movs	r2, #0
   d5044:	611c      	str	r4, [r3, #16]
   d5046:	615a      	str	r2, [r3, #20]
   d5048:	bd38      	pop	{r3, r4, r5, pc}
   d504a:	bf00      	nop
   d504c:	2003e53c 	.word	0x2003e53c
   d5050:	abcd330e 	.word	0xabcd330e
   d5054:	e66d1234 	.word	0xe66d1234
   d5058:	0005deec 	.word	0x0005deec

000d505c <strcpy>:
   d505c:	4603      	mov	r3, r0
   d505e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d5062:	f803 2b01 	strb.w	r2, [r3], #1
   d5066:	2a00      	cmp	r2, #0
   d5068:	d1f9      	bne.n	d505e <strcpy+0x2>
   d506a:	4770      	bx	lr

000d506c <strlen>:
   d506c:	4603      	mov	r3, r0
   d506e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5072:	2a00      	cmp	r2, #0
   d5074:	d1fb      	bne.n	d506e <strlen+0x2>
   d5076:	1a18      	subs	r0, r3, r0
   d5078:	3801      	subs	r0, #1
   d507a:	4770      	bx	lr

000d507c <__register_exitproc>:
   d507c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5080:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d513c <__register_exitproc+0xc0>
   d5084:	4606      	mov	r6, r0
   d5086:	f8d8 0000 	ldr.w	r0, [r8]
   d508a:	461f      	mov	r7, r3
   d508c:	460d      	mov	r5, r1
   d508e:	4691      	mov	r9, r2
   d5090:	f000 f856 	bl	d5140 <__retarget_lock_acquire_recursive>
   d5094:	4b25      	ldr	r3, [pc, #148]	; (d512c <__register_exitproc+0xb0>)
   d5096:	681c      	ldr	r4, [r3, #0]
   d5098:	b934      	cbnz	r4, d50a8 <__register_exitproc+0x2c>
   d509a:	4c25      	ldr	r4, [pc, #148]	; (d5130 <__register_exitproc+0xb4>)
   d509c:	601c      	str	r4, [r3, #0]
   d509e:	4b25      	ldr	r3, [pc, #148]	; (d5134 <__register_exitproc+0xb8>)
   d50a0:	b113      	cbz	r3, d50a8 <__register_exitproc+0x2c>
   d50a2:	681b      	ldr	r3, [r3, #0]
   d50a4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d50a8:	6863      	ldr	r3, [r4, #4]
   d50aa:	2b1f      	cmp	r3, #31
   d50ac:	dd07      	ble.n	d50be <__register_exitproc+0x42>
   d50ae:	f8d8 0000 	ldr.w	r0, [r8]
   d50b2:	f000 f847 	bl	d5144 <__retarget_lock_release_recursive>
   d50b6:	f04f 30ff 	mov.w	r0, #4294967295
   d50ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d50be:	b34e      	cbz	r6, d5114 <__register_exitproc+0x98>
   d50c0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d50c4:	b988      	cbnz	r0, d50ea <__register_exitproc+0x6e>
   d50c6:	4b1c      	ldr	r3, [pc, #112]	; (d5138 <__register_exitproc+0xbc>)
   d50c8:	b923      	cbnz	r3, d50d4 <__register_exitproc+0x58>
   d50ca:	f8d8 0000 	ldr.w	r0, [r8]
   d50ce:	f000 f838 	bl	d5142 <__retarget_lock_release>
   d50d2:	e7f0      	b.n	d50b6 <__register_exitproc+0x3a>
   d50d4:	f44f 7084 	mov.w	r0, #264	; 0x108
   d50d8:	f7ff f9fc 	bl	d44d4 <malloc>
   d50dc:	2800      	cmp	r0, #0
   d50de:	d0f4      	beq.n	d50ca <__register_exitproc+0x4e>
   d50e0:	2300      	movs	r3, #0
   d50e2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d50e6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d50ea:	6863      	ldr	r3, [r4, #4]
   d50ec:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d50f0:	2201      	movs	r2, #1
   d50f2:	409a      	lsls	r2, r3
   d50f4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d50f8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d50fc:	4313      	orrs	r3, r2
   d50fe:	2e02      	cmp	r6, #2
   d5100:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d5104:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d5108:	bf02      	ittt	eq
   d510a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d510e:	431a      	orreq	r2, r3
   d5110:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d5114:	6863      	ldr	r3, [r4, #4]
   d5116:	f8d8 0000 	ldr.w	r0, [r8]
   d511a:	1c5a      	adds	r2, r3, #1
   d511c:	3302      	adds	r3, #2
   d511e:	6062      	str	r2, [r4, #4]
   d5120:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d5124:	f000 f80e 	bl	d5144 <__retarget_lock_release_recursive>
   d5128:	2000      	movs	r0, #0
   d512a:	e7c6      	b.n	d50ba <__register_exitproc+0x3e>
   d512c:	2003e7e0 	.word	0x2003e7e0
   d5130:	2003e754 	.word	0x2003e754
   d5134:	00000000 	.word	0x00000000
   d5138:	000d44d5 	.word	0x000d44d5
   d513c:	2003e5a0 	.word	0x2003e5a0

000d5140 <__retarget_lock_acquire_recursive>:
   d5140:	4770      	bx	lr

000d5142 <__retarget_lock_release>:
   d5142:	4770      	bx	lr

000d5144 <__retarget_lock_release_recursive>:
   d5144:	4770      	bx	lr

000d5146 <link_code_end>:
	...

000d5148 <dynalib_user>:
   d5148:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d5158:	0000 0000 7473 7461 7375 4c00 4445 7700     ....status.LED.w
   d5168:	2065 7567 6363 0000                         e gucc..

000d5170 <_ZTVN5spark13EthernetClassE>:
	...
   d5178:	4583 000d 4579 000d 456f 000d 4565 000d     .E..yE..oE..eE..
   d5188:	4559 000d 454d 000d 4d61 000d 4d69 000d     YE..ME..aM..iM..
   d5198:	4541 000d 4539 000d 452f 000d 4525 000d     AE..9E../E..%E..
   d51a8:	4d99 000d 7061 0070 5925 252d 2d6d 6425     .M..app.%Y-%m-%d
   d51b8:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d51c8:	6d69 0065                                   ime.

000d51cc <_ZTV9IPAddress>:
	...
   d51d4:	495f 000d 494f 000d 4951 000d               _I..OI..QI..

000d51e0 <_ZTV9USBSerial>:
	...
   d51e8:	4a39 000d 4aa1 000d 4a77 000d 46f9 000d     9J...J..wJ...F..
   d51f8:	4a69 000d 4a3b 000d 4a4b 000d 4a9b 000d     iJ..;J..KJ...J..
   d5208:	4a5b 000d 4a33 000d                         [J..3J..

000d5210 <_ZTV11USARTSerial>:
	...
   d5218:	4b35 000d 4ba3 000d 4b7b 000d 46f9 000d     5K...K..{K...F..
   d5228:	4b4b 000d 4b67 000d 4b59 000d 4b75 000d     KK..gK..YK..uK..
   d5238:	4b37 000d 4b3d 000d                         7K..=K..

000d5240 <_ZTV7TwoWire>:
	...
   d5248:	4c29 000d 4c73 000d 4c4b 000d 4c2b 000d     )L..sL..KL..+L..
   d5258:	4c53 000d 4c5b 000d 4c63 000d 4c6b 000d     SL..[L..cL..kL..

000d5268 <_ZTVN5spark9WiFiClassE>:
	...
   d5270:	4d03 000d 4cf9 000d 4cef 000d 4ca5 000d     .M...L...L...L..
   d5280:	4ce3 000d 4cd7 000d 4d61 000d 4d69 000d     .L...L..aM..iM..
   d5290:	4ccb 000d 4cc3 000d 4cb9 000d 4caf 000d     .L...L...L...L..
   d52a0:	4d99 000d                                   .M..

000d52a4 <_ZTVN5spark12NetworkClassE>:
	...
   d52ac:	4d21 000d 4d2b 000d 4d35 000d 4d3f 000d     !M..+M..5M..?M..
   d52bc:	4d49 000d 4d55 000d 4d61 000d 4d69 000d     IM..UM..aM..iM..
   d52cc:	4d71 000d 4d7d 000d 4d85 000d 4d8f 000d     qM..}M...M...M..
   d52dc:	4d99 000d                                   .M..

000d52e0 <_ZSt7nothrow>:
	...

000d52e1 <link_const_variable_data_end>:
   d52e1:	00          	.byte	0x00
	...

000d52e4 <link_constructors_location>:
   d52e4:	000d458d 	.word	0x000d458d
   d52e8:	000d45b5 	.word	0x000d45b5
   d52ec:	000d46e9 	.word	0x000d46e9
   d52f0:	000d4795 	.word	0x000d4795
   d52f4:	000d47a5 	.word	0x000d47a5
   d52f8:	000d47c1 	.word	0x000d47c1
   d52fc:	000d4d0d 	.word	0x000d4d0d
   d5300:	000d4e6d 	.word	0x000d4e6d

000d5304 <link_constructors_end>:
	...
