
d:/UDES/S6/APP5/GI_S6_APP5/ArgonDevice/target/2.3.0/photon/ArgonDevice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001990  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a19b0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  20000000  080a19b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000594  20000070  20000070  00030070  2**3
                  ALLOC
  6 .module_info_suffix 00000028  080a1a24  080a1a24  00021a24  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a1a4c  080a1a4c  00021a4c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000efd71  00000000  00000000  00021a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000121b9  00000000  00000000  001117c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000165fc  00000000  00000000  0012397a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001e90  00000000  00000000  00139f76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004780  00000000  00000000  0013be06  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00025160  00000000  00000000  00140586  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00027f95  00000000  00000000  001656e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000abbcb  00000000  00000000  0018d67b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004dfc  00000000  00000000  00239248  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f001 fb3b 	bl	80a16ac <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f001 fb43 	bl	80a16c8 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a19b4 	.word	0x080a19b4
 80a0050:	20000070 	.word	0x20000070
 80a0054:	20000070 	.word	0x20000070
 80a0058:	20000601 	.word	0x20000601
 80a005c:	20000601 	.word	0x20000601

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f000 fbb5 	bl	80a07d0 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42a5      	cmp	r5, r4
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080a1984 	.word	0x080a1984
 80a0084:	080a19a4 	.word	0x080a19a4

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b816 	b.w	80a00b8 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f857 	bl	80a0140 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f000 bb53 	b.w	80a0740 <_post_loop>

080a009a <_Znaj>:
 80a009a:	f000 ba1b 	b.w	80a04d4 <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f000 ba21 	b.w	80a04e4 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
 80a00b2:	6810      	ldr	r0, [r2, #0]
 80a00b4:	4770      	bx	lr
	...

080a00b8 <setup>:
double tempC = 0;
char *message = "my name is particle";
String aString;

void setup()
{
 80a00b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a00ba:	2300      	movs	r3, #0
 80a00bc:	2201      	movs	r2, #1
 80a00be:	4915      	ldr	r1, [pc, #84]	; (80a0114 <setup+0x5c>)
 80a00c0:	4815      	ldr	r0, [pc, #84]	; (80a0118 <setup+0x60>)
 80a00c2:	f000 f9f7 	bl	80a04b4 <spark_variable>
 80a00c6:	2300      	movs	r3, #0
 80a00c8:	2202      	movs	r2, #2
 80a00ca:	4914      	ldr	r1, [pc, #80]	; (80a011c <setup+0x64>)
 80a00cc:	4814      	ldr	r0, [pc, #80]	; (80a0120 <setup+0x68>)
 80a00ce:	f000 f9f1 	bl	80a04b4 <spark_variable>
 80a00d2:	2300      	movs	r3, #0
 80a00d4:	2209      	movs	r2, #9
 80a00d6:	4913      	ldr	r1, [pc, #76]	; (80a0124 <setup+0x6c>)
 80a00d8:	4813      	ldr	r0, [pc, #76]	; (80a0128 <setup+0x70>)
 80a00da:	f000 f9eb 	bl	80a04b4 <spark_variable>
 80a00de:	4913      	ldr	r1, [pc, #76]	; (80a012c <setup+0x74>)
 80a00e0:	2300      	movs	r3, #0
 80a00e2:	2204      	movs	r2, #4
 80a00e4:	6809      	ldr	r1, [r1, #0]
 80a00e6:	4812      	ldr	r0, [pc, #72]	; (80a0130 <setup+0x78>)
 80a00e8:	f000 f9e4 	bl	80a04b4 <spark_variable>
        spark_variable_t extra = {};
 80a00ec:	2400      	movs	r4, #0
        extra.size = sizeof(extra);
 80a00ee:	230c      	movs	r3, #12
        spark_variable_t extra = {};
 80a00f0:	9401      	str	r4, [sp, #4]
        extra.size = sizeof(extra);
 80a00f2:	f8ad 3004 	strh.w	r3, [sp, #4]
        extra.update = update_string_variable;
 80a00f6:	4b0f      	ldr	r3, [pc, #60]	; (80a0134 <setup+0x7c>)
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 80a00f8:	2204      	movs	r2, #4
        extra.update = update_string_variable;
 80a00fa:	9302      	str	r3, [sp, #8]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 80a00fc:	490e      	ldr	r1, [pc, #56]	; (80a0138 <setup+0x80>)
 80a00fe:	ab01      	add	r3, sp, #4
 80a0100:	480e      	ldr	r0, [pc, #56]	; (80a013c <setup+0x84>)
        spark_variable_t extra = {};
 80a0102:	9403      	str	r4, [sp, #12]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 80a0104:	f000 f9d6 	bl	80a04b4 <spark_variable>
  {
      // variable not registered!
  }
  Particle.variable("mess2", aString);

  pinMode(A0, INPUT);
 80a0108:	4621      	mov	r1, r4
 80a010a:	200a      	movs	r0, #10
 80a010c:	f000 fe82 	bl	80a0e14 <pinMode>
}
 80a0110:	b004      	add	sp, #16
 80a0112:	bd10      	pop	{r4, pc}
 80a0114:	20000084 	.word	0x20000084
 80a0118:	080a1814 	.word	0x080a1814
 80a011c:	20000080 	.word	0x20000080
 80a0120:	080a1819 	.word	0x080a1819
 80a0124:	20000088 	.word	0x20000088
 80a0128:	080a1825 	.word	0x080a1825
 80a012c:	20000000 	.word	0x20000000
 80a0130:	080a182a 	.word	0x080a182a
 80a0134:	080a00b3 	.word	0x080a00b3
 80a0138:	20000070 	.word	0x20000070
 80a013c:	080a182f 	.word	0x080a182f

080a0140 <loop>:

void loop()
{
 80a0140:	b508      	push	{r3, lr}
  // Read the analog value of the sensor (TMP36)
  analogvalue = analogRead(A0);
 80a0142:	200a      	movs	r0, #10
 80a0144:	f000 fe77 	bl	80a0e36 <analogRead>
 80a0148:	4b13      	ldr	r3, [pc, #76]	; (80a0198 <loop+0x58>)
 80a014a:	6018      	str	r0, [r3, #0]
  // Convert the reading into degree Celsius
  tempC = (((analogvalue * 3.3) / 4095) - 0.5) * 100;
 80a014c:	f001 f82c 	bl	80a11a8 <__aeabi_i2d>
 80a0150:	a30d      	add	r3, pc, #52	; (adr r3, 80a0188 <loop+0x48>)
 80a0152:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0156:	f001 f891 	bl	80a127c <__aeabi_dmul>
 80a015a:	a30d      	add	r3, pc, #52	; (adr r3, 80a0190 <loop+0x50>)
 80a015c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0160:	f001 f9b6 	bl	80a14d0 <__aeabi_ddiv>
 80a0164:	2200      	movs	r2, #0
 80a0166:	4b0d      	ldr	r3, [pc, #52]	; (80a019c <loop+0x5c>)
 80a0168:	f000 fed0 	bl	80a0f0c <__aeabi_dsub>
 80a016c:	4b0c      	ldr	r3, [pc, #48]	; (80a01a0 <loop+0x60>)
 80a016e:	2200      	movs	r2, #0
 80a0170:	f001 f884 	bl	80a127c <__aeabi_dmul>
 80a0174:	4b0b      	ldr	r3, [pc, #44]	; (80a01a4 <loop+0x64>)
 80a0176:	e9c3 0100 	strd	r0, r1, [r3]
  delay(200);
 80a017a:	20c8      	movs	r0, #200	; 0xc8
 80a017c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(200);
 80a0180:	f000 ba9e 	b.w	80a06c0 <delay>
 80a0184:	f3af 8000 	nop.w
 80a0188:	66666666 	.word	0x66666666
 80a018c:	400a6666 	.word	0x400a6666
 80a0190:	00000000 	.word	0x00000000
 80a0194:	40affe00 	.word	0x40affe00
 80a0198:	20000080 	.word	0x20000080
 80a019c:	3fe00000 	.word	0x3fe00000
 80a01a0:	40590000 	.word	0x40590000
 80a01a4:	20000088 	.word	0x20000088

080a01a8 <_GLOBAL__sub_I_flag>:
String aString;
 80a01a8:	4901      	ldr	r1, [pc, #4]	; (80a01b0 <_GLOBAL__sub_I_flag+0x8>)
 80a01aa:	4802      	ldr	r0, [pc, #8]	; (80a01b4 <_GLOBAL__sub_I_flag+0xc>)
 80a01ac:	f000 ba17 	b.w	80a05de <_ZN6StringC1EPKc>
 80a01b0:	080a1834 	.word	0x080a1834
 80a01b4:	20000070 	.word	0x20000070

080a01b8 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a01b8:	b508      	push	{r3, lr}
 80a01ba:	4b02      	ldr	r3, [pc, #8]	; (80a01c4 <HAL_Validate_Pin_Function+0xc>)
 80a01bc:	681b      	ldr	r3, [r3, #0]
 80a01be:	685b      	ldr	r3, [r3, #4]
 80a01c0:	9301      	str	r3, [sp, #4]
 80a01c2:	bd08      	pop	{r3, pc}
 80a01c4:	080601b0 	.word	0x080601b0

080a01c8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a01c8:	b508      	push	{r3, lr}
 80a01ca:	4b02      	ldr	r3, [pc, #8]	; (80a01d4 <HAL_Pin_Mode+0xc>)
 80a01cc:	681b      	ldr	r3, [r3, #0]
 80a01ce:	689b      	ldr	r3, [r3, #8]
 80a01d0:	9301      	str	r3, [sp, #4]
 80a01d2:	bd08      	pop	{r3, pc}
 80a01d4:	080601b0 	.word	0x080601b0

080a01d8 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 80a01d8:	b508      	push	{r3, lr}
 80a01da:	4b02      	ldr	r3, [pc, #8]	; (80a01e4 <hal_adc_read+0xc>)
 80a01dc:	681b      	ldr	r3, [r3, #0]
 80a01de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a01e0:	9301      	str	r3, [sp, #4]
 80a01e2:	bd08      	pop	{r3, pc}
 80a01e4:	080601b0 	.word	0x080601b0

080a01e8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a01e8:	b508      	push	{r3, lr}
 80a01ea:	4b02      	ldr	r3, [pc, #8]	; (80a01f4 <HAL_RNG_GetRandomNumber+0xc>)
 80a01ec:	681b      	ldr	r3, [r3, #0]
 80a01ee:	685b      	ldr	r3, [r3, #4]
 80a01f0:	9301      	str	r3, [sp, #4]
 80a01f2:	bd08      	pop	{r3, pc}
 80a01f4:	0806019c 	.word	0x0806019c

080a01f8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a01f8:	b508      	push	{r3, lr}
 80a01fa:	4b02      	ldr	r3, [pc, #8]	; (80a0204 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a01fc:	681b      	ldr	r3, [r3, #0]
 80a01fe:	695b      	ldr	r3, [r3, #20]
 80a0200:	9301      	str	r3, [sp, #4]
 80a0202:	bd08      	pop	{r3, pc}
 80a0204:	0806019c 	.word	0x0806019c

080a0208 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0208:	b508      	push	{r3, lr}
 80a020a:	4b02      	ldr	r3, [pc, #8]	; (80a0214 <os_mutex_recursive_create+0xc>)
 80a020c:	681b      	ldr	r3, [r3, #0]
 80a020e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0210:	9301      	str	r3, [sp, #4]
 80a0212:	bd08      	pop	{r3, pc}
 80a0214:	080601d0 	.word	0x080601d0

080a0218 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0218:	b508      	push	{r3, lr}
 80a021a:	4b02      	ldr	r3, [pc, #8]	; (80a0224 <os_mutex_recursive_destroy+0xc>)
 80a021c:	681b      	ldr	r3, [r3, #0]
 80a021e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0220:	9301      	str	r3, [sp, #4]
 80a0222:	bd08      	pop	{r3, pc}
 80a0224:	080601d0 	.word	0x080601d0

080a0228 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a0228:	b508      	push	{r3, lr}
 80a022a:	4b02      	ldr	r3, [pc, #8]	; (80a0234 <hal_usart_init+0xc>)
 80a022c:	681b      	ldr	r3, [r3, #0]
 80a022e:	699b      	ldr	r3, [r3, #24]
 80a0230:	9301      	str	r3, [sp, #4]
 80a0232:	bd08      	pop	{r3, pc}
 80a0234:	080601c4 	.word	0x080601c4

080a0238 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a0238:	b508      	push	{r3, lr}
 80a023a:	4b02      	ldr	r3, [pc, #8]	; (80a0244 <hal_usart_write+0xc>)
 80a023c:	681b      	ldr	r3, [r3, #0]
 80a023e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0240:	9301      	str	r3, [sp, #4]
 80a0242:	bd08      	pop	{r3, pc}
 80a0244:	080601c4 	.word	0x080601c4

080a0248 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a0248:	b508      	push	{r3, lr}
 80a024a:	4b02      	ldr	r3, [pc, #8]	; (80a0254 <hal_usart_available+0xc>)
 80a024c:	681b      	ldr	r3, [r3, #0]
 80a024e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0250:	9301      	str	r3, [sp, #4]
 80a0252:	bd08      	pop	{r3, pc}
 80a0254:	080601c4 	.word	0x080601c4

080a0258 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a0258:	b508      	push	{r3, lr}
 80a025a:	4b02      	ldr	r3, [pc, #8]	; (80a0264 <hal_usart_read+0xc>)
 80a025c:	681b      	ldr	r3, [r3, #0]
 80a025e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0260:	9301      	str	r3, [sp, #4]
 80a0262:	bd08      	pop	{r3, pc}
 80a0264:	080601c4 	.word	0x080601c4

080a0268 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a0268:	b508      	push	{r3, lr}
 80a026a:	4b02      	ldr	r3, [pc, #8]	; (80a0274 <hal_usart_peek+0xc>)
 80a026c:	681b      	ldr	r3, [r3, #0]
 80a026e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0270:	9301      	str	r3, [sp, #4]
 80a0272:	bd08      	pop	{r3, pc}
 80a0274:	080601c4 	.word	0x080601c4

080a0278 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a0278:	b508      	push	{r3, lr}
 80a027a:	4b02      	ldr	r3, [pc, #8]	; (80a0284 <hal_usart_flush+0xc>)
 80a027c:	681b      	ldr	r3, [r3, #0]
 80a027e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0280:	9301      	str	r3, [sp, #4]
 80a0282:	bd08      	pop	{r3, pc}
 80a0284:	080601c4 	.word	0x080601c4

080a0288 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a0288:	b508      	push	{r3, lr}
 80a028a:	4b02      	ldr	r3, [pc, #8]	; (80a0294 <hal_usart_is_enabled+0xc>)
 80a028c:	681b      	ldr	r3, [r3, #0]
 80a028e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0290:	9301      	str	r3, [sp, #4]
 80a0292:	bd08      	pop	{r3, pc}
 80a0294:	080601c4 	.word	0x080601c4

080a0298 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0298:	b508      	push	{r3, lr}
 80a029a:	4b02      	ldr	r3, [pc, #8]	; (80a02a4 <hal_usart_available_data_for_write+0xc>)
 80a029c:	681b      	ldr	r3, [r3, #0]
 80a029e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a02a0:	9301      	str	r3, [sp, #4]
 80a02a2:	bd08      	pop	{r3, pc}
 80a02a4:	080601c4 	.word	0x080601c4

080a02a8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a02a8:	b508      	push	{r3, lr}
 80a02aa:	4b02      	ldr	r3, [pc, #8]	; (80a02b4 <hal_i2c_write+0xc>)
 80a02ac:	681b      	ldr	r3, [r3, #0]
 80a02ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a02b0:	9301      	str	r3, [sp, #4]
 80a02b2:	bd08      	pop	{r3, pc}
 80a02b4:	080601ac 	.word	0x080601ac

080a02b8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a02b8:	b508      	push	{r3, lr}
 80a02ba:	4b02      	ldr	r3, [pc, #8]	; (80a02c4 <hal_i2c_available+0xc>)
 80a02bc:	681b      	ldr	r3, [r3, #0]
 80a02be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a02c0:	9301      	str	r3, [sp, #4]
 80a02c2:	bd08      	pop	{r3, pc}
 80a02c4:	080601ac 	.word	0x080601ac

080a02c8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a02c8:	b508      	push	{r3, lr}
 80a02ca:	4b02      	ldr	r3, [pc, #8]	; (80a02d4 <hal_i2c_read+0xc>)
 80a02cc:	681b      	ldr	r3, [r3, #0]
 80a02ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a02d0:	9301      	str	r3, [sp, #4]
 80a02d2:	bd08      	pop	{r3, pc}
 80a02d4:	080601ac 	.word	0x080601ac

080a02d8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a02d8:	b508      	push	{r3, lr}
 80a02da:	4b02      	ldr	r3, [pc, #8]	; (80a02e4 <hal_i2c_peek+0xc>)
 80a02dc:	681b      	ldr	r3, [r3, #0]
 80a02de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a02e0:	9301      	str	r3, [sp, #4]
 80a02e2:	bd08      	pop	{r3, pc}
 80a02e4:	080601ac 	.word	0x080601ac

080a02e8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a02e8:	b508      	push	{r3, lr}
 80a02ea:	4b02      	ldr	r3, [pc, #8]	; (80a02f4 <hal_i2c_flush+0xc>)
 80a02ec:	681b      	ldr	r3, [r3, #0]
 80a02ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a02f0:	9301      	str	r3, [sp, #4]
 80a02f2:	bd08      	pop	{r3, pc}
 80a02f4:	080601ac 	.word	0x080601ac

080a02f8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a02f8:	b508      	push	{r3, lr}
 80a02fa:	4b02      	ldr	r3, [pc, #8]	; (80a0304 <hal_i2c_is_enabled+0xc>)
 80a02fc:	681b      	ldr	r3, [r3, #0]
 80a02fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0300:	9301      	str	r3, [sp, #4]
 80a0302:	bd08      	pop	{r3, pc}
 80a0304:	080601ac 	.word	0x080601ac

080a0308 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a0308:	b508      	push	{r3, lr}
 80a030a:	4b03      	ldr	r3, [pc, #12]	; (80a0318 <hal_i2c_init+0x10>)
 80a030c:	681b      	ldr	r3, [r3, #0]
 80a030e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0312:	9301      	str	r3, [sp, #4]
 80a0314:	bd08      	pop	{r3, pc}
 80a0316:	0000      	.short	0x0000
 80a0318:	080601ac 	.word	0x080601ac

080a031c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a031c:	b508      	push	{r3, lr}
 80a031e:	4b02      	ldr	r3, [pc, #8]	; (80a0328 <hal_spi_init+0xc>)
 80a0320:	681b      	ldr	r3, [r3, #0]
 80a0322:	69db      	ldr	r3, [r3, #28]
 80a0324:	9301      	str	r3, [sp, #4]
 80a0326:	bd08      	pop	{r3, pc}
 80a0328:	080601b4 	.word	0x080601b4

080a032c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a032c:	b508      	push	{r3, lr}
 80a032e:	4b02      	ldr	r3, [pc, #8]	; (80a0338 <hal_spi_is_enabled+0xc>)
 80a0330:	681b      	ldr	r3, [r3, #0]
 80a0332:	6a1b      	ldr	r3, [r3, #32]
 80a0334:	9301      	str	r3, [sp, #4]
 80a0336:	bd08      	pop	{r3, pc}
 80a0338:	080601b4 	.word	0x080601b4

080a033c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a033c:	b508      	push	{r3, lr}
 80a033e:	4b02      	ldr	r3, [pc, #8]	; (80a0348 <HAL_USB_USART_Init+0xc>)
 80a0340:	681b      	ldr	r3, [r3, #0]
 80a0342:	681b      	ldr	r3, [r3, #0]
 80a0344:	9301      	str	r3, [sp, #4]
 80a0346:	bd08      	pop	{r3, pc}
 80a0348:	080601d8 	.word	0x080601d8

080a034c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a034c:	b508      	push	{r3, lr}
 80a034e:	4b02      	ldr	r3, [pc, #8]	; (80a0358 <HAL_USB_USART_Available_Data+0xc>)
 80a0350:	681b      	ldr	r3, [r3, #0]
 80a0352:	691b      	ldr	r3, [r3, #16]
 80a0354:	9301      	str	r3, [sp, #4]
 80a0356:	bd08      	pop	{r3, pc}
 80a0358:	080601d8 	.word	0x080601d8

080a035c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a035c:	b508      	push	{r3, lr}
 80a035e:	4b02      	ldr	r3, [pc, #8]	; (80a0368 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0360:	681b      	ldr	r3, [r3, #0]
 80a0362:	695b      	ldr	r3, [r3, #20]
 80a0364:	9301      	str	r3, [sp, #4]
 80a0366:	bd08      	pop	{r3, pc}
 80a0368:	080601d8 	.word	0x080601d8

080a036c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a036c:	b508      	push	{r3, lr}
 80a036e:	4b02      	ldr	r3, [pc, #8]	; (80a0378 <HAL_USB_USART_Receive_Data+0xc>)
 80a0370:	681b      	ldr	r3, [r3, #0]
 80a0372:	699b      	ldr	r3, [r3, #24]
 80a0374:	9301      	str	r3, [sp, #4]
 80a0376:	bd08      	pop	{r3, pc}
 80a0378:	080601d8 	.word	0x080601d8

080a037c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a037c:	b508      	push	{r3, lr}
 80a037e:	4b02      	ldr	r3, [pc, #8]	; (80a0388 <HAL_USB_USART_Send_Data+0xc>)
 80a0380:	681b      	ldr	r3, [r3, #0]
 80a0382:	69db      	ldr	r3, [r3, #28]
 80a0384:	9301      	str	r3, [sp, #4]
 80a0386:	bd08      	pop	{r3, pc}
 80a0388:	080601d8 	.word	0x080601d8

080a038c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a038c:	b508      	push	{r3, lr}
 80a038e:	4b02      	ldr	r3, [pc, #8]	; (80a0398 <HAL_USB_USART_Flush_Data+0xc>)
 80a0390:	681b      	ldr	r3, [r3, #0]
 80a0392:	6a1b      	ldr	r3, [r3, #32]
 80a0394:	9301      	str	r3, [sp, #4]
 80a0396:	bd08      	pop	{r3, pc}
 80a0398:	080601d8 	.word	0x080601d8

080a039c <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a039c:	b508      	push	{r3, lr}
 80a039e:	4b02      	ldr	r3, [pc, #8]	; (80a03a8 <inet_gethostbyname+0xc>)
 80a03a0:	681b      	ldr	r3, [r3, #0]
 80a03a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a03a4:	9301      	str	r3, [sp, #4]
 80a03a6:	bd08      	pop	{r3, pc}
 80a03a8:	080601c0 	.word	0x080601c0

080a03ac <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a03ac:	b508      	push	{r3, lr}
 80a03ae:	4b02      	ldr	r3, [pc, #8]	; (80a03b8 <set_system_mode+0xc>)
 80a03b0:	681b      	ldr	r3, [r3, #0]
 80a03b2:	685b      	ldr	r3, [r3, #4]
 80a03b4:	9301      	str	r3, [sp, #4]
 80a03b6:	bd08      	pop	{r3, pc}
 80a03b8:	080601a4 	.word	0x080601a4

080a03bc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a03bc:	b508      	push	{r3, lr}
 80a03be:	4b02      	ldr	r3, [pc, #8]	; (80a03c8 <system_delay_ms+0xc>)
 80a03c0:	681b      	ldr	r3, [r3, #0]
 80a03c2:	695b      	ldr	r3, [r3, #20]
 80a03c4:	9301      	str	r3, [sp, #4]
 80a03c6:	bd08      	pop	{r3, pc}
 80a03c8:	080601a4 	.word	0x080601a4

080a03cc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a03cc:	b508      	push	{r3, lr}
 80a03ce:	4b03      	ldr	r3, [pc, #12]	; (80a03dc <system_ctrl_set_app_request_handler+0x10>)
 80a03d0:	681b      	ldr	r3, [r3, #0]
 80a03d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a03d6:	9301      	str	r3, [sp, #4]
 80a03d8:	bd08      	pop	{r3, pc}
 80a03da:	0000      	.short	0x0000
 80a03dc:	080601a4 	.word	0x080601a4

080a03e0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a03e0:	b508      	push	{r3, lr}
 80a03e2:	4b03      	ldr	r3, [pc, #12]	; (80a03f0 <system_ctrl_set_result+0x10>)
 80a03e4:	681b      	ldr	r3, [r3, #0]
 80a03e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a03ea:	9301      	str	r3, [sp, #4]
 80a03ec:	bd08      	pop	{r3, pc}
 80a03ee:	0000      	.short	0x0000
 80a03f0:	080601a4 	.word	0x080601a4

080a03f4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a03f4:	b508      	push	{r3, lr}
 80a03f6:	4b02      	ldr	r3, [pc, #8]	; (80a0400 <network_connect+0xc>)
 80a03f8:	681b      	ldr	r3, [r3, #0]
 80a03fa:	685b      	ldr	r3, [r3, #4]
 80a03fc:	9301      	str	r3, [sp, #4]
 80a03fe:	bd08      	pop	{r3, pc}
 80a0400:	080601c8 	.word	0x080601c8

080a0404 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0404:	b508      	push	{r3, lr}
 80a0406:	4b02      	ldr	r3, [pc, #8]	; (80a0410 <network_connecting+0xc>)
 80a0408:	681b      	ldr	r3, [r3, #0]
 80a040a:	689b      	ldr	r3, [r3, #8]
 80a040c:	9301      	str	r3, [sp, #4]
 80a040e:	bd08      	pop	{r3, pc}
 80a0410:	080601c8 	.word	0x080601c8

080a0414 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0414:	b508      	push	{r3, lr}
 80a0416:	4b02      	ldr	r3, [pc, #8]	; (80a0420 <network_disconnect+0xc>)
 80a0418:	681b      	ldr	r3, [r3, #0]
 80a041a:	68db      	ldr	r3, [r3, #12]
 80a041c:	9301      	str	r3, [sp, #4]
 80a041e:	bd08      	pop	{r3, pc}
 80a0420:	080601c8 	.word	0x080601c8

080a0424 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0424:	b508      	push	{r3, lr}
 80a0426:	4b02      	ldr	r3, [pc, #8]	; (80a0430 <network_ready+0xc>)
 80a0428:	681b      	ldr	r3, [r3, #0]
 80a042a:	691b      	ldr	r3, [r3, #16]
 80a042c:	9301      	str	r3, [sp, #4]
 80a042e:	bd08      	pop	{r3, pc}
 80a0430:	080601c8 	.word	0x080601c8

080a0434 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0434:	b508      	push	{r3, lr}
 80a0436:	4b02      	ldr	r3, [pc, #8]	; (80a0440 <network_on+0xc>)
 80a0438:	681b      	ldr	r3, [r3, #0]
 80a043a:	695b      	ldr	r3, [r3, #20]
 80a043c:	9301      	str	r3, [sp, #4]
 80a043e:	bd08      	pop	{r3, pc}
 80a0440:	080601c8 	.word	0x080601c8

080a0444 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0444:	b508      	push	{r3, lr}
 80a0446:	4b02      	ldr	r3, [pc, #8]	; (80a0450 <network_off+0xc>)
 80a0448:	681b      	ldr	r3, [r3, #0]
 80a044a:	699b      	ldr	r3, [r3, #24]
 80a044c:	9301      	str	r3, [sp, #4]
 80a044e:	bd08      	pop	{r3, pc}
 80a0450:	080601c8 	.word	0x080601c8

080a0454 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0454:	b508      	push	{r3, lr}
 80a0456:	4b02      	ldr	r3, [pc, #8]	; (80a0460 <network_listen+0xc>)
 80a0458:	681b      	ldr	r3, [r3, #0]
 80a045a:	69db      	ldr	r3, [r3, #28]
 80a045c:	9301      	str	r3, [sp, #4]
 80a045e:	bd08      	pop	{r3, pc}
 80a0460:	080601c8 	.word	0x080601c8

080a0464 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0464:	b508      	push	{r3, lr}
 80a0466:	4b02      	ldr	r3, [pc, #8]	; (80a0470 <network_listening+0xc>)
 80a0468:	681b      	ldr	r3, [r3, #0]
 80a046a:	6a1b      	ldr	r3, [r3, #32]
 80a046c:	9301      	str	r3, [sp, #4]
 80a046e:	bd08      	pop	{r3, pc}
 80a0470:	080601c8 	.word	0x080601c8

080a0474 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0474:	b508      	push	{r3, lr}
 80a0476:	4b02      	ldr	r3, [pc, #8]	; (80a0480 <network_set_listen_timeout+0xc>)
 80a0478:	681b      	ldr	r3, [r3, #0]
 80a047a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a047c:	9301      	str	r3, [sp, #4]
 80a047e:	bd08      	pop	{r3, pc}
 80a0480:	080601c8 	.word	0x080601c8

080a0484 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0484:	b508      	push	{r3, lr}
 80a0486:	4b02      	ldr	r3, [pc, #8]	; (80a0490 <network_get_listen_timeout+0xc>)
 80a0488:	681b      	ldr	r3, [r3, #0]
 80a048a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a048c:	9301      	str	r3, [sp, #4]
 80a048e:	bd08      	pop	{r3, pc}
 80a0490:	080601c8 	.word	0x080601c8

080a0494 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a0494:	b508      	push	{r3, lr}
 80a0496:	4b02      	ldr	r3, [pc, #8]	; (80a04a0 <network_is_on+0xc>)
 80a0498:	681b      	ldr	r3, [r3, #0]
 80a049a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a049c:	9301      	str	r3, [sp, #4]
 80a049e:	bd08      	pop	{r3, pc}
 80a04a0:	080601c8 	.word	0x080601c8

080a04a4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a04a4:	b508      	push	{r3, lr}
 80a04a6:	4b02      	ldr	r3, [pc, #8]	; (80a04b0 <network_is_off+0xc>)
 80a04a8:	681b      	ldr	r3, [r3, #0]
 80a04aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a04ac:	9301      	str	r3, [sp, #4]
 80a04ae:	bd08      	pop	{r3, pc}
 80a04b0:	080601c8 	.word	0x080601c8

080a04b4 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a04b4:	b508      	push	{r3, lr}
 80a04b6:	4b02      	ldr	r3, [pc, #8]	; (80a04c0 <spark_variable+0xc>)
 80a04b8:	681b      	ldr	r3, [r3, #0]
 80a04ba:	681b      	ldr	r3, [r3, #0]
 80a04bc:	9301      	str	r3, [sp, #4]
 80a04be:	bd08      	pop	{r3, pc}
 80a04c0:	080601cc 	.word	0x080601cc

080a04c4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a04c4:	b508      	push	{r3, lr}
 80a04c6:	4b02      	ldr	r3, [pc, #8]	; (80a04d0 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a04c8:	681b      	ldr	r3, [r3, #0]
 80a04ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a04cc:	9301      	str	r3, [sp, #4]
 80a04ce:	bd08      	pop	{r3, pc}
 80a04d0:	080601cc 	.word	0x080601cc

080a04d4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a04d4:	b508      	push	{r3, lr}
 80a04d6:	4b02      	ldr	r3, [pc, #8]	; (80a04e0 <malloc+0xc>)
 80a04d8:	681b      	ldr	r3, [r3, #0]
 80a04da:	681b      	ldr	r3, [r3, #0]
 80a04dc:	9301      	str	r3, [sp, #4]
 80a04de:	bd08      	pop	{r3, pc}
 80a04e0:	080601a0 	.word	0x080601a0

080a04e4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a04e4:	b508      	push	{r3, lr}
 80a04e6:	4b02      	ldr	r3, [pc, #8]	; (80a04f0 <free+0xc>)
 80a04e8:	681b      	ldr	r3, [r3, #0]
 80a04ea:	685b      	ldr	r3, [r3, #4]
 80a04ec:	9301      	str	r3, [sp, #4]
 80a04ee:	bd08      	pop	{r3, pc}
 80a04f0:	080601a0 	.word	0x080601a0

080a04f4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a04f4:	b508      	push	{r3, lr}
 80a04f6:	4b02      	ldr	r3, [pc, #8]	; (80a0500 <realloc+0xc>)
 80a04f8:	681b      	ldr	r3, [r3, #0]
 80a04fa:	689b      	ldr	r3, [r3, #8]
 80a04fc:	9301      	str	r3, [sp, #4]
 80a04fe:	bd08      	pop	{r3, pc}
 80a0500:	080601a0 	.word	0x080601a0

080a0504 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a0504:	b508      	push	{r3, lr}
 80a0506:	4b02      	ldr	r3, [pc, #8]	; (80a0510 <newlib_impure_ptr_callback+0xc>)
 80a0508:	681b      	ldr	r3, [r3, #0]
 80a050a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a050c:	9301      	str	r3, [sp, #4]
 80a050e:	bd08      	pop	{r3, pc}
 80a0510:	080601a0 	.word	0x080601a0

080a0514 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a0514:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a0516:	2600      	movs	r6, #0
 80a0518:	4604      	mov	r4, r0
 80a051a:	460d      	mov	r5, r1
 80a051c:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a0520:	f7ff fe72 	bl	80a0208 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a0524:	4628      	mov	r0, r5
    _spi = spi;
 80a0526:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a0528:	f7ff fef8 	bl	80a031c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a052c:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a052e:	6066      	str	r6, [r4, #4]
}
 80a0530:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0534 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0534:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a0536:	2000      	movs	r0, #0
 80a0538:	4b04      	ldr	r3, [pc, #16]	; (80a054c <_GLOBAL__sub_I_System+0x18>)
 80a053a:	601a      	str	r2, [r3, #0]
 80a053c:	4b04      	ldr	r3, [pc, #16]	; (80a0550 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a053e:	4a05      	ldr	r2, [pc, #20]	; (80a0554 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a0540:	6018      	str	r0, [r3, #0]
 80a0542:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 80a0544:	7198      	strb	r0, [r3, #6]
 80a0546:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0548:	f7ff bf30 	b.w	80a03ac <set_system_mode>
 80a054c:	2000009c 	.word	0x2000009c
 80a0550:	20000090 	.word	0x20000090
 80a0554:	ffff0000 	.word	0xffff0000

080a0558 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a0558:	b510      	push	{r4, lr}
 80a055a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a055c:	6800      	ldr	r0, [r0, #0]
 80a055e:	b108      	cbz	r0, 80a0564 <_ZN6String10invalidateEv+0xc>
 80a0560:	f7ff ffc0 	bl	80a04e4 <free>
	buffer = NULL;
 80a0564:	2300      	movs	r3, #0
	capacity = len = 0;
 80a0566:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a056a:	6023      	str	r3, [r4, #0]
}
 80a056c:	bd10      	pop	{r4, pc}

080a056e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a056e:	b538      	push	{r3, r4, r5, lr}
 80a0570:	4604      	mov	r4, r0
 80a0572:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0574:	6800      	ldr	r0, [r0, #0]
 80a0576:	3101      	adds	r1, #1
 80a0578:	f7ff ffbc 	bl	80a04f4 <realloc>
	if (newbuffer) {
 80a057c:	b110      	cbz	r0, 80a0584 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a057e:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a0582:	2001      	movs	r0, #1
	}
	return 0;
}
 80a0584:	bd38      	pop	{r3, r4, r5, pc}

080a0586 <_ZN6String7reserveEj>:
{
 80a0586:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a0588:	6803      	ldr	r3, [r0, #0]
{
 80a058a:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a058c:	b123      	cbz	r3, 80a0598 <_ZN6String7reserveEj+0x12>
 80a058e:	6843      	ldr	r3, [r0, #4]
 80a0590:	428b      	cmp	r3, r1
 80a0592:	d301      	bcc.n	80a0598 <_ZN6String7reserveEj+0x12>
 80a0594:	2001      	movs	r0, #1
}
 80a0596:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a0598:	4620      	mov	r0, r4
 80a059a:	f7ff ffe8 	bl	80a056e <_ZN6String12changeBufferEj>
 80a059e:	2800      	cmp	r0, #0
 80a05a0:	d0f9      	beq.n	80a0596 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a05a2:	68a3      	ldr	r3, [r4, #8]
 80a05a4:	2b00      	cmp	r3, #0
 80a05a6:	d1f5      	bne.n	80a0594 <_ZN6String7reserveEj+0xe>
 80a05a8:	6822      	ldr	r2, [r4, #0]
 80a05aa:	7013      	strb	r3, [r2, #0]
 80a05ac:	e7f2      	b.n	80a0594 <_ZN6String7reserveEj+0xe>

080a05ae <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a05ae:	b570      	push	{r4, r5, r6, lr}
 80a05b0:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a05b2:	4611      	mov	r1, r2
{
 80a05b4:	4604      	mov	r4, r0
 80a05b6:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a05b8:	f7ff ffe5 	bl	80a0586 <_ZN6String7reserveEj>
 80a05bc:	b920      	cbnz	r0, 80a05c8 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a05be:	4620      	mov	r0, r4
 80a05c0:	f7ff ffca 	bl	80a0558 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a05c4:	4620      	mov	r0, r4
 80a05c6:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a05c8:	462a      	mov	r2, r5
 80a05ca:	4631      	mov	r1, r6
 80a05cc:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a05ce:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a05d0:	f001 f86c 	bl	80a16ac <memcpy>
	buffer[len] = 0;
 80a05d4:	2100      	movs	r1, #0
 80a05d6:	6822      	ldr	r2, [r4, #0]
 80a05d8:	68a3      	ldr	r3, [r4, #8]
 80a05da:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a05dc:	e7f2      	b.n	80a05c4 <_ZN6String4copyEPKcj+0x16>

080a05de <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a05de:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a05e0:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a05e2:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a05e4:	460d      	mov	r5, r1
	capacity = 0;
 80a05e6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a05ea:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a05ec:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a05ee:	b139      	cbz	r1, 80a0600 <_ZN6StringC1EPKc+0x22>
 80a05f0:	4608      	mov	r0, r1
 80a05f2:	f001 f895 	bl	80a1720 <strlen>
 80a05f6:	4629      	mov	r1, r5
 80a05f8:	4602      	mov	r2, r0
 80a05fa:	4620      	mov	r0, r4
 80a05fc:	f7ff ffd7 	bl	80a05ae <_ZN6String4copyEPKcj>
}
 80a0600:	4620      	mov	r0, r4
 80a0602:	bd38      	pop	{r3, r4, r5, pc}

080a0604 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0606:	4606      	mov	r6, r0
 80a0608:	460d      	mov	r5, r1
  size_t n = 0;
 80a060a:	2400      	movs	r4, #0
 80a060c:	188f      	adds	r7, r1, r2
  while (size--) {
 80a060e:	42bd      	cmp	r5, r7
 80a0610:	d00c      	beq.n	80a062c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0612:	6833      	ldr	r3, [r6, #0]
 80a0614:	4630      	mov	r0, r6
 80a0616:	689b      	ldr	r3, [r3, #8]
 80a0618:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a061c:	4798      	blx	r3
     if (chunk>=0)
 80a061e:	1e03      	subs	r3, r0, #0
 80a0620:	db01      	blt.n	80a0626 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0622:	441c      	add	r4, r3
  while (size--) {
 80a0624:	e7f3      	b.n	80a060e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0626:	2c00      	cmp	r4, #0
 80a0628:	bf08      	it	eq
 80a062a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a062c:	4620      	mov	r0, r4
 80a062e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0630 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0630:	b570      	push	{r4, r5, r6, lr}
 80a0632:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0634:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0636:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a0638:	b149      	cbz	r1, 80a064e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a063a:	f001 f871 	bl	80a1720 <strlen>
 80a063e:	682b      	ldr	r3, [r5, #0]
 80a0640:	4602      	mov	r2, r0
 80a0642:	4621      	mov	r1, r4
 80a0644:	4628      	mov	r0, r5
    }
 80a0646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a064a:	68db      	ldr	r3, [r3, #12]
 80a064c:	4718      	bx	r3
    }
 80a064e:	bd70      	pop	{r4, r5, r6, pc}

080a0650 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0650:	6803      	ldr	r3, [r0, #0]
 80a0652:	689b      	ldr	r3, [r3, #8]
 80a0654:	4718      	bx	r3

080a0656 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0656:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0658:	2a01      	cmp	r2, #1
 80a065a:	bf98      	it	ls
 80a065c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a065e:	b530      	push	{r4, r5, lr}
 80a0660:	b08b      	sub	sp, #44	; 0x2c
 80a0662:	460c      	mov	r4, r1
  *str = '\0';
 80a0664:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a0668:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a066a:	4625      	mov	r5, r4
 80a066c:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a0670:	fb04 5312 	mls	r3, r4, r2, r5
 80a0674:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0676:	2b09      	cmp	r3, #9
 80a0678:	bf94      	ite	ls
 80a067a:	3330      	addls	r3, #48	; 0x30
 80a067c:	3337      	addhi	r3, #55	; 0x37
 80a067e:	b2db      	uxtb	r3, r3
  } while(n);
 80a0680:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0682:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a0686:	d9f0      	bls.n	80a066a <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a0688:	f7ff ffd2 	bl	80a0630 <_ZN5Print5writeEPKc>
}
 80a068c:	b00b      	add	sp, #44	; 0x2c
 80a068e:	bd30      	pop	{r4, r5, pc}

080a0690 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0690:	2300      	movs	r3, #0
 80a0692:	6840      	ldr	r0, [r0, #4]
 80a0694:	461a      	mov	r2, r3
 80a0696:	4619      	mov	r1, r3
 80a0698:	f7ff becc 	b.w	80a0434 <network_on>

080a069c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a069c:	4b01      	ldr	r3, [pc, #4]	; (80a06a4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a069e:	4a02      	ldr	r2, [pc, #8]	; (80a06a8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a06a0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a06a2:	4770      	bx	lr
 80a06a4:	200000a0 	.word	0x200000a0
 80a06a8:	080a1849 	.word	0x080a1849

080a06ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a06ac:	4b02      	ldr	r3, [pc, #8]	; (80a06b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a06ae:	681a      	ldr	r2, [r3, #0]
 80a06b0:	4b02      	ldr	r3, [pc, #8]	; (80a06bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a06b2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a06b4:	4770      	bx	lr
 80a06b6:	bf00      	nop
 80a06b8:	20000004 	.word	0x20000004
 80a06bc:	200000a4 	.word	0x200000a4

080a06c0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a06c0:	2100      	movs	r1, #0
 80a06c2:	f7ff be7b 	b.w	80a03bc <system_delay_ms>
	...

080a06c8 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a06c8:	2200      	movs	r2, #0
 80a06ca:	4b01      	ldr	r3, [pc, #4]	; (80a06d0 <_GLOBAL__sub_I_RGB+0x8>)
 80a06cc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a06ce:	4770      	bx	lr
 80a06d0:	200000a8 	.word	0x200000a8

080a06d4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a06d4:	4b01      	ldr	r3, [pc, #4]	; (80a06dc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a06d6:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a06d8:	4770      	bx	lr
 80a06da:	bf00      	nop
 80a06dc:	20000008 	.word	0x20000008

080a06e0 <serialEventRun>:
{
 80a06e0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a06e2:	4b13      	ldr	r3, [pc, #76]	; (80a0730 <serialEventRun+0x50>)
 80a06e4:	b143      	cbz	r3, 80a06f8 <serialEventRun+0x18>
 80a06e6:	f000 f971 	bl	80a09cc <_Z16_fetch_usbserialv>
 80a06ea:	6803      	ldr	r3, [r0, #0]
 80a06ec:	691b      	ldr	r3, [r3, #16]
 80a06ee:	4798      	blx	r3
 80a06f0:	2800      	cmp	r0, #0
 80a06f2:	dd01      	ble.n	80a06f8 <serialEventRun+0x18>
        serialEvent();
 80a06f4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a06f8:	4b0e      	ldr	r3, [pc, #56]	; (80a0734 <serialEventRun+0x54>)
 80a06fa:	b143      	cbz	r3, 80a070e <serialEventRun+0x2e>
 80a06fc:	f000 fa16 	bl	80a0b2c <_Z22__fetch_global_Serial1v>
 80a0700:	6803      	ldr	r3, [r0, #0]
 80a0702:	691b      	ldr	r3, [r3, #16]
 80a0704:	4798      	blx	r3
 80a0706:	2800      	cmp	r0, #0
 80a0708:	dd01      	ble.n	80a070e <serialEventRun+0x2e>
        serialEvent1();
 80a070a:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a070e:	4b0a      	ldr	r3, [pc, #40]	; (80a0738 <serialEventRun+0x58>)
 80a0710:	b10b      	cbz	r3, 80a0716 <serialEventRun+0x36>
 80a0712:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0716:	4b09      	ldr	r3, [pc, #36]	; (80a073c <serialEventRun+0x5c>)
 80a0718:	b143      	cbz	r3, 80a072c <serialEventRun+0x4c>
 80a071a:	f000 f991 	bl	80a0a40 <_Z17_fetch_usbserial1v>
 80a071e:	6803      	ldr	r3, [r0, #0]
 80a0720:	691b      	ldr	r3, [r3, #16]
 80a0722:	4798      	blx	r3
 80a0724:	2800      	cmp	r0, #0
 80a0726:	dd01      	ble.n	80a072c <serialEventRun+0x4c>
        usbSerialEvent1();
 80a0728:	f3af 8000 	nop.w
}
 80a072c:	bd08      	pop	{r3, pc}
 80a072e:	bf00      	nop
	...

080a0740 <_post_loop>:
{
 80a0740:	b508      	push	{r3, lr}
	serialEventRun();
 80a0742:	f7ff ffcd 	bl	80a06e0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0746:	f7ff fd57 	bl	80a01f8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a074a:	4b01      	ldr	r3, [pc, #4]	; (80a0750 <_post_loop+0x10>)
 80a074c:	6018      	str	r0, [r3, #0]
}
 80a074e:	bd08      	pop	{r3, pc}
 80a0750:	20000534 	.word	0x20000534

080a0754 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0754:	4805      	ldr	r0, [pc, #20]	; (80a076c <_Z33system_initialize_user_backup_ramv+0x18>)
 80a0756:	4a06      	ldr	r2, [pc, #24]	; (80a0770 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a0758:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a075a:	1a12      	subs	r2, r2, r0
 80a075c:	4905      	ldr	r1, [pc, #20]	; (80a0774 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a075e:	f000 ffa5 	bl	80a16ac <memcpy>
    __backup_sram_signature = signature;
 80a0762:	4b05      	ldr	r3, [pc, #20]	; (80a0778 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a0764:	4a05      	ldr	r2, [pc, #20]	; (80a077c <_Z33system_initialize_user_backup_ramv+0x28>)
 80a0766:	601a      	str	r2, [r3, #0]
}
 80a0768:	bd08      	pop	{r3, pc}
 80a076a:	bf00      	nop
 80a076c:	40024000 	.word	0x40024000
 80a0770:	40024004 	.word	0x40024004
 80a0774:	080a19b0 	.word	0x080a19b0
 80a0778:	40024000 	.word	0x40024000
 80a077c:	9a271c1e 	.word	0x9a271c1e

080a0780 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0780:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0782:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0784:	461a      	mov	r2, r3
 80a0786:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a078a:	9300      	str	r3, [sp, #0]
 80a078c:	f7ff fe28 	bl	80a03e0 <system_ctrl_set_result>
}
 80a0790:	b003      	add	sp, #12
 80a0792:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0798 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a0798:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a079a:	8843      	ldrh	r3, [r0, #2]
 80a079c:	2b0a      	cmp	r3, #10
 80a079e:	d008      	beq.n	80a07b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a07a0:	2b50      	cmp	r3, #80	; 0x50
 80a07a2:	d10b      	bne.n	80a07bc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a07a4:	4b09      	ldr	r3, [pc, #36]	; (80a07cc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a07a6:	681b      	ldr	r3, [r3, #0]
 80a07a8:	b14b      	cbz	r3, 80a07be <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a07aa:	b003      	add	sp, #12
 80a07ac:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a07b0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a07b2:	f7ff ffe5 	bl	80a0780 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a07b6:	b003      	add	sp, #12
 80a07b8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a07bc:	2300      	movs	r3, #0
 80a07be:	461a      	mov	r2, r3
 80a07c0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a07c4:	9300      	str	r3, [sp, #0]
 80a07c6:	f7ff fe0b 	bl	80a03e0 <system_ctrl_set_result>
}
 80a07ca:	e7f4      	b.n	80a07b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a07cc:	200000bc 	.word	0x200000bc

080a07d0 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a07d0:	2100      	movs	r1, #0
{
 80a07d2:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a07d4:	4811      	ldr	r0, [pc, #68]	; (80a081c <module_user_init_hook+0x4c>)
 80a07d6:	f7ff fe95 	bl	80a0504 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a07da:	4b11      	ldr	r3, [pc, #68]	; (80a0820 <module_user_init_hook+0x50>)
 80a07dc:	681a      	ldr	r2, [r3, #0]
 80a07de:	4b11      	ldr	r3, [pc, #68]	; (80a0824 <module_user_init_hook+0x54>)
 80a07e0:	429a      	cmp	r2, r3
 80a07e2:	bf0c      	ite	eq
 80a07e4:	2201      	moveq	r2, #1
 80a07e6:	2200      	movne	r2, #0
 80a07e8:	4b0f      	ldr	r3, [pc, #60]	; (80a0828 <module_user_init_hook+0x58>)
 80a07ea:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a07ec:	d001      	beq.n	80a07f2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a07ee:	f7ff ffb1 	bl	80a0754 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a07f2:	f7ff fcf9 	bl	80a01e8 <HAL_RNG_GetRandomNumber>
 80a07f6:	4604      	mov	r4, r0
    srand(seed);
 80a07f8:	f000 ff6e 	bl	80a16d8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a07fc:	4b0b      	ldr	r3, [pc, #44]	; (80a082c <module_user_init_hook+0x5c>)
 80a07fe:	b113      	cbz	r3, 80a0806 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a0800:	4620      	mov	r0, r4
 80a0802:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0806:	2100      	movs	r1, #0
 80a0808:	4808      	ldr	r0, [pc, #32]	; (80a082c <module_user_init_hook+0x5c>)
 80a080a:	f7ff fe5b 	bl	80a04c4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a080e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0812:	2100      	movs	r1, #0
 80a0814:	4806      	ldr	r0, [pc, #24]	; (80a0830 <module_user_init_hook+0x60>)
 80a0816:	f7ff bdd9 	b.w	80a03cc <system_ctrl_set_app_request_handler>
 80a081a:	bf00      	nop
 80a081c:	080a06d5 	.word	0x080a06d5
 80a0820:	40024000 	.word	0x40024000
 80a0824:	9a271c1e 	.word	0x9a271c1e
 80a0828:	200000b8 	.word	0x200000b8
 80a082c:	00000000 	.word	0x00000000
 80a0830:	080a0799 	.word	0x080a0799

080a0834 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0834:	4770      	bx	lr

080a0836 <_ZN9IPAddressD0Ev>:
 80a0836:	b510      	push	{r4, lr}
 80a0838:	4604      	mov	r4, r0
 80a083a:	2118      	movs	r1, #24
 80a083c:	f000 fb5e 	bl	80a0efc <_ZdlPvj>
 80a0840:	4620      	mov	r0, r4
 80a0842:	bd10      	pop	{r4, pc}

080a0844 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0846:	460e      	mov	r6, r1
 80a0848:	2400      	movs	r4, #0
 80a084a:	f100 0708 	add.w	r7, r0, #8
 80a084e:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0850:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a0854:	220a      	movs	r2, #10
 80a0856:	4630      	mov	r0, r6
 80a0858:	f7ff fefd 	bl	80a0656 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a085c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a085e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a0860:	d101      	bne.n	80a0866 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a0862:	4620      	mov	r0, r4
 80a0864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a0866:	2c00      	cmp	r4, #0
 80a0868:	d0f2      	beq.n	80a0850 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a086a:	212e      	movs	r1, #46	; 0x2e
 80a086c:	4630      	mov	r0, r6
 80a086e:	f7ff feef 	bl	80a0650 <_ZN5Print5printEc>
 80a0872:	4404      	add	r4, r0
 80a0874:	e7ec      	b.n	80a0850 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a0878 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a0878:	b510      	push	{r4, lr}
 80a087a:	4604      	mov	r4, r0
 80a087c:	4b04      	ldr	r3, [pc, #16]	; (80a0890 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a087e:	2211      	movs	r2, #17
 80a0880:	2100      	movs	r1, #0
 80a0882:	f840 3b04 	str.w	r3, [r0], #4
 80a0886:	f000 ff1f 	bl	80a16c8 <memset>
}
 80a088a:	4620      	mov	r0, r4
 80a088c:	bd10      	pop	{r4, pc}
 80a088e:	bf00      	nop
 80a0890:	080a1874 	.word	0x080a1874

080a0894 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0894:	4603      	mov	r3, r0
 80a0896:	4a07      	ldr	r2, [pc, #28]	; (80a08b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0898:	b510      	push	{r4, lr}
 80a089a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a089e:	f101 0210 	add.w	r2, r1, #16
 80a08a2:	f851 4b04 	ldr.w	r4, [r1], #4
 80a08a6:	4291      	cmp	r1, r2
 80a08a8:	f843 4b04 	str.w	r4, [r3], #4
 80a08ac:	d1f9      	bne.n	80a08a2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a08ae:	780a      	ldrb	r2, [r1, #0]
 80a08b0:	701a      	strb	r2, [r3, #0]
}
 80a08b2:	bd10      	pop	{r4, pc}
 80a08b4:	080a1874 	.word	0x080a1874

080a08b8 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a08b8:	4a02      	ldr	r2, [pc, #8]	; (80a08c4 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a08ba:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a08be:	2204      	movs	r2, #4
 80a08c0:	7502      	strb	r2, [r0, #20]
}
 80a08c2:	4770      	bx	lr
 80a08c4:	080a1874 	.word	0x080a1874

080a08c8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a08c8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a08ca:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a08ce:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a08d2:	2304      	movs	r3, #4
 80a08d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a08d8:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a08dc:	6044      	str	r4, [r0, #4]
 80a08de:	7503      	strb	r3, [r0, #20]
}
 80a08e0:	bd10      	pop	{r4, pc}
	...

080a08e4 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a08e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a08e6:	4d04      	ldr	r5, [pc, #16]	; (80a08f8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a08e8:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a08ea:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a08ee:	9500      	str	r5, [sp, #0]
 80a08f0:	f7ff ffea 	bl	80a08c8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a08f4:	b003      	add	sp, #12
 80a08f6:	bd30      	pop	{r4, r5, pc}
 80a08f8:	080a1874 	.word	0x080a1874

080a08fc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a08fc:	7441      	strb	r1, [r0, #17]
}
 80a08fe:	4770      	bx	lr

080a0900 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0900:	4770      	bx	lr

080a0902 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0902:	4770      	bx	lr

080a0904 <_ZN9USBSerial4readEv>:
{
 80a0904:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a0906:	2100      	movs	r1, #0
 80a0908:	7c00      	ldrb	r0, [r0, #16]
 80a090a:	f7ff fd2f 	bl	80a036c <HAL_USB_USART_Receive_Data>
}
 80a090e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0912:	bd08      	pop	{r3, pc}

080a0914 <_ZN9USBSerial4peekEv>:
{
 80a0914:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a0916:	2101      	movs	r1, #1
 80a0918:	7c00      	ldrb	r0, [r0, #16]
 80a091a:	f7ff fd27 	bl	80a036c <HAL_USB_USART_Receive_Data>
}
 80a091e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0922:	bd08      	pop	{r3, pc}

080a0924 <_ZN9USBSerial17availableForWriteEv>:
{
 80a0924:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0926:	7c00      	ldrb	r0, [r0, #16]
 80a0928:	f7ff fd18 	bl	80a035c <HAL_USB_USART_Available_Data_For_Write>
}
 80a092c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0930:	bd08      	pop	{r3, pc}

080a0932 <_ZN9USBSerial9availableEv>:
{
 80a0932:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a0934:	7c00      	ldrb	r0, [r0, #16]
 80a0936:	f7ff fd09 	bl	80a034c <HAL_USB_USART_Available_Data>
}
 80a093a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a093e:	bd08      	pop	{r3, pc}

080a0940 <_ZN9USBSerial5writeEh>:
{
 80a0940:	b538      	push	{r3, r4, r5, lr}
 80a0942:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0944:	7c00      	ldrb	r0, [r0, #16]
{
 80a0946:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0948:	f7ff fd08 	bl	80a035c <HAL_USB_USART_Available_Data_For_Write>
 80a094c:	2800      	cmp	r0, #0
 80a094e:	dc01      	bgt.n	80a0954 <_ZN9USBSerial5writeEh+0x14>
 80a0950:	7c60      	ldrb	r0, [r4, #17]
 80a0952:	b128      	cbz	r0, 80a0960 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0954:	4629      	mov	r1, r5
 80a0956:	7c20      	ldrb	r0, [r4, #16]
 80a0958:	f7ff fd10 	bl	80a037c <HAL_USB_USART_Send_Data>
 80a095c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a0960:	bd38      	pop	{r3, r4, r5, pc}

080a0962 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a0962:	7c00      	ldrb	r0, [r0, #16]
 80a0964:	f7ff bd12 	b.w	80a038c <HAL_USB_USART_Flush_Data>

080a0968 <_ZN9USBSerialD0Ev>:
 80a0968:	b510      	push	{r4, lr}
 80a096a:	4604      	mov	r4, r0
 80a096c:	2114      	movs	r1, #20
 80a096e:	f000 fac5 	bl	80a0efc <_ZdlPvj>
 80a0972:	4620      	mov	r0, r4
 80a0974:	bd10      	pop	{r4, pc}

080a0976 <__tcf_1>:
 80a0976:	4770      	bx	lr

080a0978 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0978:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a097a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a097e:	4604      	mov	r4, r0
 80a0980:	4608      	mov	r0, r1
 80a0982:	2100      	movs	r1, #0
 80a0984:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0988:	4b04      	ldr	r3, [pc, #16]	; (80a099c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a098a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a098c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a098e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a0990:	4611      	mov	r1, r2
  _blocking = true;
 80a0992:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a0994:	f7ff fcd2 	bl	80a033c <HAL_USB_USART_Init>
}
 80a0998:	4620      	mov	r0, r4
 80a099a:	bd10      	pop	{r4, pc}
 80a099c:	080a1888 	.word	0x080a1888

080a09a0 <_Z19acquireSerialBufferv>:
{
 80a09a0:	b510      	push	{r4, lr}
 80a09a2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a09a4:	2214      	movs	r2, #20
 80a09a6:	2100      	movs	r1, #0
 80a09a8:	f000 fe8e 	bl	80a16c8 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a09ac:	4b05      	ldr	r3, [pc, #20]	; (80a09c4 <_Z19acquireSerialBufferv+0x24>)
}
 80a09ae:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a09b0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a09b2:	4b05      	ldr	r3, [pc, #20]	; (80a09c8 <_Z19acquireSerialBufferv+0x28>)
 80a09b4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a09b6:	f240 1301 	movw	r3, #257	; 0x101
 80a09ba:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a09bc:	2381      	movs	r3, #129	; 0x81
 80a09be:	8223      	strh	r3, [r4, #16]
}
 80a09c0:	bd10      	pop	{r4, pc}
 80a09c2:	bf00      	nop
 80a09c4:	200000f0 	.word	0x200000f0
 80a09c8:	200001f1 	.word	0x200001f1

080a09cc <_Z16_fetch_usbserialv>:
{
 80a09cc:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a09ce:	4d0e      	ldr	r5, [pc, #56]	; (80a0a08 <_Z16_fetch_usbserialv+0x3c>)
{
 80a09d0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a09d2:	a801      	add	r0, sp, #4
 80a09d4:	f7ff ffe4 	bl	80a09a0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a09d8:	7829      	ldrb	r1, [r5, #0]
 80a09da:	f3bf 8f5b 	dmb	ish
 80a09de:	f011 0401 	ands.w	r4, r1, #1
 80a09e2:	d10e      	bne.n	80a0a02 <_Z16_fetch_usbserialv+0x36>
 80a09e4:	4628      	mov	r0, r5
 80a09e6:	f7ff fb5c 	bl	80a00a2 <__cxa_guard_acquire>
 80a09ea:	b150      	cbz	r0, 80a0a02 <_Z16_fetch_usbserialv+0x36>
 80a09ec:	4621      	mov	r1, r4
 80a09ee:	aa01      	add	r2, sp, #4
 80a09f0:	4806      	ldr	r0, [pc, #24]	; (80a0a0c <_Z16_fetch_usbserialv+0x40>)
 80a09f2:	f7ff ffc1 	bl	80a0978 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a09f6:	4628      	mov	r0, r5
 80a09f8:	f7ff fb58 	bl	80a00ac <__cxa_guard_release>
 80a09fc:	4804      	ldr	r0, [pc, #16]	; (80a0a10 <_Z16_fetch_usbserialv+0x44>)
 80a09fe:	f000 fe4f 	bl	80a16a0 <atexit>
	return _usbserial;
}
 80a0a02:	4802      	ldr	r0, [pc, #8]	; (80a0a0c <_Z16_fetch_usbserialv+0x40>)
 80a0a04:	b007      	add	sp, #28
 80a0a06:	bd30      	pop	{r4, r5, pc}
 80a0a08:	200000c0 	.word	0x200000c0
 80a0a0c:	200000c8 	.word	0x200000c8
 80a0a10:	080a0901 	.word	0x080a0901

080a0a14 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0a14:	b510      	push	{r4, lr}
 80a0a16:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0a18:	2214      	movs	r2, #20
 80a0a1a:	2100      	movs	r1, #0
 80a0a1c:	f000 fe54 	bl	80a16c8 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0a20:	4b05      	ldr	r3, [pc, #20]	; (80a0a38 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0a22:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a0a24:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0a26:	4b05      	ldr	r3, [pc, #20]	; (80a0a3c <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0a28:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0a2a:	f240 1301 	movw	r3, #257	; 0x101
 80a0a2e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0a30:	2381      	movs	r3, #129	; 0x81
 80a0a32:	8223      	strh	r3, [r4, #16]
}
 80a0a34:	bd10      	pop	{r4, pc}
 80a0a36:	bf00      	nop
 80a0a38:	20000272 	.word	0x20000272
 80a0a3c:	20000373 	.word	0x20000373

080a0a40 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0a40:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0a42:	4c0e      	ldr	r4, [pc, #56]	; (80a0a7c <_Z17_fetch_usbserial1v+0x3c>)
{
 80a0a44:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0a46:	a801      	add	r0, sp, #4
 80a0a48:	f7ff ffe4 	bl	80a0a14 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0a4c:	7823      	ldrb	r3, [r4, #0]
 80a0a4e:	f3bf 8f5b 	dmb	ish
 80a0a52:	07db      	lsls	r3, r3, #31
 80a0a54:	d40e      	bmi.n	80a0a74 <_Z17_fetch_usbserial1v+0x34>
 80a0a56:	4620      	mov	r0, r4
 80a0a58:	f7ff fb23 	bl	80a00a2 <__cxa_guard_acquire>
 80a0a5c:	b150      	cbz	r0, 80a0a74 <_Z17_fetch_usbserial1v+0x34>
 80a0a5e:	2101      	movs	r1, #1
 80a0a60:	aa01      	add	r2, sp, #4
 80a0a62:	4807      	ldr	r0, [pc, #28]	; (80a0a80 <_Z17_fetch_usbserial1v+0x40>)
 80a0a64:	f7ff ff88 	bl	80a0978 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0a68:	4620      	mov	r0, r4
 80a0a6a:	f7ff fb1f 	bl	80a00ac <__cxa_guard_release>
 80a0a6e:	4805      	ldr	r0, [pc, #20]	; (80a0a84 <_Z17_fetch_usbserial1v+0x44>)
 80a0a70:	f000 fe16 	bl	80a16a0 <atexit>
  return _usbserial1;
}
 80a0a74:	4802      	ldr	r0, [pc, #8]	; (80a0a80 <_Z17_fetch_usbserial1v+0x40>)
 80a0a76:	b006      	add	sp, #24
 80a0a78:	bd10      	pop	{r4, pc}
 80a0a7a:	bf00      	nop
 80a0a7c:	200000c4 	.word	0x200000c4
 80a0a80:	200000dc 	.word	0x200000dc
 80a0a84:	080a0977 	.word	0x080a0977

080a0a88 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a0a88:	4770      	bx	lr

080a0a8a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0a8a:	7441      	strb	r1, [r0, #17]
}
 80a0a8c:	4770      	bx	lr

080a0a8e <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0a8e:	4770      	bx	lr

080a0a90 <_ZN11USARTSerial17availableForWriteEv>:
{
 80a0a90:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a0a92:	7c00      	ldrb	r0, [r0, #16]
 80a0a94:	f7ff fc00 	bl	80a0298 <hal_usart_available_data_for_write>
}
 80a0a98:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0a9c:	bd08      	pop	{r3, pc}

080a0a9e <_ZN11USARTSerial9availableEv>:
{
 80a0a9e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a0aa0:	7c00      	ldrb	r0, [r0, #16]
 80a0aa2:	f7ff fbd1 	bl	80a0248 <hal_usart_available>
}
 80a0aa6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0aaa:	bd08      	pop	{r3, pc}

080a0aac <_ZN11USARTSerial4peekEv>:
{
 80a0aac:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a0aae:	7c00      	ldrb	r0, [r0, #16]
 80a0ab0:	f7ff fbda 	bl	80a0268 <hal_usart_peek>
}
 80a0ab4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0ab8:	bd08      	pop	{r3, pc}

080a0aba <_ZN11USARTSerial4readEv>:
{
 80a0aba:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a0abc:	7c00      	ldrb	r0, [r0, #16]
 80a0abe:	f7ff fbcb 	bl	80a0258 <hal_usart_read>
}
 80a0ac2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0ac6:	bd08      	pop	{r3, pc}

080a0ac8 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 80a0ac8:	7c00      	ldrb	r0, [r0, #16]
 80a0aca:	f7ff bbd5 	b.w	80a0278 <hal_usart_flush>

080a0ace <_ZN11USARTSerial5writeEh>:
{
 80a0ace:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0ad0:	7c46      	ldrb	r6, [r0, #17]
{
 80a0ad2:	4604      	mov	r4, r0
 80a0ad4:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0ad6:	b12e      	cbz	r6, 80a0ae4 <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 80a0ad8:	4629      	mov	r1, r5
 80a0ada:	7c20      	ldrb	r0, [r4, #16]
}
 80a0adc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a0ae0:	f7ff bbaa 	b.w	80a0238 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0ae4:	7c00      	ldrb	r0, [r0, #16]
 80a0ae6:	f7ff fbd7 	bl	80a0298 <hal_usart_available_data_for_write>
 80a0aea:	2800      	cmp	r0, #0
 80a0aec:	dcf4      	bgt.n	80a0ad8 <_ZN11USARTSerial5writeEh+0xa>
}
 80a0aee:	4630      	mov	r0, r6
 80a0af0:	bd70      	pop	{r4, r5, r6, pc}

080a0af2 <_ZN11USARTSerialD0Ev>:
 80a0af2:	b510      	push	{r4, lr}
 80a0af4:	4604      	mov	r4, r0
 80a0af6:	2114      	movs	r1, #20
 80a0af8:	f000 fa00 	bl	80a0efc <_ZdlPvj>
 80a0afc:	4620      	mov	r0, r4
 80a0afe:	bd10      	pop	{r4, pc}

080a0b00 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a0b00:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a0b04:	b510      	push	{r4, lr}
 80a0b06:	4604      	mov	r4, r0
 80a0b08:	4608      	mov	r0, r1
 80a0b0a:	4611      	mov	r1, r2
 80a0b0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0b10:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a0b14:	4a04      	ldr	r2, [pc, #16]	; (80a0b28 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a0b16:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a0b18:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a0b1a:	2201      	movs	r2, #1
 80a0b1c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a0b1e:	461a      	mov	r2, r3
 80a0b20:	f7ff fb82 	bl	80a0228 <hal_usart_init>
}
 80a0b24:	4620      	mov	r0, r4
 80a0b26:	bd10      	pop	{r4, pc}
 80a0b28:	080a18b8 	.word	0x080a18b8

080a0b2c <_Z22__fetch_global_Serial1v>:
{
 80a0b2c:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0b2e:	4d0c      	ldr	r5, [pc, #48]	; (80a0b60 <_Z22__fetch_global_Serial1v+0x34>)
 80a0b30:	7829      	ldrb	r1, [r5, #0]
 80a0b32:	f3bf 8f5b 	dmb	ish
 80a0b36:	f011 0401 	ands.w	r4, r1, #1
 80a0b3a:	d10f      	bne.n	80a0b5c <_Z22__fetch_global_Serial1v+0x30>
 80a0b3c:	4628      	mov	r0, r5
 80a0b3e:	f7ff fab0 	bl	80a00a2 <__cxa_guard_acquire>
 80a0b42:	b158      	cbz	r0, 80a0b5c <_Z22__fetch_global_Serial1v+0x30>
 80a0b44:	4621      	mov	r1, r4
 80a0b46:	4b07      	ldr	r3, [pc, #28]	; (80a0b64 <_Z22__fetch_global_Serial1v+0x38>)
 80a0b48:	4a07      	ldr	r2, [pc, #28]	; (80a0b68 <_Z22__fetch_global_Serial1v+0x3c>)
 80a0b4a:	4808      	ldr	r0, [pc, #32]	; (80a0b6c <_Z22__fetch_global_Serial1v+0x40>)
 80a0b4c:	f7ff ffd8 	bl	80a0b00 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a0b50:	4628      	mov	r0, r5
 80a0b52:	f7ff faab 	bl	80a00ac <__cxa_guard_release>
 80a0b56:	4806      	ldr	r0, [pc, #24]	; (80a0b70 <_Z22__fetch_global_Serial1v+0x44>)
 80a0b58:	f000 fda2 	bl	80a16a0 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a0b5c:	4803      	ldr	r0, [pc, #12]	; (80a0b6c <_Z22__fetch_global_Serial1v+0x40>)
 80a0b5e:	bd38      	pop	{r3, r4, r5, pc}
 80a0b60:	200003f4 	.word	0x200003f4
 80a0b64:	2000047c 	.word	0x2000047c
 80a0b68:	200003f8 	.word	0x200003f8
 80a0b6c:	20000500 	.word	0x20000500
 80a0b70:	080a0a8f 	.word	0x080a0a8f

080a0b74 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a0b74:	4770      	bx	lr

080a0b76 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0b76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0b78:	4606      	mov	r6, r0
 80a0b7a:	4615      	mov	r5, r2
 80a0b7c:	460c      	mov	r4, r1
 80a0b7e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0b80:	42bc      	cmp	r4, r7
 80a0b82:	d006      	beq.n	80a0b92 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0b84:	6833      	ldr	r3, [r6, #0]
 80a0b86:	4630      	mov	r0, r6
 80a0b88:	689b      	ldr	r3, [r3, #8]
 80a0b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0b8e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a0b90:	e7f6      	b.n	80a0b80 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a0b92:	4628      	mov	r0, r5
 80a0b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0b96 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a0b96:	2200      	movs	r2, #0
 80a0b98:	7c00      	ldrb	r0, [r0, #16]
 80a0b9a:	f7ff bb85 	b.w	80a02a8 <hal_i2c_write>

080a0b9e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a0b9e:	2100      	movs	r1, #0
 80a0ba0:	7c00      	ldrb	r0, [r0, #16]
 80a0ba2:	f7ff bb89 	b.w	80a02b8 <hal_i2c_available>

080a0ba6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a0ba6:	2100      	movs	r1, #0
 80a0ba8:	7c00      	ldrb	r0, [r0, #16]
 80a0baa:	f7ff bb8d 	b.w	80a02c8 <hal_i2c_read>

080a0bae <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a0bae:	2100      	movs	r1, #0
 80a0bb0:	7c00      	ldrb	r0, [r0, #16]
 80a0bb2:	f7ff bb91 	b.w	80a02d8 <hal_i2c_peek>

080a0bb6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a0bb6:	2100      	movs	r1, #0
 80a0bb8:	7c00      	ldrb	r0, [r0, #16]
 80a0bba:	f7ff bb95 	b.w	80a02e8 <hal_i2c_flush>

080a0bbe <_ZN7TwoWireD0Ev>:
 80a0bbe:	b510      	push	{r4, lr}
 80a0bc0:	4604      	mov	r4, r0
 80a0bc2:	2114      	movs	r1, #20
 80a0bc4:	f000 f99a 	bl	80a0efc <_ZdlPvj>
 80a0bc8:	4620      	mov	r0, r4
 80a0bca:	bd10      	pop	{r4, pc}

080a0bcc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a0bcc:	b510      	push	{r4, lr}
 80a0bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0bd2:	4604      	mov	r4, r0
 80a0bd4:	4608      	mov	r0, r1
 80a0bd6:	2100      	movs	r1, #0
 80a0bd8:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0bdc:	4b03      	ldr	r3, [pc, #12]	; (80a0bec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a0bde:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a0be0:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a0be2:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a0be4:	f7ff fb90 	bl	80a0308 <hal_i2c_init>
}
 80a0be8:	4620      	mov	r0, r4
 80a0bea:	bd10      	pop	{r4, pc}
 80a0bec:	080a18e8 	.word	0x080a18e8

080a0bf0 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a0bf0:	2200      	movs	r2, #0
 80a0bf2:	6840      	ldr	r0, [r0, #4]
 80a0bf4:	4611      	mov	r1, r2
 80a0bf6:	f7ff bc15 	b.w	80a0424 <network_ready>

080a0bfa <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0bfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0bfc:	4615      	mov	r5, r2
 80a0bfe:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a0c00:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a0c02:	460e      	mov	r6, r1
 80a0c04:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a0c06:	2100      	movs	r1, #0
 80a0c08:	a803      	add	r0, sp, #12
 80a0c0a:	f000 fd5d 	bl	80a16c8 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0c0e:	4628      	mov	r0, r5
 80a0c10:	f000 fd86 	bl	80a1720 <strlen>
 80a0c14:	2700      	movs	r7, #0
 80a0c16:	b281      	uxth	r1, r0
 80a0c18:	6873      	ldr	r3, [r6, #4]
 80a0c1a:	4628      	mov	r0, r5
 80a0c1c:	9700      	str	r7, [sp, #0]
 80a0c1e:	aa03      	add	r2, sp, #12
 80a0c20:	f7ff fbbc 	bl	80a039c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0c24:	b130      	cbz	r0, 80a0c34 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a0c26:	4639      	mov	r1, r7
 80a0c28:	4620      	mov	r0, r4
 80a0c2a:	f7ff fe45 	bl	80a08b8 <_ZN9IPAddressC1Em>
    }
 80a0c2e:	4620      	mov	r0, r4
 80a0c30:	b009      	add	sp, #36	; 0x24
 80a0c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0c34:	4620      	mov	r0, r4
 80a0c36:	a903      	add	r1, sp, #12
 80a0c38:	f7ff fe2c 	bl	80a0894 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a0c3c:	e7f7      	b.n	80a0c2e <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a0c3e <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a0c3e:	2200      	movs	r2, #0
 80a0c40:	6840      	ldr	r0, [r0, #4]
 80a0c42:	4611      	mov	r1, r2
 80a0c44:	f7ff bc0e 	b.w	80a0464 <network_listening>

080a0c48 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a0c48:	2200      	movs	r2, #0
 80a0c4a:	6840      	ldr	r0, [r0, #4]
 80a0c4c:	4611      	mov	r1, r2
 80a0c4e:	f7ff bc19 	b.w	80a0484 <network_get_listen_timeout>

080a0c52 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a0c52:	2200      	movs	r2, #0
 80a0c54:	6840      	ldr	r0, [r0, #4]
 80a0c56:	f7ff bc0d 	b.w	80a0474 <network_set_listen_timeout>

080a0c5a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a0c5a:	2200      	movs	r2, #0
 80a0c5c:	6840      	ldr	r0, [r0, #4]
 80a0c5e:	f081 0101 	eor.w	r1, r1, #1
 80a0c62:	f7ff bbf7 	b.w	80a0454 <network_listen>

080a0c66 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a0c66:	2300      	movs	r3, #0
 80a0c68:	6840      	ldr	r0, [r0, #4]
 80a0c6a:	461a      	mov	r2, r3
 80a0c6c:	4619      	mov	r1, r3
 80a0c6e:	f7ff bbe9 	b.w	80a0444 <network_off>

080a0c72 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a0c72:	2200      	movs	r2, #0
 80a0c74:	6840      	ldr	r0, [r0, #4]
 80a0c76:	4611      	mov	r1, r2
 80a0c78:	f7ff bbc4 	b.w	80a0404 <network_connecting>

080a0c7c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a0c7c:	2200      	movs	r2, #0
 80a0c7e:	2102      	movs	r1, #2
 80a0c80:	6840      	ldr	r0, [r0, #4]
 80a0c82:	f7ff bbc7 	b.w	80a0414 <network_disconnect>

080a0c86 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a0c86:	2300      	movs	r3, #0
 80a0c88:	6840      	ldr	r0, [r0, #4]
 80a0c8a:	461a      	mov	r2, r3
 80a0c8c:	f7ff bbb2 	b.w	80a03f4 <network_connect>

080a0c90 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0c90:	2204      	movs	r2, #4
 80a0c92:	4b02      	ldr	r3, [pc, #8]	; (80a0c9c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a0c94:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a0c96:	4a02      	ldr	r2, [pc, #8]	; (80a0ca0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0c98:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a0c9a:	4770      	bx	lr
 80a0c9c:	20000514 	.word	0x20000514
 80a0ca0:	080a1910 	.word	0x080a1910

080a0ca4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0ca4:	2300      	movs	r3, #0
 80a0ca6:	6840      	ldr	r0, [r0, #4]
 80a0ca8:	461a      	mov	r2, r3
 80a0caa:	f7ff bba3 	b.w	80a03f4 <network_connect>

080a0cae <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0cae:	2200      	movs	r2, #0
 80a0cb0:	2102      	movs	r1, #2
 80a0cb2:	6840      	ldr	r0, [r0, #4]
 80a0cb4:	f7ff bbae 	b.w	80a0414 <network_disconnect>

080a0cb8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0cb8:	2200      	movs	r2, #0
 80a0cba:	6840      	ldr	r0, [r0, #4]
 80a0cbc:	4611      	mov	r1, r2
 80a0cbe:	f7ff bba1 	b.w	80a0404 <network_connecting>

080a0cc2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0cc2:	2200      	movs	r2, #0
 80a0cc4:	6840      	ldr	r0, [r0, #4]
 80a0cc6:	4611      	mov	r1, r2
 80a0cc8:	f7ff bbac 	b.w	80a0424 <network_ready>

080a0ccc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0ccc:	2300      	movs	r3, #0
 80a0cce:	6840      	ldr	r0, [r0, #4]
 80a0cd0:	461a      	mov	r2, r3
 80a0cd2:	4619      	mov	r1, r3
 80a0cd4:	f7ff bbae 	b.w	80a0434 <network_on>

080a0cd8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0cd8:	2300      	movs	r3, #0
 80a0cda:	6840      	ldr	r0, [r0, #4]
 80a0cdc:	461a      	mov	r2, r3
 80a0cde:	4619      	mov	r1, r3
 80a0ce0:	f7ff bbb0 	b.w	80a0444 <network_off>

080a0ce4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a0ce4:	2100      	movs	r1, #0
 80a0ce6:	6840      	ldr	r0, [r0, #4]
 80a0ce8:	f7ff bbd4 	b.w	80a0494 <network_is_on>

080a0cec <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a0cec:	2100      	movs	r1, #0
 80a0cee:	6840      	ldr	r0, [r0, #4]
 80a0cf0:	f7ff bbd8 	b.w	80a04a4 <network_is_off>

080a0cf4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0cf4:	2200      	movs	r2, #0
 80a0cf6:	6840      	ldr	r0, [r0, #4]
 80a0cf8:	f081 0101 	eor.w	r1, r1, #1
 80a0cfc:	f7ff bbaa 	b.w	80a0454 <network_listen>

080a0d00 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0d00:	2200      	movs	r2, #0
 80a0d02:	6840      	ldr	r0, [r0, #4]
 80a0d04:	f7ff bbb6 	b.w	80a0474 <network_set_listen_timeout>

080a0d08 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0d08:	2200      	movs	r2, #0
 80a0d0a:	6840      	ldr	r0, [r0, #4]
 80a0d0c:	4611      	mov	r1, r2
 80a0d0e:	f7ff bbb9 	b.w	80a0484 <network_get_listen_timeout>

080a0d12 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0d12:	2200      	movs	r2, #0
 80a0d14:	6840      	ldr	r0, [r0, #4]
 80a0d16:	4611      	mov	r1, r2
 80a0d18:	f7ff bba4 	b.w	80a0464 <network_listening>

080a0d1c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0d1c:	b570      	push	{r4, r5, r6, lr}
 80a0d1e:	4615      	mov	r5, r2
 80a0d20:	b08e      	sub	sp, #56	; 0x38
 80a0d22:	4604      	mov	r4, r0
    IPAddress addr;
 80a0d24:	a808      	add	r0, sp, #32
 80a0d26:	f7ff fda7 	bl	80a0878 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a0d2a:	2211      	movs	r2, #17
 80a0d2c:	2100      	movs	r1, #0
 80a0d2e:	a803      	add	r0, sp, #12
 80a0d30:	f000 fcca 	bl	80a16c8 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0d34:	2600      	movs	r6, #0
 80a0d36:	4628      	mov	r0, r5
 80a0d38:	f000 fcf2 	bl	80a1720 <strlen>
 80a0d3c:	4b0a      	ldr	r3, [pc, #40]	; (80a0d68 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0d3e:	9600      	str	r6, [sp, #0]
 80a0d40:	b281      	uxth	r1, r0
 80a0d42:	685b      	ldr	r3, [r3, #4]
 80a0d44:	4628      	mov	r0, r5
 80a0d46:	aa03      	add	r2, sp, #12
 80a0d48:	f7ff fb28 	bl	80a039c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0d4c:	b130      	cbz	r0, 80a0d5c <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a0d4e:	4631      	mov	r1, r6
 80a0d50:	4620      	mov	r0, r4
 80a0d52:	f7ff fdb1 	bl	80a08b8 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0d56:	4620      	mov	r0, r4
 80a0d58:	b00e      	add	sp, #56	; 0x38
 80a0d5a:	bd70      	pop	{r4, r5, r6, pc}
 80a0d5c:	4620      	mov	r0, r4
 80a0d5e:	a903      	add	r1, sp, #12
 80a0d60:	f7ff fd98 	bl	80a0894 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a0d64:	e7f7      	b.n	80a0d56 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a0d66:	bf00      	nop
 80a0d68:	20000514 	.word	0x20000514

080a0d6c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a0d6c:	4b02      	ldr	r3, [pc, #8]	; (80a0d78 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0d6e:	4a03      	ldr	r2, [pc, #12]	; (80a0d7c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0d70:	601a      	str	r2, [r3, #0]
 80a0d72:	2200      	movs	r2, #0
 80a0d74:	605a      	str	r2, [r3, #4]

} // spark
 80a0d76:	4770      	bx	lr
 80a0d78:	2000051c 	.word	0x2000051c
 80a0d7c:	080a194c 	.word	0x080a194c

080a0d80 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a0d80:	4b02      	ldr	r3, [pc, #8]	; (80a0d8c <__tcf_0+0xc>)
 80a0d82:	6898      	ldr	r0, [r3, #8]
 80a0d84:	b108      	cbz	r0, 80a0d8a <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a0d86:	f7ff ba47 	b.w	80a0218 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a0d8a:	4770      	bx	lr
 80a0d8c:	20000528 	.word	0x20000528

080a0d90 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a0d90:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a0d92:	b570      	push	{r4, r5, r6, lr}
 80a0d94:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a0d96:	d901      	bls.n	80a0d9c <pinAvailable+0xc>
    return false;
 80a0d98:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a0d9a:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a0d9c:	f1a0 030d 	sub.w	r3, r0, #13
 80a0da0:	2b02      	cmp	r3, #2
 80a0da2:	d90b      	bls.n	80a0dbc <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a0da4:	2801      	cmp	r0, #1
 80a0da6:	d824      	bhi.n	80a0df2 <pinAvailable+0x62>
 80a0da8:	f000 f884 	bl	80a0eb4 <_Z19__fetch_global_Wirev>
 80a0dac:	2100      	movs	r1, #0
 80a0dae:	7c00      	ldrb	r0, [r0, #16]
 80a0db0:	f7ff faa2 	bl	80a02f8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a0db4:	f080 0001 	eor.w	r0, r0, #1
 80a0db8:	b2c0      	uxtb	r0, r0
 80a0dba:	e7ee      	b.n	80a0d9a <pinAvailable+0xa>
 80a0dbc:	4e12      	ldr	r6, [pc, #72]	; (80a0e08 <pinAvailable+0x78>)
 80a0dbe:	7831      	ldrb	r1, [r6, #0]
 80a0dc0:	f3bf 8f5b 	dmb	ish
 80a0dc4:	f011 0501 	ands.w	r5, r1, #1
 80a0dc8:	d10d      	bne.n	80a0de6 <pinAvailable+0x56>
 80a0dca:	4630      	mov	r0, r6
 80a0dcc:	f7ff f969 	bl	80a00a2 <__cxa_guard_acquire>
 80a0dd0:	b148      	cbz	r0, 80a0de6 <pinAvailable+0x56>
 80a0dd2:	4629      	mov	r1, r5
 80a0dd4:	480d      	ldr	r0, [pc, #52]	; (80a0e0c <pinAvailable+0x7c>)
 80a0dd6:	f7ff fb9d 	bl	80a0514 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a0dda:	4630      	mov	r0, r6
 80a0ddc:	f7ff f966 	bl	80a00ac <__cxa_guard_release>
 80a0de0:	480b      	ldr	r0, [pc, #44]	; (80a0e10 <pinAvailable+0x80>)
 80a0de2:	f000 fc5d 	bl	80a16a0 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a0de6:	4b09      	ldr	r3, [pc, #36]	; (80a0e0c <pinAvailable+0x7c>)
 80a0de8:	7818      	ldrb	r0, [r3, #0]
 80a0dea:	f7ff fa9f 	bl	80a032c <hal_spi_is_enabled>
 80a0dee:	2800      	cmp	r0, #0
 80a0df0:	d1d2      	bne.n	80a0d98 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a0df2:	3c12      	subs	r4, #18
 80a0df4:	2c01      	cmp	r4, #1
 80a0df6:	d805      	bhi.n	80a0e04 <pinAvailable+0x74>
 80a0df8:	f7ff fe98 	bl	80a0b2c <_Z22__fetch_global_Serial1v>
 80a0dfc:	7c00      	ldrb	r0, [r0, #16]
 80a0dfe:	f7ff fa43 	bl	80a0288 <hal_usart_is_enabled>
 80a0e02:	e7d7      	b.n	80a0db4 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a0e04:	2001      	movs	r0, #1
 80a0e06:	e7c8      	b.n	80a0d9a <pinAvailable+0xa>
 80a0e08:	20000524 	.word	0x20000524
 80a0e0c:	20000528 	.word	0x20000528
 80a0e10:	080a0d81 	.word	0x080a0d81

080a0e14 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0e14:	2817      	cmp	r0, #23
{
 80a0e16:	b538      	push	{r3, r4, r5, lr}
 80a0e18:	4604      	mov	r4, r0
 80a0e1a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0e1c:	d80a      	bhi.n	80a0e34 <pinMode+0x20>
 80a0e1e:	29ff      	cmp	r1, #255	; 0xff
 80a0e20:	d008      	beq.n	80a0e34 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a0e22:	f7ff ffb5 	bl	80a0d90 <pinAvailable>
 80a0e26:	b128      	cbz	r0, 80a0e34 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a0e28:	4629      	mov	r1, r5
 80a0e2a:	4620      	mov	r0, r4
}
 80a0e2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a0e30:	f7ff b9ca 	b.w	80a01c8 <HAL_Pin_Mode>
}
 80a0e34:	bd38      	pop	{r3, r4, r5, pc}

080a0e36 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a0e36:	b510      	push	{r4, lr}
 80a0e38:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a0e3a:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a0e3c:	bf9c      	itt	ls
 80a0e3e:	340a      	addls	r4, #10
 80a0e40:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a0e42:	4620      	mov	r0, r4
 80a0e44:	f7ff ffa4 	bl	80a0d90 <pinAvailable>
 80a0e48:	b150      	cbz	r0, 80a0e60 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a0e4a:	2103      	movs	r1, #3
 80a0e4c:	4620      	mov	r0, r4
 80a0e4e:	f7ff f9b3 	bl	80a01b8 <HAL_Validate_Pin_Function>
 80a0e52:	2803      	cmp	r0, #3
 80a0e54:	d104      	bne.n	80a0e60 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80a0e56:	4620      	mov	r0, r4
}
 80a0e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80a0e5c:	f7ff b9bc 	b.w	80a01d8 <hal_adc_read>
}
 80a0e60:	2000      	movs	r0, #0
 80a0e62:	bd10      	pop	{r4, pc}

080a0e64 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a0e64:	2300      	movs	r3, #0
 80a0e66:	b507      	push	{r0, r1, r2, lr}
 80a0e68:	461a      	mov	r2, r3
 80a0e6a:	4619      	mov	r1, r3
 80a0e6c:	9300      	str	r3, [sp, #0]
 80a0e6e:	4803      	ldr	r0, [pc, #12]	; (80a0e7c <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a0e70:	f7ff fd38 	bl	80a08e4 <_ZN9IPAddressC1Ehhhh>
 80a0e74:	b003      	add	sp, #12
 80a0e76:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0e7a:	bf00      	nop
 80a0e7c:	20000538 	.word	0x20000538

080a0e80 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0e80:	4770      	bx	lr
	...

080a0e84 <_Z17acquireWireBufferv>:
	hal_i2c_config_t config = {
 80a0e84:	2300      	movs	r3, #0
{
 80a0e86:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a0e88:	2520      	movs	r5, #32
 80a0e8a:	8043      	strh	r3, [r0, #2]
 80a0e8c:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0e8e:	4e08      	ldr	r6, [pc, #32]	; (80a0eb0 <_Z17acquireWireBufferv+0x2c>)
{
 80a0e90:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a0e92:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0e94:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a0e96:	6085      	str	r5, [r0, #8]
 80a0e98:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0e9a:	4628      	mov	r0, r5
 80a0e9c:	f000 f830 	bl	80a0f00 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0ea0:	4631      	mov	r1, r6
	};
 80a0ea2:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0ea4:	4628      	mov	r0, r5
 80a0ea6:	f000 f82b 	bl	80a0f00 <_ZnajRKSt9nothrow_t>
	};
 80a0eaa:	60e0      	str	r0, [r4, #12]
}
 80a0eac:	4620      	mov	r0, r4
 80a0eae:	bd70      	pop	{r4, r5, r6, pc}
 80a0eb0:	080a1980 	.word	0x080a1980

080a0eb4 <_Z19__fetch_global_Wirev>:
{
 80a0eb4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0eb6:	4d0e      	ldr	r5, [pc, #56]	; (80a0ef0 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a0eb8:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0eba:	7829      	ldrb	r1, [r5, #0]
 80a0ebc:	f3bf 8f5b 	dmb	ish
 80a0ec0:	f011 0401 	ands.w	r4, r1, #1
 80a0ec4:	d111      	bne.n	80a0eea <_Z19__fetch_global_Wirev+0x36>
 80a0ec6:	4628      	mov	r0, r5
 80a0ec8:	f7ff f8eb 	bl	80a00a2 <__cxa_guard_acquire>
 80a0ecc:	b168      	cbz	r0, 80a0eea <_Z19__fetch_global_Wirev+0x36>
 80a0ece:	a801      	add	r0, sp, #4
 80a0ed0:	f7ff ffd8 	bl	80a0e84 <_Z17acquireWireBufferv>
 80a0ed4:	4621      	mov	r1, r4
 80a0ed6:	aa01      	add	r2, sp, #4
 80a0ed8:	4806      	ldr	r0, [pc, #24]	; (80a0ef4 <_Z19__fetch_global_Wirev+0x40>)
 80a0eda:	f7ff fe77 	bl	80a0bcc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a0ede:	4628      	mov	r0, r5
 80a0ee0:	f7ff f8e4 	bl	80a00ac <__cxa_guard_release>
 80a0ee4:	4804      	ldr	r0, [pc, #16]	; (80a0ef8 <_Z19__fetch_global_Wirev+0x44>)
 80a0ee6:	f000 fbdb 	bl	80a16a0 <atexit>
	return wire;
}
 80a0eea:	4802      	ldr	r0, [pc, #8]	; (80a0ef4 <_Z19__fetch_global_Wirev+0x40>)
 80a0eec:	b007      	add	sp, #28
 80a0eee:	bd30      	pop	{r4, r5, pc}
 80a0ef0:	20000550 	.word	0x20000550
 80a0ef4:	20000554 	.word	0x20000554
 80a0ef8:	080a0e81 	.word	0x080a0e81

080a0efc <_ZdlPvj>:
 80a0efc:	f7ff b8cf 	b.w	80a009e <_ZdlPv>

080a0f00 <_ZnajRKSt9nothrow_t>:
 80a0f00:	f7ff b8cb 	b.w	80a009a <_Znaj>

080a0f04 <__aeabi_drsub>:
 80a0f04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a0f08:	e002      	b.n	80a0f10 <__adddf3>
 80a0f0a:	bf00      	nop

080a0f0c <__aeabi_dsub>:
 80a0f0c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a0f10 <__adddf3>:
 80a0f10:	b530      	push	{r4, r5, lr}
 80a0f12:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a0f16:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a0f1a:	ea94 0f05 	teq	r4, r5
 80a0f1e:	bf08      	it	eq
 80a0f20:	ea90 0f02 	teqeq	r0, r2
 80a0f24:	bf1f      	itttt	ne
 80a0f26:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a0f2a:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a0f2e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a0f32:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a0f36:	f000 80e2 	beq.w	80a10fe <__adddf3+0x1ee>
 80a0f3a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a0f3e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a0f42:	bfb8      	it	lt
 80a0f44:	426d      	neglt	r5, r5
 80a0f46:	dd0c      	ble.n	80a0f62 <__adddf3+0x52>
 80a0f48:	442c      	add	r4, r5
 80a0f4a:	ea80 0202 	eor.w	r2, r0, r2
 80a0f4e:	ea81 0303 	eor.w	r3, r1, r3
 80a0f52:	ea82 0000 	eor.w	r0, r2, r0
 80a0f56:	ea83 0101 	eor.w	r1, r3, r1
 80a0f5a:	ea80 0202 	eor.w	r2, r0, r2
 80a0f5e:	ea81 0303 	eor.w	r3, r1, r3
 80a0f62:	2d36      	cmp	r5, #54	; 0x36
 80a0f64:	bf88      	it	hi
 80a0f66:	bd30      	pophi	{r4, r5, pc}
 80a0f68:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a0f6c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a0f70:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a0f74:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a0f78:	d002      	beq.n	80a0f80 <__adddf3+0x70>
 80a0f7a:	4240      	negs	r0, r0
 80a0f7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a0f80:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a0f84:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a0f88:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a0f8c:	d002      	beq.n	80a0f94 <__adddf3+0x84>
 80a0f8e:	4252      	negs	r2, r2
 80a0f90:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a0f94:	ea94 0f05 	teq	r4, r5
 80a0f98:	f000 80a7 	beq.w	80a10ea <__adddf3+0x1da>
 80a0f9c:	f1a4 0401 	sub.w	r4, r4, #1
 80a0fa0:	f1d5 0e20 	rsbs	lr, r5, #32
 80a0fa4:	db0d      	blt.n	80a0fc2 <__adddf3+0xb2>
 80a0fa6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a0faa:	fa22 f205 	lsr.w	r2, r2, r5
 80a0fae:	1880      	adds	r0, r0, r2
 80a0fb0:	f141 0100 	adc.w	r1, r1, #0
 80a0fb4:	fa03 f20e 	lsl.w	r2, r3, lr
 80a0fb8:	1880      	adds	r0, r0, r2
 80a0fba:	fa43 f305 	asr.w	r3, r3, r5
 80a0fbe:	4159      	adcs	r1, r3
 80a0fc0:	e00e      	b.n	80a0fe0 <__adddf3+0xd0>
 80a0fc2:	f1a5 0520 	sub.w	r5, r5, #32
 80a0fc6:	f10e 0e20 	add.w	lr, lr, #32
 80a0fca:	2a01      	cmp	r2, #1
 80a0fcc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a0fd0:	bf28      	it	cs
 80a0fd2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a0fd6:	fa43 f305 	asr.w	r3, r3, r5
 80a0fda:	18c0      	adds	r0, r0, r3
 80a0fdc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a0fe0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a0fe4:	d507      	bpl.n	80a0ff6 <__adddf3+0xe6>
 80a0fe6:	f04f 0e00 	mov.w	lr, #0
 80a0fea:	f1dc 0c00 	rsbs	ip, ip, #0
 80a0fee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a0ff2:	eb6e 0101 	sbc.w	r1, lr, r1
 80a0ff6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a0ffa:	d31b      	bcc.n	80a1034 <__adddf3+0x124>
 80a0ffc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a1000:	d30c      	bcc.n	80a101c <__adddf3+0x10c>
 80a1002:	0849      	lsrs	r1, r1, #1
 80a1004:	ea5f 0030 	movs.w	r0, r0, rrx
 80a1008:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a100c:	f104 0401 	add.w	r4, r4, #1
 80a1010:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a1014:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a1018:	f080 809a 	bcs.w	80a1150 <__adddf3+0x240>
 80a101c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1020:	bf08      	it	eq
 80a1022:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1026:	f150 0000 	adcs.w	r0, r0, #0
 80a102a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a102e:	ea41 0105 	orr.w	r1, r1, r5
 80a1032:	bd30      	pop	{r4, r5, pc}
 80a1034:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a1038:	4140      	adcs	r0, r0
 80a103a:	eb41 0101 	adc.w	r1, r1, r1
 80a103e:	3c01      	subs	r4, #1
 80a1040:	bf28      	it	cs
 80a1042:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a1046:	d2e9      	bcs.n	80a101c <__adddf3+0x10c>
 80a1048:	f091 0f00 	teq	r1, #0
 80a104c:	bf04      	itt	eq
 80a104e:	4601      	moveq	r1, r0
 80a1050:	2000      	moveq	r0, #0
 80a1052:	fab1 f381 	clz	r3, r1
 80a1056:	bf08      	it	eq
 80a1058:	3320      	addeq	r3, #32
 80a105a:	f1a3 030b 	sub.w	r3, r3, #11
 80a105e:	f1b3 0220 	subs.w	r2, r3, #32
 80a1062:	da0c      	bge.n	80a107e <__adddf3+0x16e>
 80a1064:	320c      	adds	r2, #12
 80a1066:	dd08      	ble.n	80a107a <__adddf3+0x16a>
 80a1068:	f102 0c14 	add.w	ip, r2, #20
 80a106c:	f1c2 020c 	rsb	r2, r2, #12
 80a1070:	fa01 f00c 	lsl.w	r0, r1, ip
 80a1074:	fa21 f102 	lsr.w	r1, r1, r2
 80a1078:	e00c      	b.n	80a1094 <__adddf3+0x184>
 80a107a:	f102 0214 	add.w	r2, r2, #20
 80a107e:	bfd8      	it	le
 80a1080:	f1c2 0c20 	rsble	ip, r2, #32
 80a1084:	fa01 f102 	lsl.w	r1, r1, r2
 80a1088:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a108c:	bfdc      	itt	le
 80a108e:	ea41 010c 	orrle.w	r1, r1, ip
 80a1092:	4090      	lslle	r0, r2
 80a1094:	1ae4      	subs	r4, r4, r3
 80a1096:	bfa2      	ittt	ge
 80a1098:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a109c:	4329      	orrge	r1, r5
 80a109e:	bd30      	popge	{r4, r5, pc}
 80a10a0:	ea6f 0404 	mvn.w	r4, r4
 80a10a4:	3c1f      	subs	r4, #31
 80a10a6:	da1c      	bge.n	80a10e2 <__adddf3+0x1d2>
 80a10a8:	340c      	adds	r4, #12
 80a10aa:	dc0e      	bgt.n	80a10ca <__adddf3+0x1ba>
 80a10ac:	f104 0414 	add.w	r4, r4, #20
 80a10b0:	f1c4 0220 	rsb	r2, r4, #32
 80a10b4:	fa20 f004 	lsr.w	r0, r0, r4
 80a10b8:	fa01 f302 	lsl.w	r3, r1, r2
 80a10bc:	ea40 0003 	orr.w	r0, r0, r3
 80a10c0:	fa21 f304 	lsr.w	r3, r1, r4
 80a10c4:	ea45 0103 	orr.w	r1, r5, r3
 80a10c8:	bd30      	pop	{r4, r5, pc}
 80a10ca:	f1c4 040c 	rsb	r4, r4, #12
 80a10ce:	f1c4 0220 	rsb	r2, r4, #32
 80a10d2:	fa20 f002 	lsr.w	r0, r0, r2
 80a10d6:	fa01 f304 	lsl.w	r3, r1, r4
 80a10da:	ea40 0003 	orr.w	r0, r0, r3
 80a10de:	4629      	mov	r1, r5
 80a10e0:	bd30      	pop	{r4, r5, pc}
 80a10e2:	fa21 f004 	lsr.w	r0, r1, r4
 80a10e6:	4629      	mov	r1, r5
 80a10e8:	bd30      	pop	{r4, r5, pc}
 80a10ea:	f094 0f00 	teq	r4, #0
 80a10ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a10f2:	bf06      	itte	eq
 80a10f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a10f8:	3401      	addeq	r4, #1
 80a10fa:	3d01      	subne	r5, #1
 80a10fc:	e74e      	b.n	80a0f9c <__adddf3+0x8c>
 80a10fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1102:	bf18      	it	ne
 80a1104:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1108:	d029      	beq.n	80a115e <__adddf3+0x24e>
 80a110a:	ea94 0f05 	teq	r4, r5
 80a110e:	bf08      	it	eq
 80a1110:	ea90 0f02 	teqeq	r0, r2
 80a1114:	d005      	beq.n	80a1122 <__adddf3+0x212>
 80a1116:	ea54 0c00 	orrs.w	ip, r4, r0
 80a111a:	bf04      	itt	eq
 80a111c:	4619      	moveq	r1, r3
 80a111e:	4610      	moveq	r0, r2
 80a1120:	bd30      	pop	{r4, r5, pc}
 80a1122:	ea91 0f03 	teq	r1, r3
 80a1126:	bf1e      	ittt	ne
 80a1128:	2100      	movne	r1, #0
 80a112a:	2000      	movne	r0, #0
 80a112c:	bd30      	popne	{r4, r5, pc}
 80a112e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a1132:	d105      	bne.n	80a1140 <__adddf3+0x230>
 80a1134:	0040      	lsls	r0, r0, #1
 80a1136:	4149      	adcs	r1, r1
 80a1138:	bf28      	it	cs
 80a113a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a113e:	bd30      	pop	{r4, r5, pc}
 80a1140:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a1144:	bf3c      	itt	cc
 80a1146:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a114a:	bd30      	popcc	{r4, r5, pc}
 80a114c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1150:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a1154:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1158:	f04f 0000 	mov.w	r0, #0
 80a115c:	bd30      	pop	{r4, r5, pc}
 80a115e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1162:	bf1a      	itte	ne
 80a1164:	4619      	movne	r1, r3
 80a1166:	4610      	movne	r0, r2
 80a1168:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a116c:	bf1c      	itt	ne
 80a116e:	460b      	movne	r3, r1
 80a1170:	4602      	movne	r2, r0
 80a1172:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1176:	bf06      	itte	eq
 80a1178:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a117c:	ea91 0f03 	teqeq	r1, r3
 80a1180:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a1184:	bd30      	pop	{r4, r5, pc}
 80a1186:	bf00      	nop

080a1188 <__aeabi_ui2d>:
 80a1188:	f090 0f00 	teq	r0, #0
 80a118c:	bf04      	itt	eq
 80a118e:	2100      	moveq	r1, #0
 80a1190:	4770      	bxeq	lr
 80a1192:	b530      	push	{r4, r5, lr}
 80a1194:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1198:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a119c:	f04f 0500 	mov.w	r5, #0
 80a11a0:	f04f 0100 	mov.w	r1, #0
 80a11a4:	e750      	b.n	80a1048 <__adddf3+0x138>
 80a11a6:	bf00      	nop

080a11a8 <__aeabi_i2d>:
 80a11a8:	f090 0f00 	teq	r0, #0
 80a11ac:	bf04      	itt	eq
 80a11ae:	2100      	moveq	r1, #0
 80a11b0:	4770      	bxeq	lr
 80a11b2:	b530      	push	{r4, r5, lr}
 80a11b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a11b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a11bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a11c0:	bf48      	it	mi
 80a11c2:	4240      	negmi	r0, r0
 80a11c4:	f04f 0100 	mov.w	r1, #0
 80a11c8:	e73e      	b.n	80a1048 <__adddf3+0x138>
 80a11ca:	bf00      	nop

080a11cc <__aeabi_f2d>:
 80a11cc:	0042      	lsls	r2, r0, #1
 80a11ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a11d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80a11d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a11da:	bf1f      	itttt	ne
 80a11dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a11e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a11e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a11e8:	4770      	bxne	lr
 80a11ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a11ee:	bf08      	it	eq
 80a11f0:	4770      	bxeq	lr
 80a11f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a11f6:	bf04      	itt	eq
 80a11f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a11fc:	4770      	bxeq	lr
 80a11fe:	b530      	push	{r4, r5, lr}
 80a1200:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a1204:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1208:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a120c:	e71c      	b.n	80a1048 <__adddf3+0x138>
 80a120e:	bf00      	nop

080a1210 <__aeabi_ul2d>:
 80a1210:	ea50 0201 	orrs.w	r2, r0, r1
 80a1214:	bf08      	it	eq
 80a1216:	4770      	bxeq	lr
 80a1218:	b530      	push	{r4, r5, lr}
 80a121a:	f04f 0500 	mov.w	r5, #0
 80a121e:	e00a      	b.n	80a1236 <__aeabi_l2d+0x16>

080a1220 <__aeabi_l2d>:
 80a1220:	ea50 0201 	orrs.w	r2, r0, r1
 80a1224:	bf08      	it	eq
 80a1226:	4770      	bxeq	lr
 80a1228:	b530      	push	{r4, r5, lr}
 80a122a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a122e:	d502      	bpl.n	80a1236 <__aeabi_l2d+0x16>
 80a1230:	4240      	negs	r0, r0
 80a1232:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1236:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a123a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a123e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a1242:	f43f aed8 	beq.w	80a0ff6 <__adddf3+0xe6>
 80a1246:	f04f 0203 	mov.w	r2, #3
 80a124a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a124e:	bf18      	it	ne
 80a1250:	3203      	addne	r2, #3
 80a1252:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1256:	bf18      	it	ne
 80a1258:	3203      	addne	r2, #3
 80a125a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a125e:	f1c2 0320 	rsb	r3, r2, #32
 80a1262:	fa00 fc03 	lsl.w	ip, r0, r3
 80a1266:	fa20 f002 	lsr.w	r0, r0, r2
 80a126a:	fa01 fe03 	lsl.w	lr, r1, r3
 80a126e:	ea40 000e 	orr.w	r0, r0, lr
 80a1272:	fa21 f102 	lsr.w	r1, r1, r2
 80a1276:	4414      	add	r4, r2
 80a1278:	e6bd      	b.n	80a0ff6 <__adddf3+0xe6>
 80a127a:	bf00      	nop

080a127c <__aeabi_dmul>:
 80a127c:	b570      	push	{r4, r5, r6, lr}
 80a127e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1282:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a1286:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a128a:	bf1d      	ittte	ne
 80a128c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1290:	ea94 0f0c 	teqne	r4, ip
 80a1294:	ea95 0f0c 	teqne	r5, ip
 80a1298:	f000 f8de 	bleq	80a1458 <__aeabi_dmul+0x1dc>
 80a129c:	442c      	add	r4, r5
 80a129e:	ea81 0603 	eor.w	r6, r1, r3
 80a12a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a12a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a12aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a12ae:	bf18      	it	ne
 80a12b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a12b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a12b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a12bc:	d038      	beq.n	80a1330 <__aeabi_dmul+0xb4>
 80a12be:	fba0 ce02 	umull	ip, lr, r0, r2
 80a12c2:	f04f 0500 	mov.w	r5, #0
 80a12c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a12ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a12ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a12d2:	f04f 0600 	mov.w	r6, #0
 80a12d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a12da:	f09c 0f00 	teq	ip, #0
 80a12de:	bf18      	it	ne
 80a12e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80a12e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a12e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a12ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a12f0:	d204      	bcs.n	80a12fc <__aeabi_dmul+0x80>
 80a12f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a12f6:	416d      	adcs	r5, r5
 80a12f8:	eb46 0606 	adc.w	r6, r6, r6
 80a12fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a1300:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a1304:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a1308:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a130c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a1310:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a1314:	bf88      	it	hi
 80a1316:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a131a:	d81e      	bhi.n	80a135a <__aeabi_dmul+0xde>
 80a131c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a1320:	bf08      	it	eq
 80a1322:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a1326:	f150 0000 	adcs.w	r0, r0, #0
 80a132a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a132e:	bd70      	pop	{r4, r5, r6, pc}
 80a1330:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a1334:	ea46 0101 	orr.w	r1, r6, r1
 80a1338:	ea40 0002 	orr.w	r0, r0, r2
 80a133c:	ea81 0103 	eor.w	r1, r1, r3
 80a1340:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a1344:	bfc2      	ittt	gt
 80a1346:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a134a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a134e:	bd70      	popgt	{r4, r5, r6, pc}
 80a1350:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1354:	f04f 0e00 	mov.w	lr, #0
 80a1358:	3c01      	subs	r4, #1
 80a135a:	f300 80ab 	bgt.w	80a14b4 <__aeabi_dmul+0x238>
 80a135e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a1362:	bfde      	ittt	le
 80a1364:	2000      	movle	r0, #0
 80a1366:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a136a:	bd70      	pople	{r4, r5, r6, pc}
 80a136c:	f1c4 0400 	rsb	r4, r4, #0
 80a1370:	3c20      	subs	r4, #32
 80a1372:	da35      	bge.n	80a13e0 <__aeabi_dmul+0x164>
 80a1374:	340c      	adds	r4, #12
 80a1376:	dc1b      	bgt.n	80a13b0 <__aeabi_dmul+0x134>
 80a1378:	f104 0414 	add.w	r4, r4, #20
 80a137c:	f1c4 0520 	rsb	r5, r4, #32
 80a1380:	fa00 f305 	lsl.w	r3, r0, r5
 80a1384:	fa20 f004 	lsr.w	r0, r0, r4
 80a1388:	fa01 f205 	lsl.w	r2, r1, r5
 80a138c:	ea40 0002 	orr.w	r0, r0, r2
 80a1390:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a1394:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1398:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a139c:	fa21 f604 	lsr.w	r6, r1, r4
 80a13a0:	eb42 0106 	adc.w	r1, r2, r6
 80a13a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a13a8:	bf08      	it	eq
 80a13aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a13ae:	bd70      	pop	{r4, r5, r6, pc}
 80a13b0:	f1c4 040c 	rsb	r4, r4, #12
 80a13b4:	f1c4 0520 	rsb	r5, r4, #32
 80a13b8:	fa00 f304 	lsl.w	r3, r0, r4
 80a13bc:	fa20 f005 	lsr.w	r0, r0, r5
 80a13c0:	fa01 f204 	lsl.w	r2, r1, r4
 80a13c4:	ea40 0002 	orr.w	r0, r0, r2
 80a13c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a13cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a13d0:	f141 0100 	adc.w	r1, r1, #0
 80a13d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a13d8:	bf08      	it	eq
 80a13da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a13de:	bd70      	pop	{r4, r5, r6, pc}
 80a13e0:	f1c4 0520 	rsb	r5, r4, #32
 80a13e4:	fa00 f205 	lsl.w	r2, r0, r5
 80a13e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80a13ec:	fa20 f304 	lsr.w	r3, r0, r4
 80a13f0:	fa01 f205 	lsl.w	r2, r1, r5
 80a13f4:	ea43 0302 	orr.w	r3, r3, r2
 80a13f8:	fa21 f004 	lsr.w	r0, r1, r4
 80a13fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1400:	fa21 f204 	lsr.w	r2, r1, r4
 80a1404:	ea20 0002 	bic.w	r0, r0, r2
 80a1408:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a140c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1410:	bf08      	it	eq
 80a1412:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1416:	bd70      	pop	{r4, r5, r6, pc}
 80a1418:	f094 0f00 	teq	r4, #0
 80a141c:	d10f      	bne.n	80a143e <__aeabi_dmul+0x1c2>
 80a141e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a1422:	0040      	lsls	r0, r0, #1
 80a1424:	eb41 0101 	adc.w	r1, r1, r1
 80a1428:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a142c:	bf08      	it	eq
 80a142e:	3c01      	subeq	r4, #1
 80a1430:	d0f7      	beq.n	80a1422 <__aeabi_dmul+0x1a6>
 80a1432:	ea41 0106 	orr.w	r1, r1, r6
 80a1436:	f095 0f00 	teq	r5, #0
 80a143a:	bf18      	it	ne
 80a143c:	4770      	bxne	lr
 80a143e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a1442:	0052      	lsls	r2, r2, #1
 80a1444:	eb43 0303 	adc.w	r3, r3, r3
 80a1448:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a144c:	bf08      	it	eq
 80a144e:	3d01      	subeq	r5, #1
 80a1450:	d0f7      	beq.n	80a1442 <__aeabi_dmul+0x1c6>
 80a1452:	ea43 0306 	orr.w	r3, r3, r6
 80a1456:	4770      	bx	lr
 80a1458:	ea94 0f0c 	teq	r4, ip
 80a145c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a1460:	bf18      	it	ne
 80a1462:	ea95 0f0c 	teqne	r5, ip
 80a1466:	d00c      	beq.n	80a1482 <__aeabi_dmul+0x206>
 80a1468:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a146c:	bf18      	it	ne
 80a146e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a1472:	d1d1      	bne.n	80a1418 <__aeabi_dmul+0x19c>
 80a1474:	ea81 0103 	eor.w	r1, r1, r3
 80a1478:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a147c:	f04f 0000 	mov.w	r0, #0
 80a1480:	bd70      	pop	{r4, r5, r6, pc}
 80a1482:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1486:	bf06      	itte	eq
 80a1488:	4610      	moveq	r0, r2
 80a148a:	4619      	moveq	r1, r3
 80a148c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a1490:	d019      	beq.n	80a14c6 <__aeabi_dmul+0x24a>
 80a1492:	ea94 0f0c 	teq	r4, ip
 80a1496:	d102      	bne.n	80a149e <__aeabi_dmul+0x222>
 80a1498:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a149c:	d113      	bne.n	80a14c6 <__aeabi_dmul+0x24a>
 80a149e:	ea95 0f0c 	teq	r5, ip
 80a14a2:	d105      	bne.n	80a14b0 <__aeabi_dmul+0x234>
 80a14a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a14a8:	bf1c      	itt	ne
 80a14aa:	4610      	movne	r0, r2
 80a14ac:	4619      	movne	r1, r3
 80a14ae:	d10a      	bne.n	80a14c6 <__aeabi_dmul+0x24a>
 80a14b0:	ea81 0103 	eor.w	r1, r1, r3
 80a14b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a14b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a14bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a14c0:	f04f 0000 	mov.w	r0, #0
 80a14c4:	bd70      	pop	{r4, r5, r6, pc}
 80a14c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a14ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a14ce:	bd70      	pop	{r4, r5, r6, pc}

080a14d0 <__aeabi_ddiv>:
 80a14d0:	b570      	push	{r4, r5, r6, lr}
 80a14d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a14d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a14da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a14de:	bf1d      	ittte	ne
 80a14e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a14e4:	ea94 0f0c 	teqne	r4, ip
 80a14e8:	ea95 0f0c 	teqne	r5, ip
 80a14ec:	f000 f8a7 	bleq	80a163e <__aeabi_ddiv+0x16e>
 80a14f0:	eba4 0405 	sub.w	r4, r4, r5
 80a14f4:	ea81 0e03 	eor.w	lr, r1, r3
 80a14f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a14fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1500:	f000 8088 	beq.w	80a1614 <__aeabi_ddiv+0x144>
 80a1504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1508:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a150c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a1510:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a1514:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a1518:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a151c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a1520:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a1524:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a1528:	429d      	cmp	r5, r3
 80a152a:	bf08      	it	eq
 80a152c:	4296      	cmpeq	r6, r2
 80a152e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a1532:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a1536:	d202      	bcs.n	80a153e <__aeabi_ddiv+0x6e>
 80a1538:	085b      	lsrs	r3, r3, #1
 80a153a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a153e:	1ab6      	subs	r6, r6, r2
 80a1540:	eb65 0503 	sbc.w	r5, r5, r3
 80a1544:	085b      	lsrs	r3, r3, #1
 80a1546:	ea4f 0232 	mov.w	r2, r2, rrx
 80a154a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a154e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a1552:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1556:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a155a:	bf22      	ittt	cs
 80a155c:	1ab6      	subcs	r6, r6, r2
 80a155e:	4675      	movcs	r5, lr
 80a1560:	ea40 000c 	orrcs.w	r0, r0, ip
 80a1564:	085b      	lsrs	r3, r3, #1
 80a1566:	ea4f 0232 	mov.w	r2, r2, rrx
 80a156a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a156e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1572:	bf22      	ittt	cs
 80a1574:	1ab6      	subcs	r6, r6, r2
 80a1576:	4675      	movcs	r5, lr
 80a1578:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a157c:	085b      	lsrs	r3, r3, #1
 80a157e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1582:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1586:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a158a:	bf22      	ittt	cs
 80a158c:	1ab6      	subcs	r6, r6, r2
 80a158e:	4675      	movcs	r5, lr
 80a1590:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a1594:	085b      	lsrs	r3, r3, #1
 80a1596:	ea4f 0232 	mov.w	r2, r2, rrx
 80a159a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a159e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a15a2:	bf22      	ittt	cs
 80a15a4:	1ab6      	subcs	r6, r6, r2
 80a15a6:	4675      	movcs	r5, lr
 80a15a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a15ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80a15b0:	d018      	beq.n	80a15e4 <__aeabi_ddiv+0x114>
 80a15b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a15b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a15ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a15be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a15c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a15c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a15ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a15ce:	d1c0      	bne.n	80a1552 <__aeabi_ddiv+0x82>
 80a15d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a15d4:	d10b      	bne.n	80a15ee <__aeabi_ddiv+0x11e>
 80a15d6:	ea41 0100 	orr.w	r1, r1, r0
 80a15da:	f04f 0000 	mov.w	r0, #0
 80a15de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a15e2:	e7b6      	b.n	80a1552 <__aeabi_ddiv+0x82>
 80a15e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a15e8:	bf04      	itt	eq
 80a15ea:	4301      	orreq	r1, r0
 80a15ec:	2000      	moveq	r0, #0
 80a15ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a15f2:	bf88      	it	hi
 80a15f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a15f8:	f63f aeaf 	bhi.w	80a135a <__aeabi_dmul+0xde>
 80a15fc:	ebb5 0c03 	subs.w	ip, r5, r3
 80a1600:	bf04      	itt	eq
 80a1602:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a1606:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a160a:	f150 0000 	adcs.w	r0, r0, #0
 80a160e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1612:	bd70      	pop	{r4, r5, r6, pc}
 80a1614:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a1618:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a161c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a1620:	bfc2      	ittt	gt
 80a1622:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a1626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a162a:	bd70      	popgt	{r4, r5, r6, pc}
 80a162c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1630:	f04f 0e00 	mov.w	lr, #0
 80a1634:	3c01      	subs	r4, #1
 80a1636:	e690      	b.n	80a135a <__aeabi_dmul+0xde>
 80a1638:	ea45 0e06 	orr.w	lr, r5, r6
 80a163c:	e68d      	b.n	80a135a <__aeabi_dmul+0xde>
 80a163e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a1642:	ea94 0f0c 	teq	r4, ip
 80a1646:	bf08      	it	eq
 80a1648:	ea95 0f0c 	teqeq	r5, ip
 80a164c:	f43f af3b 	beq.w	80a14c6 <__aeabi_dmul+0x24a>
 80a1650:	ea94 0f0c 	teq	r4, ip
 80a1654:	d10a      	bne.n	80a166c <__aeabi_ddiv+0x19c>
 80a1656:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a165a:	f47f af34 	bne.w	80a14c6 <__aeabi_dmul+0x24a>
 80a165e:	ea95 0f0c 	teq	r5, ip
 80a1662:	f47f af25 	bne.w	80a14b0 <__aeabi_dmul+0x234>
 80a1666:	4610      	mov	r0, r2
 80a1668:	4619      	mov	r1, r3
 80a166a:	e72c      	b.n	80a14c6 <__aeabi_dmul+0x24a>
 80a166c:	ea95 0f0c 	teq	r5, ip
 80a1670:	d106      	bne.n	80a1680 <__aeabi_ddiv+0x1b0>
 80a1672:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a1676:	f43f aefd 	beq.w	80a1474 <__aeabi_dmul+0x1f8>
 80a167a:	4610      	mov	r0, r2
 80a167c:	4619      	mov	r1, r3
 80a167e:	e722      	b.n	80a14c6 <__aeabi_dmul+0x24a>
 80a1680:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1684:	bf18      	it	ne
 80a1686:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a168a:	f47f aec5 	bne.w	80a1418 <__aeabi_dmul+0x19c>
 80a168e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a1692:	f47f af0d 	bne.w	80a14b0 <__aeabi_dmul+0x234>
 80a1696:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a169a:	f47f aeeb 	bne.w	80a1474 <__aeabi_dmul+0x1f8>
 80a169e:	e712      	b.n	80a14c6 <__aeabi_dmul+0x24a>

080a16a0 <atexit>:
 80a16a0:	2300      	movs	r3, #0
 80a16a2:	4601      	mov	r1, r0
 80a16a4:	461a      	mov	r2, r3
 80a16a6:	4618      	mov	r0, r3
 80a16a8:	f000 b842 	b.w	80a1730 <__register_exitproc>

080a16ac <memcpy>:
 80a16ac:	440a      	add	r2, r1
 80a16ae:	4291      	cmp	r1, r2
 80a16b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80a16b4:	d100      	bne.n	80a16b8 <memcpy+0xc>
 80a16b6:	4770      	bx	lr
 80a16b8:	b510      	push	{r4, lr}
 80a16ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a16be:	4291      	cmp	r1, r2
 80a16c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a16c4:	d1f9      	bne.n	80a16ba <memcpy+0xe>
 80a16c6:	bd10      	pop	{r4, pc}

080a16c8 <memset>:
 80a16c8:	4603      	mov	r3, r0
 80a16ca:	4402      	add	r2, r0
 80a16cc:	4293      	cmp	r3, r2
 80a16ce:	d100      	bne.n	80a16d2 <memset+0xa>
 80a16d0:	4770      	bx	lr
 80a16d2:	f803 1b01 	strb.w	r1, [r3], #1
 80a16d6:	e7f9      	b.n	80a16cc <memset+0x4>

080a16d8 <srand>:
 80a16d8:	b538      	push	{r3, r4, r5, lr}
 80a16da:	4b0d      	ldr	r3, [pc, #52]	; (80a1710 <srand+0x38>)
 80a16dc:	4604      	mov	r4, r0
 80a16de:	681d      	ldr	r5, [r3, #0]
 80a16e0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a16e2:	b97b      	cbnz	r3, 80a1704 <srand+0x2c>
 80a16e4:	2018      	movs	r0, #24
 80a16e6:	f7fe fef5 	bl	80a04d4 <malloc>
 80a16ea:	4a0a      	ldr	r2, [pc, #40]	; (80a1714 <srand+0x3c>)
 80a16ec:	4b0a      	ldr	r3, [pc, #40]	; (80a1718 <srand+0x40>)
 80a16ee:	63a8      	str	r0, [r5, #56]	; 0x38
 80a16f0:	e9c0 2300 	strd	r2, r3, [r0]
 80a16f4:	4b09      	ldr	r3, [pc, #36]	; (80a171c <srand+0x44>)
 80a16f6:	2201      	movs	r2, #1
 80a16f8:	6083      	str	r3, [r0, #8]
 80a16fa:	230b      	movs	r3, #11
 80a16fc:	8183      	strh	r3, [r0, #12]
 80a16fe:	2300      	movs	r3, #0
 80a1700:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1704:	2200      	movs	r2, #0
 80a1706:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a1708:	611c      	str	r4, [r3, #16]
 80a170a:	615a      	str	r2, [r3, #20]
 80a170c:	bd38      	pop	{r3, r4, r5, pc}
 80a170e:	bf00      	nop
 80a1710:	20000008 	.word	0x20000008
 80a1714:	abcd330e 	.word	0xabcd330e
 80a1718:	e66d1234 	.word	0xe66d1234
 80a171c:	0005deec 	.word	0x0005deec

080a1720 <strlen>:
 80a1720:	4603      	mov	r3, r0
 80a1722:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1726:	2a00      	cmp	r2, #0
 80a1728:	d1fb      	bne.n	80a1722 <strlen+0x2>
 80a172a:	1a18      	subs	r0, r3, r0
 80a172c:	3801      	subs	r0, #1
 80a172e:	4770      	bx	lr

080a1730 <__register_exitproc>:
 80a1730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a1734:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80a17f4 <__register_exitproc+0xc4>
 80a1738:	4606      	mov	r6, r0
 80a173a:	f8d8 0000 	ldr.w	r0, [r8]
 80a173e:	461f      	mov	r7, r3
 80a1740:	460d      	mov	r5, r1
 80a1742:	4691      	mov	r9, r2
 80a1744:	f000 f858 	bl	80a17f8 <__retarget_lock_acquire_recursive>
 80a1748:	4b26      	ldr	r3, [pc, #152]	; (80a17e4 <__register_exitproc+0xb4>)
 80a174a:	681c      	ldr	r4, [r3, #0]
 80a174c:	b934      	cbnz	r4, 80a175c <__register_exitproc+0x2c>
 80a174e:	4c26      	ldr	r4, [pc, #152]	; (80a17e8 <__register_exitproc+0xb8>)
 80a1750:	601c      	str	r4, [r3, #0]
 80a1752:	4b26      	ldr	r3, [pc, #152]	; (80a17ec <__register_exitproc+0xbc>)
 80a1754:	b113      	cbz	r3, 80a175c <__register_exitproc+0x2c>
 80a1756:	681b      	ldr	r3, [r3, #0]
 80a1758:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a175c:	6863      	ldr	r3, [r4, #4]
 80a175e:	2b1f      	cmp	r3, #31
 80a1760:	dd07      	ble.n	80a1772 <__register_exitproc+0x42>
 80a1762:	f8d8 0000 	ldr.w	r0, [r8]
 80a1766:	f000 f849 	bl	80a17fc <__retarget_lock_release_recursive>
 80a176a:	f04f 30ff 	mov.w	r0, #4294967295
 80a176e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a1772:	b35e      	cbz	r6, 80a17cc <__register_exitproc+0x9c>
 80a1774:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a1778:	b988      	cbnz	r0, 80a179e <__register_exitproc+0x6e>
 80a177a:	4b1d      	ldr	r3, [pc, #116]	; (80a17f0 <__register_exitproc+0xc0>)
 80a177c:	b923      	cbnz	r3, 80a1788 <__register_exitproc+0x58>
 80a177e:	f8d8 0000 	ldr.w	r0, [r8]
 80a1782:	f000 f83a 	bl	80a17fa <__retarget_lock_release>
 80a1786:	e7f0      	b.n	80a176a <__register_exitproc+0x3a>
 80a1788:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a178c:	f7fe fea2 	bl	80a04d4 <malloc>
 80a1790:	2800      	cmp	r0, #0
 80a1792:	d0f4      	beq.n	80a177e <__register_exitproc+0x4e>
 80a1794:	2300      	movs	r3, #0
 80a1796:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a179a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a179e:	2201      	movs	r2, #1
 80a17a0:	6863      	ldr	r3, [r4, #4]
 80a17a2:	2e02      	cmp	r6, #2
 80a17a4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a17a8:	fa02 f203 	lsl.w	r2, r2, r3
 80a17ac:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a17b0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a17b4:	ea43 0302 	orr.w	r3, r3, r2
 80a17b8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a17bc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a17c0:	bf02      	ittt	eq
 80a17c2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a17c6:	431a      	orreq	r2, r3
 80a17c8:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80a17cc:	6863      	ldr	r3, [r4, #4]
 80a17ce:	f8d8 0000 	ldr.w	r0, [r8]
 80a17d2:	1c5a      	adds	r2, r3, #1
 80a17d4:	3302      	adds	r3, #2
 80a17d6:	6062      	str	r2, [r4, #4]
 80a17d8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a17dc:	f000 f80e 	bl	80a17fc <__retarget_lock_release_recursive>
 80a17e0:	2000      	movs	r0, #0
 80a17e2:	e7c4      	b.n	80a176e <__register_exitproc+0x3e>
 80a17e4:	200005f4 	.word	0x200005f4
 80a17e8:	20000568 	.word	0x20000568
 80a17ec:	00000000 	.word	0x00000000
 80a17f0:	080a04d5 	.word	0x080a04d5
 80a17f4:	2000006c 	.word	0x2000006c

080a17f8 <__retarget_lock_acquire_recursive>:
 80a17f8:	4770      	bx	lr

080a17fa <__retarget_lock_release>:
 80a17fa:	4770      	bx	lr

080a17fc <__retarget_lock_release_recursive>:
 80a17fc:	4770      	bx	lr

080a17fe <link_code_end>:
	...

080a1800 <dynalib_user>:
 80a1800:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80a1810:	0000 0000 6c66 6761 6100 616e 6f6c 7667     ....flag.analogv
 80a1820:	6c61 6575 7400 6d65 0070 656d 7373 6d00     alue.temp.mess.m
 80a1830:	7365 3273 6d00 2079 616e 656d 6920 2073     ess2.my name is 
 80a1840:	6170 7472 6369 656c 6100 7070 2500 2d59     particle.app.%Y-
 80a1850:	6d25 252d 5464 4825 253a 3a4d 5325 7a25     %m-%dT%H:%M:%S%z
 80a1860:	6100 6373 6974 656d 0000 0000               .asctime....

080a186c <_ZTV9IPAddress>:
	...
 80a1874:	0845 080a 0835 080a 0837 080a               E...5...7...

080a1880 <_ZTV9USBSerial>:
	...
 80a1888:	0903 080a 0969 080a 0941 080a 0605 080a     ....i...A.......
 80a1898:	0933 080a 0905 080a 0915 080a 0963 080a     3...........c...
 80a18a8:	0925 080a 08fd 080a                         %.......

080a18b0 <_ZTV11USARTSerial>:
	...
 80a18b8:	0a89 080a 0af3 080a 0acf 080a 0605 080a     ................
 80a18c8:	0a9f 080a 0abb 080a 0aad 080a 0ac9 080a     ................
 80a18d8:	0a8b 080a 0a91 080a                         ........

080a18e0 <_ZTV7TwoWire>:
	...
 80a18e8:	0b75 080a 0bbf 080a 0b97 080a 0b77 080a     u...........w...
 80a18f8:	0b9f 080a 0ba7 080a 0baf 080a 0bb7 080a     ................

080a1908 <_ZTVN5spark9WiFiClassE>:
	...
 80a1910:	0c87 080a 0c7d 080a 0c73 080a 0bf1 080a     ....}...s.......
 80a1920:	0691 080a 0c67 080a 0ce5 080a 0ced 080a     ....g...........
 80a1930:	0c5b 080a 0c53 080a 0c49 080a 0c3f 080a     [...S...I...?...
 80a1940:	0bfb 080a                                   ....

080a1944 <_ZTVN5spark12NetworkClassE>:
	...
 80a194c:	0ca5 080a 0caf 080a 0cb9 080a 0cc3 080a     ................
 80a195c:	0ccd 080a 0cd9 080a 0ce5 080a 0ced 080a     ................
 80a196c:	0cf5 080a 0d01 080a 0d09 080a 0d13 080a     ................
 80a197c:	0d1d 080a                                   ....

080a1980 <_ZSt7nothrow>:
	...

080a1981 <link_const_variable_data_end>:
 80a1981:	00          	.byte	0x00
	...

080a1984 <link_constructors_location>:
 80a1984:	080a01a9 	.word	0x080a01a9
 80a1988:	080a0535 	.word	0x080a0535
 80a198c:	080a069d 	.word	0x080a069d
 80a1990:	080a06ad 	.word	0x080a06ad
 80a1994:	080a06c9 	.word	0x080a06c9
 80a1998:	080a0c91 	.word	0x080a0c91
 80a199c:	080a0d6d 	.word	0x080a0d6d
 80a19a0:	080a0e65 	.word	0x080a0e65

080a19a4 <link_constructors_end>:
	...
